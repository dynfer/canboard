
build/canboard.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000249 	.word	0x08000249
 8000008:	0800024b 	.word	0x0800024b
 800000c:	0800024b 	.word	0x0800024b
 8000010:	0800024b 	.word	0x0800024b
 8000014:	0800024b 	.word	0x0800024b
 8000018:	0800024b 	.word	0x0800024b
 800001c:	0800024b 	.word	0x0800024b
 8000020:	0800024b 	.word	0x0800024b
 8000024:	0800024b 	.word	0x0800024b
 8000028:	0800024b 	.word	0x0800024b
 800002c:	08002d41 	.word	0x08002d41
 8000030:	0800024b 	.word	0x0800024b
 8000034:	0800024b 	.word	0x0800024b
 8000038:	0800024b 	.word	0x0800024b
 800003c:	0800024b 	.word	0x0800024b
 8000040:	0800024b 	.word	0x0800024b
 8000044:	0800024b 	.word	0x0800024b
 8000048:	0800024b 	.word	0x0800024b
 800004c:	0800024b 	.word	0x0800024b
 8000050:	0800024b 	.word	0x0800024b
 8000054:	0800024b 	.word	0x0800024b
 8000058:	08001401 	.word	0x08001401
 800005c:	08001471 	.word	0x08001471
 8000060:	080014f1 	.word	0x080014f1
 8000064:	08001571 	.word	0x08001571
 8000068:	080015f1 	.word	0x080015f1
 800006c:	08001d31 	.word	0x08001d31
 8000070:	08001da1 	.word	0x08001da1
 8000074:	08001e21 	.word	0x08001e21
 8000078:	08001ea1 	.word	0x08001ea1
 800007c:	08001f21 	.word	0x08001f21
 8000080:	08001fa1 	.word	0x08001fa1
 8000084:	08002021 	.word	0x08002021
 8000088:	0800024b 	.word	0x0800024b
 800008c:	08001aa1 	.word	0x08001aa1
 8000090:	08001b51 	.word	0x08001b51
 8000094:	08001c01 	.word	0x08001c01
 8000098:	08001cb1 	.word	0x08001cb1
 800009c:	08001671 	.word	0x08001671
 80000a0:	0800024b 	.word	0x0800024b
 80000a4:	0800024b 	.word	0x0800024b
 80000a8:	0800024b 	.word	0x0800024b
 80000ac:	0800024b 	.word	0x0800024b
 80000b0:	080020a1 	.word	0x080020a1
 80000b4:	0800024b 	.word	0x0800024b
 80000b8:	0800024b 	.word	0x0800024b
 80000bc:	0800024b 	.word	0x0800024b
 80000c0:	0800024b 	.word	0x0800024b
 80000c4:	0800024b 	.word	0x0800024b
 80000c8:	0800024b 	.word	0x0800024b
 80000cc:	0800024b 	.word	0x0800024b
 80000d0:	0800024b 	.word	0x0800024b
 80000d4:	08002191 	.word	0x08002191
 80000d8:	0800024b 	.word	0x0800024b
 80000dc:	0800024b 	.word	0x0800024b
 80000e0:	08001851 	.word	0x08001851
 80000e4:	0800024b 	.word	0x0800024b
 80000e8:	0800024b 	.word	0x0800024b
 80000ec:	0800024b 	.word	0x0800024b
 80000f0:	0800024b 	.word	0x0800024b
 80000f4:	0800024b 	.word	0x0800024b
 80000f8:	0800024b 	.word	0x0800024b
 80000fc:	0800024b 	.word	0x0800024b
 8000100:	0800024b 	.word	0x0800024b
 8000104:	0800024b 	.word	0x0800024b
 8000108:	0800024b 	.word	0x0800024b
 800010c:	0800024b 	.word	0x0800024b
 8000110:	0800024b 	.word	0x0800024b
 8000114:	0800024b 	.word	0x0800024b
 8000118:	0800024b 	.word	0x0800024b
 800011c:	0800024b 	.word	0x0800024b
 8000120:	0800024b 	.word	0x0800024b
 8000124:	0800024b 	.word	0x0800024b
 8000128:	0800024b 	.word	0x0800024b
 800012c:	0800024b 	.word	0x0800024b
 8000130:	0800024b 	.word	0x0800024b
 8000134:	0800024b 	.word	0x0800024b
 8000138:	0800024b 	.word	0x0800024b
 800013c:	0800024b 	.word	0x0800024b
 8000140:	0800024b 	.word	0x0800024b
 8000144:	0800024b 	.word	0x0800024b
 8000148:	0800024b 	.word	0x0800024b
 800014c:	0800024b 	.word	0x0800024b
 8000150:	0800024b 	.word	0x0800024b
 8000154:	0800024b 	.word	0x0800024b
 8000158:	0800024b 	.word	0x0800024b
 800015c:	0800024b 	.word	0x0800024b

Disassembly of section .text:

08000170 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000170:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000172:	4827      	ldr	r0, [pc, #156]	@ (8000210 <endfiniloop+0x4>)
                msr     MSP, r0
 8000174:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000178:	4826      	ldr	r0, [pc, #152]	@ (8000214 <endfiniloop+0x8>)
                msr     PSP, r0
 800017a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800017e:	4826      	ldr	r0, [pc, #152]	@ (8000218 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000180:	f64e 5108 	movw	r1, #60680	@ 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000184:	f2ce 0100 	movt	r1, #57344	@ 0xe000
                str     r0, [r1]
 8000188:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800018a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800018c:	f380 8814 	msr	CONTROL, r0
                isb
 8000190:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000194:	f001 f8ec 	bl	8001370 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000198:	f002 f922 	bl	80023e0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800019c:	f04f 3055 	mov.w	r0, #1431655765	@ 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 80001a0:	491e      	ldr	r1, [pc, #120]	@ (800021c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 80001a2:	4a1b      	ldr	r2, [pc, #108]	@ (8000210 <endfiniloop+0x4>)

080001a4 <msloop>:
msloop:
                cmp     r1, r2
 80001a4:	4291      	cmp	r1, r2
                itt     lo
 80001a6:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001a8:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 80001ac:	e7fa      	bcc.n	80001a4 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 80001ae:	491c      	ldr	r1, [pc, #112]	@ (8000220 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80001b0:	4a18      	ldr	r2, [pc, #96]	@ (8000214 <endfiniloop+0x8>)

080001b2 <psloop>:
psloop:
                cmp     r1, r2
 80001b2:	4291      	cmp	r1, r2
                itt     lo
 80001b4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001b6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001ba:	e7fa      	bcc.n	80001b2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 80001bc:	4919      	ldr	r1, [pc, #100]	@ (8000224 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 80001be:	4a1a      	ldr	r2, [pc, #104]	@ (8000228 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 80001c0:	4b1a      	ldr	r3, [pc, #104]	@ (800022c <endfiniloop+0x20>)

080001c2 <dloop>:
dloop:
                cmp     r2, r3
 80001c2:	429a      	cmp	r2, r3
                ittt    lo
 80001c4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001c6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001ca:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001ce:	e7f8      	bcc.n	80001c2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 80001d0:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 80001d2:	4917      	ldr	r1, [pc, #92]	@ (8000230 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 80001d4:	4a17      	ldr	r2, [pc, #92]	@ (8000234 <endfiniloop+0x28>)

080001d6 <bloop>:
bloop:
                cmp     r1, r2
 80001d6:	4291      	cmp	r1, r2
                itt     lo
 80001d8:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001da:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 80001de:	e7fa      	bcc.n	80001d6 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 80001e0:	f001 f8de 	bl	80013a0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80001e4:	f001 f8cc 	bl	8001380 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 80001e8:	4c13      	ldr	r4, [pc, #76]	@ (8000238 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 80001ea:	4d14      	ldr	r5, [pc, #80]	@ (800023c <endfiniloop+0x30>)

080001ec <initloop>:
initloop:
                cmp     r4, r5
 80001ec:	42ac      	cmp	r4, r5
                bge     endinitloop
 80001ee:	da03      	bge.n	80001f8 <endinitloop>
                ldr     r1, [r4], #4
 80001f0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001f4:	4788      	blx	r1
                b       initloop
 80001f6:	e7f9      	b.n	80001ec <initloop>

080001f8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80001f8:	f002 fdb2 	bl	8002d60 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80001fc:	4c10      	ldr	r4, [pc, #64]	@ (8000240 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 80001fe:	4d11      	ldr	r5, [pc, #68]	@ (8000244 <endfiniloop+0x38>)

08000200 <finiloop>:
finiloop:
                cmp     r4, r5
 8000200:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000202:	da03      	bge.n	800020c <endfiniloop>
                ldr     r1, [r4], #4
 8000204:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000208:	4788      	blx	r1
                b       finiloop
 800020a:	e7f9      	b.n	8000200 <finiloop>

0800020c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800020c:	f001 b8c0 	b.w	8001390 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000210:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000214:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000218:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800021c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000220:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000224:	08003708 	.word	0x08003708
                ldr     r2, =__data_base__
 8000228:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800022c:	20000860 	.word	0x20000860
                ldr     r1, =__bss_base__
 8000230:	20000860 	.word	0x20000860
                ldr     r2, =__bss_end__
 8000234:	200014a0 	.word	0x200014a0
                ldr     r4, =__init_array_base__
 8000238:	08000160 	.word	0x08000160
                ldr     r5, =__init_array_end__
 800023c:	08000164 	.word	0x08000164
                ldr     r4, =__fini_array_base__
 8000240:	08000164 	.word	0x08000164
                ldr     r5, =__fini_array_end__
 8000244:	08000164 	.word	0x08000164

08000248 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000248:	e792      	b.n	8000170 <_crt0_entry>

0800024a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800024a:	f000 f800 	bl	800024e <_unhandled_exception>

0800024e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800024e:	e7fe      	b.n	800024e <_unhandled_exception>

08000250 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000254:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000258:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800025a:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800025c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000260 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000260:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000262:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000266:	4628      	mov	r0, r5
                blx     r4
 8000268:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800026a:	2000      	movs	r0, #0
                bl      chThdExit
 800026c:	f002 fd28 	bl	8002cc0 <chThdExit>

08000270 <_zombies>:
_zombies:       b       _zombies
 8000270:	e7fe      	b.n	8000270 <_zombies>

08000272 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000272:	f002 f8ed 	bl	8002450 <chSchDoReschedule>

08000276 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000276:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000278:	e7fe      	b.n	8000278 <_port_exit_from_isr+0x2>
	...

0800027c <memset>:
 800027c:	b570      	push	{r4, r5, r6, lr}
 800027e:	0786      	lsls	r6, r0, #30
 8000280:	d047      	beq.n	8000312 <memset+0x96>
 8000282:	1e54      	subs	r4, r2, #1
 8000284:	2a00      	cmp	r2, #0
 8000286:	d03e      	beq.n	8000306 <memset+0x8a>
 8000288:	4603      	mov	r3, r0
 800028a:	b2ca      	uxtb	r2, r1
 800028c:	e001      	b.n	8000292 <memset+0x16>
 800028e:	3c01      	subs	r4, #1
 8000290:	d339      	bcc.n	8000306 <memset+0x8a>
 8000292:	f803 2b01 	strb.w	r2, [r3], #1
 8000296:	079d      	lsls	r5, r3, #30
 8000298:	d1f9      	bne.n	800028e <memset+0x12>
 800029a:	2c03      	cmp	r4, #3
 800029c:	d92c      	bls.n	80002f8 <memset+0x7c>
 800029e:	b2cd      	uxtb	r5, r1
 80002a0:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 80002a4:	2c0f      	cmp	r4, #15
 80002a6:	461a      	mov	r2, r3
 80002a8:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 80002ac:	d934      	bls.n	8000318 <memset+0x9c>
 80002ae:	f1a4 0c10 	sub.w	ip, r4, #16
 80002b2:	f02c 060f 	bic.w	r6, ip, #15
 80002b6:	f103 0e10 	add.w	lr, r3, #16
 80002ba:	44b6      	add	lr, r6
 80002bc:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 80002c0:	6015      	str	r5, [r2, #0]
 80002c2:	6055      	str	r5, [r2, #4]
 80002c4:	6095      	str	r5, [r2, #8]
 80002c6:	60d5      	str	r5, [r2, #12]
 80002c8:	3210      	adds	r2, #16
 80002ca:	4572      	cmp	r2, lr
 80002cc:	d1f8      	bne.n	80002c0 <memset+0x44>
 80002ce:	f10c 0201 	add.w	r2, ip, #1
 80002d2:	f014 0f0c 	tst.w	r4, #12
 80002d6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80002da:	f004 0c0f 	and.w	ip, r4, #15
 80002de:	d013      	beq.n	8000308 <memset+0x8c>
 80002e0:	f1ac 0304 	sub.w	r3, ip, #4
 80002e4:	f023 0303 	bic.w	r3, r3, #3
 80002e8:	3304      	adds	r3, #4
 80002ea:	4413      	add	r3, r2
 80002ec:	f842 5b04 	str.w	r5, [r2], #4
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d1fb      	bne.n	80002ec <memset+0x70>
 80002f4:	f00c 0403 	and.w	r4, ip, #3
 80002f8:	b12c      	cbz	r4, 8000306 <memset+0x8a>
 80002fa:	b2c9      	uxtb	r1, r1
 80002fc:	441c      	add	r4, r3
 80002fe:	f803 1b01 	strb.w	r1, [r3], #1
 8000302:	429c      	cmp	r4, r3
 8000304:	d1fb      	bne.n	80002fe <memset+0x82>
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	4664      	mov	r4, ip
 800030a:	4613      	mov	r3, r2
 800030c:	2c00      	cmp	r4, #0
 800030e:	d1f4      	bne.n	80002fa <memset+0x7e>
 8000310:	e7f9      	b.n	8000306 <memset+0x8a>
 8000312:	4603      	mov	r3, r0
 8000314:	4614      	mov	r4, r2
 8000316:	e7c0      	b.n	800029a <memset+0x1e>
 8000318:	46a4      	mov	ip, r4
 800031a:	e7e1      	b.n	80002e0 <memset+0x64>

0800031c <memcpy>:
 800031c:	4684      	mov	ip, r0
 800031e:	ea41 0300 	orr.w	r3, r1, r0
 8000322:	f013 0303 	ands.w	r3, r3, #3
 8000326:	d149      	bne.n	80003bc <memcpy+0xa0>
 8000328:	3a40      	subs	r2, #64	@ 0x40
 800032a:	d323      	bcc.n	8000374 <memcpy+0x58>
 800032c:	680b      	ldr	r3, [r1, #0]
 800032e:	6003      	str	r3, [r0, #0]
 8000330:	684b      	ldr	r3, [r1, #4]
 8000332:	6043      	str	r3, [r0, #4]
 8000334:	688b      	ldr	r3, [r1, #8]
 8000336:	6083      	str	r3, [r0, #8]
 8000338:	68cb      	ldr	r3, [r1, #12]
 800033a:	60c3      	str	r3, [r0, #12]
 800033c:	690b      	ldr	r3, [r1, #16]
 800033e:	6103      	str	r3, [r0, #16]
 8000340:	694b      	ldr	r3, [r1, #20]
 8000342:	6143      	str	r3, [r0, #20]
 8000344:	698b      	ldr	r3, [r1, #24]
 8000346:	6183      	str	r3, [r0, #24]
 8000348:	69cb      	ldr	r3, [r1, #28]
 800034a:	61c3      	str	r3, [r0, #28]
 800034c:	6a0b      	ldr	r3, [r1, #32]
 800034e:	6203      	str	r3, [r0, #32]
 8000350:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8000352:	6243      	str	r3, [r0, #36]	@ 0x24
 8000354:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8000356:	6283      	str	r3, [r0, #40]	@ 0x28
 8000358:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800035a:	62c3      	str	r3, [r0, #44]	@ 0x2c
 800035c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800035e:	6303      	str	r3, [r0, #48]	@ 0x30
 8000360:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8000362:	6343      	str	r3, [r0, #52]	@ 0x34
 8000364:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8000366:	6383      	str	r3, [r0, #56]	@ 0x38
 8000368:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800036a:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800036c:	3040      	adds	r0, #64	@ 0x40
 800036e:	3140      	adds	r1, #64	@ 0x40
 8000370:	3a40      	subs	r2, #64	@ 0x40
 8000372:	d2db      	bcs.n	800032c <memcpy+0x10>
 8000374:	3230      	adds	r2, #48	@ 0x30
 8000376:	d30b      	bcc.n	8000390 <memcpy+0x74>
 8000378:	680b      	ldr	r3, [r1, #0]
 800037a:	6003      	str	r3, [r0, #0]
 800037c:	684b      	ldr	r3, [r1, #4]
 800037e:	6043      	str	r3, [r0, #4]
 8000380:	688b      	ldr	r3, [r1, #8]
 8000382:	6083      	str	r3, [r0, #8]
 8000384:	68cb      	ldr	r3, [r1, #12]
 8000386:	60c3      	str	r3, [r0, #12]
 8000388:	3010      	adds	r0, #16
 800038a:	3110      	adds	r1, #16
 800038c:	3a10      	subs	r2, #16
 800038e:	d2f3      	bcs.n	8000378 <memcpy+0x5c>
 8000390:	320c      	adds	r2, #12
 8000392:	d305      	bcc.n	80003a0 <memcpy+0x84>
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	3a04      	subs	r2, #4
 800039e:	d2f9      	bcs.n	8000394 <memcpy+0x78>
 80003a0:	3204      	adds	r2, #4
 80003a2:	d008      	beq.n	80003b6 <memcpy+0x9a>
 80003a4:	07d2      	lsls	r2, r2, #31
 80003a6:	bf1c      	itt	ne
 80003a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003ac:	f800 3b01 	strbne.w	r3, [r0], #1
 80003b0:	d301      	bcc.n	80003b6 <memcpy+0x9a>
 80003b2:	880b      	ldrh	r3, [r1, #0]
 80003b4:	8003      	strh	r3, [r0, #0]
 80003b6:	4660      	mov	r0, ip
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	2a08      	cmp	r2, #8
 80003be:	d313      	bcc.n	80003e8 <memcpy+0xcc>
 80003c0:	078b      	lsls	r3, r1, #30
 80003c2:	d0b1      	beq.n	8000328 <memcpy+0xc>
 80003c4:	f010 0303 	ands.w	r3, r0, #3
 80003c8:	d0ae      	beq.n	8000328 <memcpy+0xc>
 80003ca:	f1c3 0304 	rsb	r3, r3, #4
 80003ce:	1ad2      	subs	r2, r2, r3
 80003d0:	07db      	lsls	r3, r3, #31
 80003d2:	bf1c      	itt	ne
 80003d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003d8:	f800 3b01 	strbne.w	r3, [r0], #1
 80003dc:	d3a4      	bcc.n	8000328 <memcpy+0xc>
 80003de:	f831 3b02 	ldrh.w	r3, [r1], #2
 80003e2:	f820 3b02 	strh.w	r3, [r0], #2
 80003e6:	e79f      	b.n	8000328 <memcpy+0xc>
 80003e8:	3a04      	subs	r2, #4
 80003ea:	d3d9      	bcc.n	80003a0 <memcpy+0x84>
 80003ec:	3a01      	subs	r2, #1
 80003ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003f2:	f800 3b01 	strb.w	r3, [r0], #1
 80003f6:	d2f9      	bcs.n	80003ec <memcpy+0xd0>
 80003f8:	780b      	ldrb	r3, [r1, #0]
 80003fa:	7003      	strb	r3, [r0, #0]
 80003fc:	784b      	ldrb	r3, [r1, #1]
 80003fe:	7043      	strb	r3, [r0, #1]
 8000400:	788b      	ldrb	r3, [r1, #2]
 8000402:	7083      	strb	r3, [r0, #2]
 8000404:	4660      	mov	r0, ip
 8000406:	4770      	bx	lr
	...

08000410 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8000410:	2000      	movs	r0, #0
 8000412:	4770      	bx	lr
	...

08000420 <adc_lld_serve_rx_interrupt>:
 * @brief   Shared ADC DMA ISR service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8000420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* DMA errors handling.*/
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
 8000424:	070d      	lsls	r5, r1, #28
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8000426:	4604      	mov	r4, r0
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
 8000428:	d41a      	bmi.n	8000460 <adc_lld_serve_rx_interrupt+0x40>
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  }
  else {
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 800042a:	078a      	lsls	r2, r1, #30
 800042c:	d50f      	bpl.n	800044e <adc_lld_serve_rx_interrupt+0x2e>
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
 800042e:	6903      	ldr	r3, [r0, #16]
 8000430:	781a      	ldrb	r2, [r3, #0]
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	2a00      	cmp	r2, #0
 8000436:	d051      	beq.n	80004dc <adc_lld_serve_rx_interrupt+0xbc>
 8000438:	b13b      	cbz	r3, 800044a <adc_lld_serve_rx_interrupt+0x2a>
 800043a:	2204      	movs	r2, #4
 800043c:	7002      	strb	r2, [r0, #0]
 800043e:	4798      	blx	r3
 8000440:	7823      	ldrb	r3, [r4, #0]
 8000442:	2b04      	cmp	r3, #4
 8000444:	d101      	bne.n	800044a <adc_lld_serve_rx_interrupt+0x2a>
 8000446:	2303      	movs	r3, #3
 8000448:	7023      	strb	r3, [r4, #0]
    else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
      /* Half transfer processing.*/
      _adc_isr_half_code(adcp);
    }
  }
}
 800044a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 800044e:	074b      	lsls	r3, r1, #29
 8000450:	d5fb      	bpl.n	800044a <adc_lld_serve_rx_interrupt+0x2a>
      _adc_isr_half_code(adcp);
 8000452:	6903      	ldr	r3, [r0, #16]
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0f7      	beq.n	800044a <adc_lld_serve_rx_interrupt+0x2a>
}
 800045a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _adc_isr_half_code(adcp);
 800045e:	4718      	bx	r3
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8000460:	230e      	movs	r3, #14
 8000462:	e9d0 720a 	ldrd	r7, r2, [r0, #40]	@ 0x28
  adcp->adc->CR2 = 0;
 8000466:	2100      	movs	r1, #0
  dmaStreamDisable(adcp->dmastp);
 8000468:	6856      	ldr	r6, [r2, #4]
 800046a:	6835      	ldr	r5, [r6, #0]
 800046c:	f025 050f 	bic.w	r5, r5, #15
 8000470:	6035      	str	r5, [r6, #0]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8000472:	6905      	ldr	r5, [r0, #16]
  dmaStreamDisable(adcp->dmastp);
 8000474:	7b56      	ldrb	r6, [r2, #13]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8000476:	68ad      	ldr	r5, [r5, #8]
  dmaStreamDisable(adcp->dmastp);
 8000478:	6812      	ldr	r2, [r2, #0]
 800047a:	40b3      	lsls	r3, r6
 800047c:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 800047e:	60b9      	str	r1, [r7, #8]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8000480:	b30d      	cbz	r5, 80004c6 <adc_lld_serve_rx_interrupt+0xa6>
 8000482:	2305      	movs	r3, #5
 8000484:	7003      	strb	r3, [r0, #0]
 8000486:	47a8      	blx	r5
 8000488:	7823      	ldrb	r3, [r4, #0]
 800048a:	2b05      	cmp	r3, #5
 800048c:	d01b      	beq.n	80004c6 <adc_lld_serve_rx_interrupt+0xa6>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800048e:	2320      	movs	r3, #32
 8000490:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8000494:	6961      	ldr	r1, [r4, #20]
 8000496:	b189      	cbz	r1, 80004bc <adc_lld_serve_rx_interrupt+0x9c>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8000498:	2200      	movs	r2, #0
    tp->u.rdymsg = msg;
 800049a:	f04f 35ff 	mov.w	r5, #4294967295
                                                           ch_priority_queue_t *p) {

  /* Scanning priority queue.*/
  do {
    pqp = pqp->next;
  } while (pqp->prio >= p->prio);
 800049e:	4b26      	ldr	r3, [pc, #152]	@ (8000538 <adc_lld_serve_rx_interrupt+0x118>)
 80004a0:	6888      	ldr	r0, [r1, #8]
    *trp = NULL;
 80004a2:	6162      	str	r2, [r4, #20]
    tp->u.rdymsg = msg;
 80004a4:	624d      	str	r5, [r1, #36]	@ 0x24
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
 80004a6:	f881 2020 	strb.w	r2, [r1, #32]
    pqp = pqp->next;
 80004aa:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 80004ac:	689a      	ldr	r2, [r3, #8]
 80004ae:	4282      	cmp	r2, r0
 80004b0:	d2fb      	bcs.n	80004aa <adc_lld_serve_rx_interrupt+0x8a>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 80004b2:	685a      	ldr	r2, [r3, #4]
 80004b4:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 80004b8:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 80004ba:	6059      	str	r1, [r3, #4]
 80004bc:	2300      	movs	r3, #0
 80004be:	f383 8811 	msr	BASEPRI, r3
}
 80004c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 80004c6:	2202      	movs	r2, #2
 80004c8:	2300      	movs	r3, #0
 80004ca:	7022      	strb	r2, [r4, #0]
 80004cc:	6123      	str	r3, [r4, #16]
 80004ce:	2320      	movs	r3, #32
 80004d0:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 80004d4:	6961      	ldr	r1, [r4, #20]
 80004d6:	2900      	cmp	r1, #0
 80004d8:	d1de      	bne.n	8000498 <adc_lld_serve_rx_interrupt+0x78>
 80004da:	e7ef      	b.n	80004bc <adc_lld_serve_rx_interrupt+0x9c>
  dmaStreamDisable(adcp->dmastp);
 80004dc:	210e      	movs	r1, #14
 80004de:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
void adc_lld_stop_conversion(ADCDriver *adcp) {
 80004e0:	f8d0 c028 	ldr.w	ip, [r0, #40]	@ 0x28
  dmaStreamDisable(adcp->dmastp);
 80004e4:	e9d5 e700 	ldrd	lr, r7, [r5]
 80004e8:	683e      	ldr	r6, [r7, #0]
 80004ea:	f026 060f 	bic.w	r6, r6, #15
 80004ee:	603e      	str	r6, [r7, #0]
 80004f0:	7b6d      	ldrb	r5, [r5, #13]
 80004f2:	40a9      	lsls	r1, r5
 80004f4:	f8ce 1004 	str.w	r1, [lr, #4]
  adcp->adc->CR2 = 0;
 80004f8:	f8cc 2008 	str.w	r2, [ip, #8]
      _adc_isr_full_code(adcp);
 80004fc:	b1bb      	cbz	r3, 800052e <adc_lld_serve_rx_interrupt+0x10e>
 80004fe:	2204      	movs	r2, #4
 8000500:	7002      	strb	r2, [r0, #0]
 8000502:	4798      	blx	r3
 8000504:	7823      	ldrb	r3, [r4, #0]
 8000506:	2b04      	cmp	r3, #4
 8000508:	d011      	beq.n	800052e <adc_lld_serve_rx_interrupt+0x10e>
 800050a:	2320      	movs	r3, #32
 800050c:	f383 8811 	msr	BASEPRI, r3
 8000510:	6961      	ldr	r1, [r4, #20]
 8000512:	2900      	cmp	r1, #0
 8000514:	d0d2      	beq.n	80004bc <adc_lld_serve_rx_interrupt+0x9c>
    *trp = NULL;
 8000516:	2200      	movs	r2, #0
  } while (pqp->prio >= p->prio);
 8000518:	4b07      	ldr	r3, [pc, #28]	@ (8000538 <adc_lld_serve_rx_interrupt+0x118>)
 800051a:	6888      	ldr	r0, [r1, #8]
 800051c:	6162      	str	r2, [r4, #20]
    tp->u.rdymsg = msg;
 800051e:	624a      	str	r2, [r1, #36]	@ 0x24
 8000520:	f881 2020 	strb.w	r2, [r1, #32]
    pqp = pqp->next;
 8000524:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8000526:	689a      	ldr	r2, [r3, #8]
 8000528:	4282      	cmp	r2, r0
 800052a:	d2fb      	bcs.n	8000524 <adc_lld_serve_rx_interrupt+0x104>
 800052c:	e7c1      	b.n	80004b2 <adc_lld_serve_rx_interrupt+0x92>
 800052e:	2202      	movs	r2, #2
 8000530:	2300      	movs	r3, #0
 8000532:	7022      	strb	r2, [r4, #0]
 8000534:	6123      	str	r3, [r4, #16]
 8000536:	e7e8      	b.n	800050a <adc_lld_serve_rx_interrupt+0xea>
 8000538:	20001428 	.word	0x20001428
 800053c:	00000000 	.word	0x00000000

08000540 <_port_irq_epilogue>:
 8000540:	2320      	movs	r3, #32
 8000542:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000546:	4b0d      	ldr	r3, [pc, #52]	@ (800057c <_port_irq_epilogue+0x3c>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 800054e:	d102      	bne.n	8000556 <_port_irq_epilogue+0x16>
 8000550:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000554:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000556:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800055a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 800055e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8000560:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000562:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8000566:	4a06      	ldr	r2, [pc, #24]	@ (8000580 <_port_irq_epilogue+0x40>)
 8000568:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 800056a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 800056c:	6889      	ldr	r1, [r1, #8]
 800056e:	6892      	ldr	r2, [r2, #8]
 8000570:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8000572:	bf8c      	ite	hi
 8000574:	4a03      	ldrhi	r2, [pc, #12]	@ (8000584 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8000576:	4a04      	ldrls	r2, [pc, #16]	@ (8000588 <_port_irq_epilogue+0x48>)
 8000578:	619a      	str	r2, [r3, #24]
 800057a:	4770      	bx	lr
 800057c:	e000ed00 	.word	0xe000ed00
 8000580:	20001428 	.word	0x20001428
 8000584:	08000273 	.word	0x08000273
 8000588:	08000276 	.word	0x08000276
 800058c:	00000000 	.word	0x00000000

08000590 <dmaStreamFreeI>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @iclass
 */
void dmaStreamFreeI(const stm32_dma_stream_t *dmastp) {
 8000590:	b570      	push	{r4, r5, r6, lr}
  /* Check if the streams is not taken.*/
  osalDbgAssert((dma.allocated_mask & (1 << selfindex)) != 0U,
                "not allocated");

  /* Marks the stream as not allocated.*/
  dma.allocated_mask &= ~(1U << selfindex);
 8000592:	f04f 0e01 	mov.w	lr, #1
  uint32_t selfindex = (uint32_t)dmastp->selfindex;
 8000596:	7b81      	ldrb	r1, [r0, #14]
  dma.allocated_mask &= ~(1U << selfindex);
 8000598:	4a16      	ldr	r2, [pc, #88]	@ (80005f4 <dmaStreamFreeI+0x64>)
 800059a:	fa0e fc01 	lsl.w	ip, lr, r1
  dma.isr_mask &= ~(1U << selfindex);

  /* Disables the associated IRQ vector if it is no more in use.*/
  if ((dma.isr_mask & dmastp->cmask) == 0U) {
 800059e:	6885      	ldr	r5, [r0, #8]
  dma.isr_mask &= ~(1U << selfindex);
 80005a0:	e9d2 4300 	ldrd	r4, r3, [r2]
 80005a4:	ea23 030c 	bic.w	r3, r3, ip
  dma.allocated_mask &= ~(1U << selfindex);
 80005a8:	ea24 040c 	bic.w	r4, r4, ip
  dma.isr_mask &= ~(1U << selfindex);
 80005ac:	e9c2 4300 	strd	r4, r3, [r2]
  if ((dma.isr_mask & dmastp->cmask) == 0U) {
 80005b0:	402b      	ands	r3, r5
 80005b2:	d00f      	beq.n	80005d4 <dmaStreamFreeI+0x44>
    nvicDisableVector(dmastp->vector);
  }

  /* Removes the DMA handler.*/
  dma.streams[selfindex].func  = NULL;
 80005b4:	2000      	movs	r0, #0
 80005b6:	1c4b      	adds	r3, r1, #1
  dma.streams[selfindex].param = NULL;
 80005b8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  dma.streams[selfindex].func  = NULL;
 80005bc:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma.allocated_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 80005c0:	0663      	lsls	r3, r4, #25
  dma.streams[selfindex].param = NULL;
 80005c2:	6048      	str	r0, [r1, #4]
  if ((dma.allocated_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 80005c4:	d105      	bne.n	80005d2 <dmaStreamFreeI+0x42>
    rccDisableDMA1();
 80005c6:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <dmaStreamFreeI+0x68>)
 80005c8:	695a      	ldr	r2, [r3, #20]
 80005ca:	f022 0201 	bic.w	r2, r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
 80005d0:	695b      	ldr	r3, [r3, #20]
  /* Shutting down DMAMUX if present.*/
  if (dma.allocated_mask == 0U) {
    rccDisableDMAMUX();
  }
#endif
}
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
    nvicDisableVector(dmastp->vector);
 80005d4:	f890 c00f 	ldrb.w	ip, [r0, #15]
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80005d8:	4d08      	ldr	r5, [pc, #32]	@ (80005fc <dmaStreamFreeI+0x6c>)
 80005da:	ea4f 165c 	mov.w	r6, ip, lsr #5
 80005de:	f00c 001f 	and.w	r0, ip, #31
 80005e2:	3620      	adds	r6, #32
 80005e4:	fa0e f000 	lsl.w	r0, lr, r0
 80005e8:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 80005ec:	4465      	add	r5, ip
 80005ee:	f885 3300 	strb.w	r3, [r5, #768]	@ 0x300
#endif
}
 80005f2:	e7df      	b.n	80005b4 <dmaStreamFreeI+0x24>
 80005f4:	200012bc 	.word	0x200012bc
 80005f8:	40021000 	.word	0x40021000
 80005fc:	e000e100 	.word	0xe000e100

08000600 <dmaStreamAllocI.part.0>:
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8000600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = (1U << i);
 8000604:	f04f 0e01 	mov.w	lr, #1
    if ((dma.allocated_mask & mask) == 0U) {
 8000608:	4d26      	ldr	r5, [pc, #152]	@ (80006a4 <dmaStreamAllocI.part.0+0xa4>)
    uint32_t mask = (1U << i);
 800060a:	fa0e f600 	lsl.w	r6, lr, r0
    if ((dma.allocated_mask & mask) == 0U) {
 800060e:	682c      	ldr	r4, [r5, #0]
 8000610:	4226      	tst	r6, r4
    return NULL;
 8000612:	bf18      	it	ne
 8000614:	2000      	movne	r0, #0
    if ((dma.allocated_mask & mask) == 0U) {
 8000616:	d001      	beq.n	800061c <dmaStreamAllocI.part.0+0x1c>
}
 8000618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 800061c:	4684      	mov	ip, r0
        rccEnableDMA1(true);
 800061e:	4f22      	ldr	r7, [pc, #136]	@ (80006a8 <dmaStreamAllocI.part.0+0xa8>)
      dma.allocated_mask  |= mask;
 8000620:	4334      	orrs	r4, r6
 8000622:	602c      	str	r4, [r5, #0]
        rccEnableDMA1(true);
 8000624:	6978      	ldr	r0, [r7, #20]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8000626:	4c21      	ldr	r4, [pc, #132]	@ (80006ac <dmaStreamAllocI.part.0+0xac>)
        rccEnableDMA1(true);
 8000628:	ea40 080e 	orr.w	r8, r0, lr
      dma.streams[i].func  = func;
 800062c:	eb0c 000e 	add.w	r0, ip, lr
 8000630:	f845 2030 	str.w	r2, [r5, r0, lsl #3]
      dma.streams[i].param = param;
 8000634:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8000638:	6043      	str	r3, [r0, #4]
        rccEnableDMA1(true);
 800063a:	f8c7 8014 	str.w	r8, [r7, #20]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 800063e:	eb04 100c 	add.w	r0, r4, ip, lsl #4
        rccEnableDMA1(true);
 8000642:	697b      	ldr	r3, [r7, #20]
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8000644:	686f      	ldr	r7, [r5, #4]
 8000646:	6883      	ldr	r3, [r0, #8]
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8000648:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
        if ((dma.isr_mask & dmastp->cmask) == 0U) {
 800064c:	421f      	tst	r7, r3
 800064e:	d011      	beq.n	8000674 <dmaStreamAllocI.part.0+0x74>
      dmaStreamDisable(dmastp);
 8000650:	220e      	movs	r2, #14
        dma.isr_mask |= mask;
 8000652:	433e      	orrs	r6, r7
      dmaStreamDisable(dmastp);
 8000654:	eb04 010c 	add.w	r1, r4, ip
        dma.isr_mask |= mask;
 8000658:	606e      	str	r6, [r5, #4]
      dmaStreamDisable(dmastp);
 800065a:	f854 500c 	ldr.w	r5, [r4, ip]
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 800065e:	2400      	movs	r4, #0
      dmaStreamDisable(dmastp);
 8000660:	684b      	ldr	r3, [r1, #4]
 8000662:	7b49      	ldrb	r1, [r1, #13]
 8000664:	408a      	lsls	r2, r1
 8000666:	6819      	ldr	r1, [r3, #0]
 8000668:	f021 010f 	bic.w	r1, r1, #15
 800066c:	6019      	str	r1, [r3, #0]
 800066e:	606a      	str	r2, [r5, #4]
      dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8000670:	601c      	str	r4, [r3, #0]
      return dmastp;
 8000672:	e7d1      	b.n	8000618 <dmaStreamAllocI.part.0+0x18>
          nvicEnableVector(dmastp->vector, priority);
 8000674:	7bc2      	ldrb	r2, [r0, #15]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000676:	0109      	lsls	r1, r1, #4
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000678:	0953      	lsrs	r3, r2, #5
 800067a:	009b      	lsls	r3, r3, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800067c:	f102 4860 	add.w	r8, r2, #3758096384	@ 0xe0000000
 8000680:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000684:	f002 021f 	and.w	r2, r2, #31
 8000688:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 800068c:	fa0e f202 	lsl.w	r2, lr, r2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000690:	b2c9      	uxtb	r1, r1
 8000692:	f508 4861 	add.w	r8, r8, #57600	@ 0xe100
 8000696:	f888 1300 	strb.w	r1, [r8, #768]	@ 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800069a:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800069e:	601a      	str	r2, [r3, #0]
}
 80006a0:	e7d6      	b.n	8000650 <dmaStreamAllocI.part.0+0x50>
 80006a2:	bf00      	nop
 80006a4:	200012bc 	.word	0x200012bc
 80006a8:	40021000 	.word	0x40021000
 80006ac:	08003610 	.word	0x08003610

080006b0 <_pal_lld_setgroupmode>:
    0xF,        /* PAL_MODE_STM32_ALTERNATE_OPENDRAIN, 50MHz.*/
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
 80006b0:	2a03      	cmp	r2, #3
                           iomode_t mode) {
 80006b2:	b530      	push	{r4, r5, lr}
  if (mode == PAL_MODE_INPUT_PULLUP)
 80006b4:	d02d      	beq.n	8000712 <_pal_lld_setgroupmode+0x62>
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
 80006b6:	2a04      	cmp	r2, #4
    port->BRR = mask;
 80006b8:	bf08      	it	eq
 80006ba:	6141      	streq	r1, [r0, #20]
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 80006bc:	2300      	movs	r3, #0
  cfg = cfgtab[mode];
 80006be:	4d16      	ldr	r5, [pc, #88]	@ (8000718 <_pal_lld_setgroupmode+0x68>)
 80006c0:	2408      	movs	r4, #8
 80006c2:	5cad      	ldrb	r5, [r5, r2]
  mh = ml = crh = crl = 0;
 80006c4:	469c      	mov	ip, r3
 80006c6:	461a      	mov	r2, r3
 80006c8:	469e      	mov	lr, r3
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
    crl <<= 4;
    crh <<= 4;
    if ((mask & 0x0080) == 0)
 80006ca:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ml <<= 4;
 80006ce:	ea4f 1202 	mov.w	r2, r2, lsl #4
    crl <<= 4;
 80006d2:	ea4f 1303 	mov.w	r3, r3, lsl #4
    crh <<= 4;
 80006d6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    mh <<= 4;
 80006da:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
      ml |= 0xf;
 80006de:	bf0c      	ite	eq
 80006e0:	f042 020f 	orreq.w	r2, r2, #15
    else
      crl |= cfg;
 80006e4:	432b      	orrne	r3, r5
    if ((mask & 0x8000) == 0)
 80006e6:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
      mh |= 0xf;
 80006ea:	bf0c      	ite	eq
 80006ec:	f04e 0e0f 	orreq.w	lr, lr, #15
    else
      crh |= cfg;
 80006f0:	ea4c 0c05 	orrne.w	ip, ip, r5
  for (i = 0; i < 8; i++) {
 80006f4:	3c01      	subs	r4, #1
    mask <<= 1;
 80006f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = 0; i < 8; i++) {
 80006fa:	d1e6      	bne.n	80006ca <_pal_lld_setgroupmode+0x1a>
  }
  port->CRH = (port->CRH & mh) | crh;
 80006fc:	6841      	ldr	r1, [r0, #4]
 80006fe:	ea01 010e 	and.w	r1, r1, lr
 8000702:	ea41 010c 	orr.w	r1, r1, ip
 8000706:	6041      	str	r1, [r0, #4]
  port->CRL = (port->CRL & ml) | crl;
 8000708:	6801      	ldr	r1, [r0, #0]
 800070a:	400a      	ands	r2, r1
 800070c:	4313      	orrs	r3, r2
 800070e:	6003      	str	r3, [r0, #0]
}
 8000710:	bd30      	pop	{r4, r5, pc}
    port->BSRR = mask;
 8000712:	6101      	str	r1, [r0, #16]
 8000714:	e7d2      	b.n	80006bc <_pal_lld_setgroupmode+0xc>
 8000716:	bf00      	nop
 8000718:	080035fc 	.word	0x080035fc
 800071c:	00000000 	.word	0x00000000

08000720 <spi_lld_serve_rx_interrupt>:
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8000720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000722:	070c      	lsls	r4, r1, #28
 8000724:	d456      	bmi.n	80007d4 <spi_lld_serve_rx_interrupt+0xb4>
  }
#else
  (void)flags;
#endif

  if (spip->config->circular) {
 8000726:	6843      	ldr	r3, [r0, #4]
 8000728:	4604      	mov	r4, r0
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	2a00      	cmp	r2, #0
 800072e:	d139      	bne.n	80007a4 <spi_lld_serve_rx_interrupt+0x84>
    dmaStreamDisable(spip->dmatx);
    dmaStreamDisable(spip->dmarx);

    /* Portable SPI ISR code defined in the high level driver, note, it is
       a macro.*/
    _spi_isr_code(spip);
 8000730:	685e      	ldr	r6, [r3, #4]
    dmaStreamDisable(spip->dmatx);
 8000732:	230e      	movs	r3, #14
 8000734:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8000736:	6869      	ldr	r1, [r5, #4]
 8000738:	f8d5 c000 	ldr.w	ip, [r5]
 800073c:	680a      	ldr	r2, [r1, #0]
 800073e:	f022 020f 	bic.w	r2, r2, #15
 8000742:	600a      	str	r2, [r1, #0]
 8000744:	7b69      	ldrb	r1, [r5, #13]
    dmaStreamDisable(spip->dmarx);
 8000746:	6a02      	ldr	r2, [r0, #32]
    dmaStreamDisable(spip->dmatx);
 8000748:	fa03 f101 	lsl.w	r1, r3, r1
    dmaStreamDisable(spip->dmarx);
 800074c:	e9d2 7500 	ldrd	r7, r5, [r2]
    dmaStreamDisable(spip->dmatx);
 8000750:	f8cc 1004 	str.w	r1, [ip, #4]
    dmaStreamDisable(spip->dmarx);
 8000754:	6829      	ldr	r1, [r5, #0]
 8000756:	f021 010f 	bic.w	r1, r1, #15
 800075a:	6029      	str	r1, [r5, #0]
 800075c:	7b52      	ldrb	r2, [r2, #13]
 800075e:	4093      	lsls	r3, r2
 8000760:	607b      	str	r3, [r7, #4]
    _spi_isr_code(spip);
 8000762:	2e00      	cmp	r6, #0
 8000764:	d03b      	beq.n	80007de <spi_lld_serve_rx_interrupt+0xbe>
 8000766:	2304      	movs	r3, #4
 8000768:	7003      	strb	r3, [r0, #0]
 800076a:	47b0      	blx	r6
 800076c:	7823      	ldrb	r3, [r4, #0]
 800076e:	2b04      	cmp	r3, #4
 8000770:	d035      	beq.n	80007de <spi_lld_serve_rx_interrupt+0xbe>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000772:	2320      	movs	r3, #32
 8000774:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8000778:	68a1      	ldr	r1, [r4, #8]
 800077a:	b179      	cbz	r1, 800079c <spi_lld_serve_rx_interrupt+0x7c>
    *trp = NULL;
 800077c:	2200      	movs	r2, #0
 800077e:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <spi_lld_serve_rx_interrupt+0xd0>)
 8000780:	6888      	ldr	r0, [r1, #8]
 8000782:	60a2      	str	r2, [r4, #8]
    tp->u.rdymsg = msg;
 8000784:	624a      	str	r2, [r1, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8000786:	f881 2020 	strb.w	r2, [r1, #32]
    pqp = pqp->next;
 800078a:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 800078c:	689a      	ldr	r2, [r3, #8]
 800078e:	4282      	cmp	r2, r0
 8000790:	d2fb      	bcs.n	800078a <spi_lld_serve_rx_interrupt+0x6a>
  p->prev       = pqp->prev;
 8000792:	685a      	ldr	r2, [r3, #4]
 8000794:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 8000798:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 800079a:	6059      	str	r1, [r3, #4]
 800079c:	2300      	movs	r3, #0
 800079e:	f383 8811 	msr	BASEPRI, r3
  }
}
 80007a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 80007a4:	074a      	lsls	r2, r1, #29
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 80007a6:	f001 0502 	and.w	r5, r1, #2
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 80007aa:	d503      	bpl.n	80007b4 <spi_lld_serve_rx_interrupt+0x94>
      _spi_isr_half_code(spip);
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d0f7      	beq.n	80007a2 <spi_lld_serve_rx_interrupt+0x82>
 80007b2:	4798      	blx	r3
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 80007b4:	2d00      	cmp	r5, #0
 80007b6:	d0f4      	beq.n	80007a2 <spi_lld_serve_rx_interrupt+0x82>
      _spi_isr_full_code(spip);
 80007b8:	6863      	ldr	r3, [r4, #4]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d0f0      	beq.n	80007a2 <spi_lld_serve_rx_interrupt+0x82>
 80007c0:	2204      	movs	r2, #4
 80007c2:	4620      	mov	r0, r4
 80007c4:	7022      	strb	r2, [r4, #0]
 80007c6:	4798      	blx	r3
 80007c8:	7823      	ldrb	r3, [r4, #0]
 80007ca:	2b04      	cmp	r3, #4
 80007cc:	d1e9      	bne.n	80007a2 <spi_lld_serve_rx_interrupt+0x82>
 80007ce:	2303      	movs	r3, #3
 80007d0:	7023      	strb	r3, [r4, #0]
}
 80007d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <spi_lld_serve_rx_interrupt+0xd0>)
 80007d8:	4a06      	ldr	r2, [pc, #24]	@ (80007f4 <spi_lld_serve_rx_interrupt+0xd4>)
 80007da:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007dc:	e7fe      	b.n	80007dc <spi_lld_serve_rx_interrupt+0xbc>
    _spi_isr_code(spip);
 80007de:	2302      	movs	r3, #2
 80007e0:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80007e2:	2320      	movs	r3, #32
 80007e4:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 80007e8:	68a1      	ldr	r1, [r4, #8]
 80007ea:	2900      	cmp	r1, #0
 80007ec:	d1c6      	bne.n	800077c <spi_lld_serve_rx_interrupt+0x5c>
 80007ee:	e7d5      	b.n	800079c <spi_lld_serve_rx_interrupt+0x7c>
 80007f0:	20001428 	.word	0x20001428
 80007f4:	0800351c 	.word	0x0800351c
	...

08000800 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000800:	070b      	lsls	r3, r1, #28
 8000802:	d400      	bmi.n	8000806 <spi_lld_serve_tx_interrupt+0x6>
  }
#else
  (void)spip;
  (void)flags;
#endif
}
 8000804:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 8000806:	b672      	cpsid	i
 8000808:	4b01      	ldr	r3, [pc, #4]	@ (8000810 <spi_lld_serve_tx_interrupt+0x10>)
 800080a:	4a02      	ldr	r2, [pc, #8]	@ (8000814 <spi_lld_serve_tx_interrupt+0x14>)
 800080c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800080e:	e7fe      	b.n	800080e <spi_lld_serve_tx_interrupt+0xe>
 8000810:	20001428 	.word	0x20001428
 8000814:	0800351c 	.word	0x0800351c
	...

08000820 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000820:	4a02      	ldr	r2, [pc, #8]	@ (800082c <notify1+0xc>)
 8000822:	68d3      	ldr	r3, [r2, #12]
 8000824:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000828:	60d3      	str	r3, [r2, #12]
}
 800082a:	4770      	bx	lr
 800082c:	40013800 	.word	0x40013800

08000830 <_idle_thread>:
  while (true) {
 8000830:	e7fe      	b.n	8000830 <_idle_thread>
 8000832:	bf00      	nop
	...

08000840 <wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000840:	2320      	movs	r3, #32
 8000842:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8000846:	f890 3020 	ldrb.w	r3, [r0, #32]
 800084a:	2b07      	cmp	r3, #7
 800084c:	d80d      	bhi.n	800086a <wakeup+0x2a>
 800084e:	e8df f003 	tbb	[pc, r3]
 8000852:	0c27      	.short	0x0c27
 8000854:	0408230c 	.word	0x0408230c
 8000858:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 800085a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800085c:	6893      	ldr	r3, [r2, #8]
 800085e:	3301      	adds	r3, #1
 8000860:	6093      	str	r3, [r2, #8]
  p->prev->next = p->next;
 8000862:	e9d0 3200 	ldrd	r3, r2, [r0]
 8000866:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 8000868:	605a      	str	r2, [r3, #4]
static void wakeup(void *p) {
 800086a:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 800086c:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 800086e:	f04f 34ff 	mov.w	r4, #4294967295
  } while (pqp->prio >= p->prio);
 8000872:	6881      	ldr	r1, [r0, #8]
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <wakeup+0x68>)
 8000876:	6244      	str	r4, [r0, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8000878:	f880 2020 	strb.w	r2, [r0, #32]
    pqp = pqp->next;
 800087c:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 800087e:	689a      	ldr	r2, [r3, #8]
 8000880:	428a      	cmp	r2, r1
 8000882:	d2fb      	bcs.n	800087c <wakeup+0x3c>
  p->prev       = pqp->prev;
 8000884:	685a      	ldr	r2, [r3, #4]
 8000886:	2100      	movs	r1, #0
 8000888:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800088c:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 800088e:	6058      	str	r0, [r3, #4]
 8000890:	f381 8811 	msr	BASEPRI, r1
}
 8000894:	bc10      	pop	{r4}
 8000896:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8000898:	2200      	movs	r2, #0
 800089a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800089c:	601a      	str	r2, [r3, #0]
    break;
 800089e:	e7e4      	b.n	800086a <wakeup+0x2a>
 80008a0:	2300      	movs	r3, #0
 80008a2:	f383 8811 	msr	BASEPRI, r3
    return;
 80008a6:	4770      	bx	lr
 80008a8:	20001428 	.word	0x20001428
 80008ac:	00000000 	.word	0x00000000

080008b0 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80008b0:	4b01      	ldr	r3, [pc, #4]	@ (80008b8 <chTMStartMeasurementX+0x8>)
 80008b2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80008b4:	6083      	str	r3, [r0, #8]
}
 80008b6:	4770      	bx	lr
 80008b8:	e0001000 	.word	0xe0001000
 80008bc:	00000000 	.word	0x00000000

080008c0 <chTMStopMeasurementX>:
 80008c0:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80008c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000900 <chTMStopMeasurementX+0x40>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
  tmp->last = (now - tmp->last) - offset;
 80008c8:	6881      	ldr	r1, [r0, #8]
 80008ca:	1a9b      	subs	r3, r3, r2
 80008cc:	1a5b      	subs	r3, r3, r1
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80008ce:	b410      	push	{r4}
  tmp->n++;
 80008d0:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 80008d4:	18d2      	adds	r2, r2, r3
 80008d6:	6941      	ldr	r1, [r0, #20]
 80008d8:	6102      	str	r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 80008da:	6842      	ldr	r2, [r0, #4]
  tmp->cumulative += (rttime_t)tmp->last;
 80008dc:	f141 0100 	adc.w	r1, r1, #0
  if (tmp->last > tmp->worst) {
 80008e0:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 80008e2:	6802      	ldr	r2, [r0, #0]
  tmp->n++;
 80008e4:	f104 0401 	add.w	r4, r4, #1
    tmp->worst = tmp->last;
 80008e8:	bf88      	it	hi
 80008ea:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 80008ec:	4293      	cmp	r3, r2
  tmp->last = (now - tmp->last) - offset;
 80008ee:	e9c0 3402 	strd	r3, r4, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80008f2:	6141      	str	r1, [r0, #20]
}
 80008f4:	bc10      	pop	{r4}
    tmp->best = tmp->last;
 80008f6:	bf38      	it	cc
 80008f8:	6003      	strcc	r3, [r0, #0]
}
 80008fa:	4770      	bx	lr
 80008fc:	e0001000 	.word	0xe0001000
 8000900:	20001428 	.word	0x20001428
	...

08000910 <chEvtBroadcastFlagsI>:
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000910:	6803      	ldr	r3, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000912:	4298      	cmp	r0, r3
 8000914:	d03c      	beq.n	8000990 <chEvtBroadcastFlagsI+0x80>
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000916:	b4f0      	push	{r4, r5, r6, r7}
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8000918:	2600      	movs	r6, #0
 800091a:	e00d      	b.n	8000938 <chEvtBroadcastFlagsI+0x28>
  tp->epending |= events;
 800091c:	e9d3 4201 	ldrd	r4, r2, [r3, #4]
 8000920:	6b67      	ldr	r7, [r4, #52]	@ 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000922:	f894 5020 	ldrb.w	r5, [r4, #32]
  tp->epending |= events;
 8000926:	433a      	orrs	r2, r7
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000928:	2d0a      	cmp	r5, #10
  tp->epending |= events;
 800092a:	6362      	str	r2, [r4, #52]	@ 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800092c:	d016      	beq.n	800095c <chEvtBroadcastFlagsI+0x4c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800092e:	2d0b      	cmp	r5, #11
 8000930:	d02a      	beq.n	8000988 <chEvtBroadcastFlagsI+0x78>
    elp = elp->next;
 8000932:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8000934:	4298      	cmp	r0, r3
 8000936:	d025      	beq.n	8000984 <chEvtBroadcastFlagsI+0x74>
    elp->flags |= flags;
 8000938:	68da      	ldr	r2, [r3, #12]
 800093a:	430a      	orrs	r2, r1
 800093c:	60da      	str	r2, [r3, #12]
    if ((flags == (eventflags_t)0) ||
 800093e:	2900      	cmp	r1, #0
 8000940:	d0ec      	beq.n	800091c <chEvtBroadcastFlagsI+0xc>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8000942:	691a      	ldr	r2, [r3, #16]
    if ((flags == (eventflags_t)0) ||
 8000944:	4211      	tst	r1, r2
 8000946:	d1e9      	bne.n	800091c <chEvtBroadcastFlagsI+0xc>
    elp = elp->next;
 8000948:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 800094a:	4298      	cmp	r0, r3
 800094c:	d01a      	beq.n	8000984 <chEvtBroadcastFlagsI+0x74>
    elp->flags |= flags;
 800094e:	68da      	ldr	r2, [r3, #12]
 8000950:	430a      	orrs	r2, r1
 8000952:	60da      	str	r2, [r3, #12]
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8000954:	691a      	ldr	r2, [r3, #16]
    if ((flags == (eventflags_t)0) ||
 8000956:	4211      	tst	r1, r2
 8000958:	d1e0      	bne.n	800091c <chEvtBroadcastFlagsI+0xc>
 800095a:	e7f5      	b.n	8000948 <chEvtBroadcastFlagsI+0x38>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800095c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 800095e:	422a      	tst	r2, r5
 8000960:	d0e7      	beq.n	8000932 <chEvtBroadcastFlagsI+0x22>
  } while (pqp->prio >= p->prio);
 8000962:	68a5      	ldr	r5, [r4, #8]
 8000964:	4a0b      	ldr	r2, [pc, #44]	@ (8000994 <chEvtBroadcastFlagsI+0x84>)
    tp->u.rdymsg = MSG_OK;
 8000966:	6266      	str	r6, [r4, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8000968:	f884 6020 	strb.w	r6, [r4, #32]
    pqp = pqp->next;
 800096c:	6812      	ldr	r2, [r2, #0]
  } while (pqp->prio >= p->prio);
 800096e:	6897      	ldr	r7, [r2, #8]
 8000970:	42af      	cmp	r7, r5
 8000972:	d2fb      	bcs.n	800096c <chEvtBroadcastFlagsI+0x5c>
    elp = elp->next;
 8000974:	681b      	ldr	r3, [r3, #0]
  p->prev       = pqp->prev;
 8000976:	6855      	ldr	r5, [r2, #4]
  while (elp != (event_listener_t *)esp) {
 8000978:	4298      	cmp	r0, r3
 800097a:	e9c4 2500 	strd	r2, r5, [r4]
  p->prev->next = p;
 800097e:	602c      	str	r4, [r5, #0]
  pqp->prev     = p;
 8000980:	6054      	str	r4, [r2, #4]
 8000982:	d1d9      	bne.n	8000938 <chEvtBroadcastFlagsI+0x28>
}
 8000984:	bcf0      	pop	{r4, r5, r6, r7}
 8000986:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000988:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 800098a:	4395      	bics	r5, r2
 800098c:	d1d1      	bne.n	8000932 <chEvtBroadcastFlagsI+0x22>
 800098e:	e7e8      	b.n	8000962 <chEvtBroadcastFlagsI+0x52>
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20001428 	.word	0x20001428
	...

080009a0 <chCoreAllocFromTop>:
 80009a0:	2320      	movs	r3, #32
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80009a2:	b410      	push	{r4}
 80009a4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80009a8:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <chCoreAllocFromTop+0x38>)
 80009aa:	4249      	negs	r1, r1
 80009ac:	685c      	ldr	r4, [r3, #4]
 80009ae:	1a20      	subs	r0, r4, r0
 80009b0:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80009b2:	6819      	ldr	r1, [r3, #0]
  prev = p - offset;
 80009b4:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80009b6:	428a      	cmp	r2, r1
 80009b8:	d307      	bcc.n	80009ca <chCoreAllocFromTop+0x2a>
 80009ba:	4294      	cmp	r4, r2
 80009bc:	d305      	bcc.n	80009ca <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	2300      	movs	r3, #0
 80009c2:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 80009c6:	bc10      	pop	{r4}
 80009c8:	4770      	bx	lr
    return NULL;
 80009ca:	2000      	movs	r0, #0
 80009cc:	2300      	movs	r3, #0
 80009ce:	f383 8811 	msr	BASEPRI, r3
}
 80009d2:	bc10      	pop	{r4}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20001238 	.word	0x20001238
 80009dc:	00000000 	.word	0x00000000

080009e0 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <chCoreAllocAlignedI+0x1c>)
 80009e2:	4249      	negs	r1, r1
 80009e4:	685a      	ldr	r2, [r3, #4]
 80009e6:	1a10      	subs	r0, r2, r0
 80009e8:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80009ea:	6819      	ldr	r1, [r3, #0]
 80009ec:	4288      	cmp	r0, r1
 80009ee:	d303      	bcc.n	80009f8 <chCoreAllocAlignedI+0x18>
 80009f0:	4282      	cmp	r2, r0
 80009f2:	d301      	bcc.n	80009f8 <chCoreAllocAlignedI+0x18>
  ch_memcore.topmem = prev;
 80009f4:	6058      	str	r0, [r3, #4]
  return p;
 80009f6:	4770      	bx	lr
    return NULL;
 80009f8:	2000      	movs	r0, #0
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 80009fa:	4770      	bx	lr
 80009fc:	20001238 	.word	0x20001238

08000a00 <spi_lld_start.constprop.0>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {
 8000a00:	b570      	push	{r4, r5, r6, lr}
      rccEnableSPI6(true);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8000a02:	4c25      	ldr	r4, [pc, #148]	@ (8000a98 <spi_lld_start.constprop.0+0x98>)
  if (spip->state == SPI_STOP) {
 8000a04:	7823      	ldrb	r3, [r4, #0]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8000a06:	69e5      	ldr	r5, [r4, #28]
  if (spip->state == SPI_STOP) {
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d11a      	bne.n	8000a42 <spi_lld_start.constprop.0+0x42>
 8000a0c:	4623      	mov	r3, r4
 8000a0e:	210a      	movs	r1, #10
 8000a10:	4a22      	ldr	r2, [pc, #136]	@ (8000a9c <spi_lld_start.constprop.0+0x9c>)
 8000a12:	2003      	movs	r0, #3
 8000a14:	f7ff fdf4 	bl	8000600 <dmaStreamAllocI.part.0>
 8000a18:	4606      	mov	r6, r0
 8000a1a:	210a      	movs	r1, #10
 8000a1c:	4623      	mov	r3, r4
 8000a1e:	4a20      	ldr	r2, [pc, #128]	@ (8000aa0 <spi_lld_start.constprop.0+0xa0>)
 8000a20:	2004      	movs	r0, #4
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI2_RX_DMA_STREAM,
 8000a22:	6226      	str	r6, [r4, #32]
 8000a24:	f7ff fdec 	bl	8000600 <dmaStreamAllocI.part.0>
      rccEnableSPI2(true);
 8000a28:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa4 <spi_lld_start.constprop.0+0xa4>)
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8000a2a:	6871      	ldr	r1, [r6, #4]
      rccEnableSPI2(true);
 8000a2c:	69da      	ldr	r2, [r3, #28]
 8000a2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000a32:	61da      	str	r2, [r3, #28]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8000a34:	6842      	ldr	r2, [r0, #4]
      rccEnableSPI2(true);
 8000a36:	69db      	ldr	r3, [r3, #28]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8000a38:	f105 030c 	add.w	r3, r5, #12
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI2_TX_DMA_STREAM,
 8000a3c:	6260      	str	r0, [r4, #36]	@ 0x24
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8000a3e:	608b      	str	r3, [r1, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8000a40:	6093      	str	r3, [r2, #8]
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8000a42:	6860      	ldr	r0, [r4, #4]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8000a44:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8000a48:	8a01      	ldrh	r1, [r0, #16]
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8000a4a:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8000a4e:	050e      	lsls	r6, r1, #20
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  if (spip->config->circular) {
 8000a50:	7806      	ldrb	r6, [r0, #0]
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8000a52:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8000a56:	bf44      	itt	mi
 8000a58:	f442 62a0 	orrmi.w	r2, r2, #1280	@ 0x500
 8000a5c:	f443 63a0 	orrmi.w	r3, r3, #1280	@ 0x500
  if (spip->config->circular) {
 8000a60:	b1ae      	cbz	r6, 8000a8e <spi_lld_start.constprop.0+0x8e>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8000a62:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 8000a66:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 8000a6a:	e9c4 230a 	strd	r2, r3, [r4, #40]	@ 0x28

  /* SPI setup and enable.*/
  spip->spi->CR1 &= ~SPI_CR1_SPE;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8000a6e:	8a43      	ldrh	r3, [r0, #18]
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8000a70:	682a      	ldr	r2, [r5, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8000a72:	f043 0307 	orr.w	r3, r3, #7
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8000a76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8000a7a:	f441 7141 	orr.w	r1, r1, #772	@ 0x304
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8000a7e:	602a      	str	r2, [r5, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8000a80:	6029      	str	r1, [r5, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8000a82:	606b      	str	r3, [r5, #4]
                    SPI_CR2_TXDMAEN;
  spip->spi->CR1 |= SPI_CR1_SPE;
 8000a84:	682b      	ldr	r3, [r5, #0]
 8000a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a8a:	602b      	str	r3, [r5, #0]
}
 8000a8c:	bd70      	pop	{r4, r5, r6, pc}
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8000a8e:	f022 0224 	bic.w	r2, r2, #36	@ 0x24
 8000a92:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000a96:	e7e8      	b.n	8000a6a <spi_lld_start.constprop.0+0x6a>
 8000a98:	20000ce8 	.word	0x20000ce8
 8000a9c:	08000721 	.word	0x08000721
 8000aa0:	08000801 	.word	0x08000801
 8000aa4:	40021000 	.word	0x40021000
	...

08000ab0 <can_lld_set_filters.constprop.0>:
#endif

  /* Temporarily enabling CAN clock.*/
#if STM32_CAN_USE_CAN1
  if (canp == &CAND1) {
    rccEnableCAN1(true);
 8000ab0:	4b3a      	ldr	r3, [pc, #232]	@ (8000b9c <can_lld_set_filters.constprop.0+0xec>)
static void can_lld_set_filters(CANDriver* canp,
 8000ab2:	b430      	push	{r4, r5}
    rccEnableCAN1(true);
 8000ab4:	69dc      	ldr	r4, [r3, #28]
    /* Filters initialization.*/
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8000ab6:	4d3a      	ldr	r5, [pc, #232]	@ (8000ba0 <can_lld_set_filters.constprop.0+0xf0>)
    rccEnableCAN1(true);
 8000ab8:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8000abc:	61dc      	str	r4, [r3, #28]
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8000abe:	4c39      	ldr	r4, [pc, #228]	@ (8000ba4 <can_lld_set_filters.constprop.0+0xf4>)
    rccEnableCAN1(true);
 8000ac0:	69db      	ldr	r3, [r3, #28]
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8000ac2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
static void can_lld_set_filters(CANDriver* canp,
 8000ac4:	4694      	mov	ip, r2
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8000ac6:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 8000aca:	402c      	ands	r4, r5
 8000acc:	f044 0401 	orr.w	r4, r4, #1
 8000ad0:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 8000ad4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000ad8:	402a      	ands	r2, r5
 8000ada:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000ade:	f042 0201 	orr.w	r2, r2, #1
 8000ae2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    /* Filters initialization.*/
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
  }
#endif

  if (num > 0) {
 8000ae6:	2900      	cmp	r1, #0
 8000ae8:	d03d      	beq.n	8000b66 <can_lld_set_filters.constprop.0+0xb6>
    uint32_t i, fmask;

    /* All filters cleared.*/
    canp->can->FA1R = 0;
 8000aea:	2100      	movs	r1, #0
    canp->can->FS1R = 0;
    canp->can->FFA1R = 0;

#if STM32_CAN_USE_CAN1
    if (canp == &CAND1) {
      for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 8000aec:	460a      	mov	r2, r1
        canp->can->sFilterRegister[i].FR1 = 0;
 8000aee:	4608      	mov	r0, r1
    canp->can->FA1R = 0;
 8000af0:	f8c3 121c 	str.w	r1, [r3, #540]	@ 0x21c
    canp->can->FM1R = 0;
 8000af4:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
    canp->can->FS1R = 0;
 8000af8:	f8c3 120c 	str.w	r1, [r3, #524]	@ 0x20c
    canp->can->FFA1R = 0;
 8000afc:	f8c3 1214 	str.w	r1, [r3, #532]	@ 0x214
 8000b00:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
      for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 8000b04:	3201      	adds	r2, #1
 8000b06:	2a0e      	cmp	r2, #14
        canp->can->sFilterRegister[i].FR1 = 0;
 8000b08:	f8c1 0240 	str.w	r0, [r1, #576]	@ 0x240
        canp->can->sFilterRegister[i].FR2 = 0;
 8000b0c:	f8c1 0244 	str.w	r0, [r1, #580]	@ 0x244
      for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 8000b10:	d1f6      	bne.n	8000b00 <can_lld_set_filters.constprop.0+0x50>
    }
#endif

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
      fmask = 1 << cfp->filter;
 8000b12:	2101      	movs	r1, #1
      if (cfp->mode)
 8000b14:	f89c 0002 	ldrb.w	r0, [ip, #2]
      fmask = 1 << cfp->filter;
 8000b18:	f8bc 2000 	ldrh.w	r2, [ip]
      if (cfp->mode)
 8000b1c:	07c5      	lsls	r5, r0, #31
      fmask = 1 << cfp->filter;
 8000b1e:	fa01 f102 	lsl.w	r1, r1, r2
      if (cfp->mode)
 8000b22:	d504      	bpl.n	8000b2e <can_lld_set_filters.constprop.0+0x7e>
        canp->can->FM1R |= fmask;
 8000b24:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 8000b28:	430c      	orrs	r4, r1
 8000b2a:	f8c3 4204 	str.w	r4, [r3, #516]	@ 0x204
      if (cfp->scale)
 8000b2e:	0784      	lsls	r4, r0, #30
 8000b30:	d504      	bpl.n	8000b3c <can_lld_set_filters.constprop.0+0x8c>
        canp->can->FS1R |= fmask;
 8000b32:	f8d3 420c 	ldr.w	r4, [r3, #524]	@ 0x20c
 8000b36:	430c      	orrs	r4, r1
 8000b38:	f8c3 420c 	str.w	r4, [r3, #524]	@ 0x20c
      if (cfp->assignment)
 8000b3c:	0740      	lsls	r0, r0, #29
 8000b3e:	d504      	bpl.n	8000b4a <can_lld_set_filters.constprop.0+0x9a>
        canp->can->FFA1R |= fmask;
 8000b40:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 8000b44:	4308      	orrs	r0, r1
 8000b46:	f8c3 0214 	str.w	r0, [r3, #532]	@ 0x214
 8000b4a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
      canp->can->sFilterRegister[cfp->filter].FR1 = cfp->register1;
      canp->can->sFilterRegister[cfp->filter].FR2 = cfp->register2;
 8000b4e:	e9dc 4001 	ldrd	r4, r0, [ip, #4]
      canp->can->sFilterRegister[cfp->filter].FR1 = cfp->register1;
 8000b52:	f8c2 4240 	str.w	r4, [r2, #576]	@ 0x240
      canp->can->sFilterRegister[cfp->filter].FR2 = cfp->register2;
 8000b56:	f8c2 0244 	str.w	r0, [r2, #580]	@ 0x244
      canp->can->FA1R |= fmask;
 8000b5a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000b5e:	4311      	orrs	r1, r2
 8000b60:	f8c3 121c 	str.w	r1, [r3, #540]	@ 0x21c
 8000b64:	e00c      	b.n	8000b80 <can_lld_set_filters.constprop.0+0xd0>
      canp->can->sFilterRegister[can2sb].FR2 = 0;
    }
#endif
    canp->can->FM1R = 0;
    canp->can->FFA1R = 0;
    canp->can->FS1R = 1;
 8000b66:	2201      	movs	r2, #1
    canp->can->sFilterRegister[0].FR1 = 0;
 8000b68:	f8c3 1240 	str.w	r1, [r3, #576]	@ 0x240
    canp->can->sFilterRegister[0].FR2 = 0;
 8000b6c:	f8c3 1244 	str.w	r1, [r3, #580]	@ 0x244
    canp->can->FM1R = 0;
 8000b70:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
    canp->can->FFA1R = 0;
 8000b74:	f8c3 1214 	str.w	r1, [r3, #532]	@ 0x214
    canp->can->FS1R = 1;
 8000b78:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
    canp->can->FA1R = 1;
 8000b7c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
      canp->can->FS1R |= 1 << can2sb;
      canp->can->FA1R |= 1 << can2sb;
    }
#endif
  }
  canp->can->FMR &= ~CAN_FMR_FINIT;
 8000b80:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  /* Temporarily enabling CAN clock.*/
#if STM32_CAN_USE_CAN1
  if (canp == &CAND1) {
    rccDisableCAN1();
 8000b84:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <can_lld_set_filters.constprop.0+0xec>)
  canp->can->FMR &= ~CAN_FMR_FINIT;
 8000b86:	f021 0101 	bic.w	r1, r1, #1
 8000b8a:	f8c3 1200 	str.w	r1, [r3, #512]	@ 0x200
    rccDisableCAN1();
 8000b8e:	69d3      	ldr	r3, [r2, #28]
#if STM32_CAN_USE_CAN3
  if (canp == &CAND3) {
    rccDisableCAN3();
  }
#endif
}
 8000b90:	bc30      	pop	{r4, r5}
    rccDisableCAN1();
 8000b92:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000b96:	61d3      	str	r3, [r2, #28]
 8000b98:	69d3      	ldr	r3, [r2, #28]
}
 8000b9a:	4770      	bx	lr
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	ffff0000 	.word	0xffff0000
 8000ba4:	200012fc 	.word	0x200012fc
	...

08000bb0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bb4:	460e      	mov	r6, r1
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8000bb6:	4d79      	ldr	r5, [pc, #484]	@ (8000d9c <chSchGoSleepTimeoutS+0x1ec>)
  if (TIME_INFINITE != timeout) {
 8000bb8:	1c73      	adds	r3, r6, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000bba:	4680      	mov	r8, r0
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8000bbc:	69a9      	ldr	r1, [r5, #24]
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000bbe:	b086      	sub	sp, #24
  if (TIME_INFINITE != timeout) {
 8000bc0:	d04a      	beq.n	8000c58 <chSchGoSleepTimeoutS+0xa8>
 *
 * @notapi
 */
static inline bool vt_is_empty(delta_list_t *dlhp) {

  return (bool)(dlhp == dlhp->next);
 8000bc2:	462f      	mov	r7, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000bc4:	f04f 4e80 	mov.w	lr, #1073741824	@ 0x40000000
 8000bc8:	f857 2f1c 	ldr.w	r2, [r7, #28]!
  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  /* Timer initialization.*/
  vtp->par     = par;
  vtp->func    = vtfunc;
 8000bcc:	4b74      	ldr	r3, [pc, #464]	@ (8000da0 <chSchGoSleepTimeoutS+0x1f0>)
 8000bce:	f8de 0024 	ldr.w	r0, [lr, #36]	@ 0x24
    if (vt_is_empty(&vtlp->dlist)) {
 8000bd2:	42ba      	cmp	r2, r7
  vtp->func    = vtfunc;
 8000bd4:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8000bd8:	b280      	uxth	r0, r0
    if (vt_is_empty(&vtlp->dlist)) {
 8000bda:	f000 80a7 	beq.w	8000d2c <chSchGoSleepTimeoutS+0x17c>
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8000bde:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
    if (delta < vtlp->dlist.next->delta) {
 8000be0:	6894      	ldr	r4, [r2, #8]
 8000be2:	1ac3      	subs	r3, r0, r3
 8000be4:	b29b      	uxth	r3, r3
      delta = delay;
 8000be6:	18f3      	adds	r3, r6, r3
 8000be8:	bf28      	it	cs
 8000bea:	4633      	movcs	r3, r6
    if (delta < vtlp->dlist.next->delta) {
 8000bec:	429c      	cmp	r4, r3
 8000bee:	d844      	bhi.n	8000c7a <chSchGoSleepTimeoutS+0xca>
  while (dlp->delta < delta) {
 8000bf0:	d204      	bcs.n	8000bfc <chSchGoSleepTimeoutS+0x4c>
    dlp = dlp->next;
 8000bf2:	6812      	ldr	r2, [r2, #0]
    delta -= dlp->delta;
 8000bf4:	1b1b      	subs	r3, r3, r4
  while (dlp->delta < delta) {
 8000bf6:	6894      	ldr	r4, [r2, #8]
 8000bf8:	429c      	cmp	r4, r3
 8000bfa:	d3fa      	bcc.n	8000bf2 <chSchGoSleepTimeoutS+0x42>
  dlp->prev->next = dlp;
 8000bfc:	466c      	mov	r4, sp
  dlhp->delta = (sysinterval_t)-1;
 8000bfe:	f04f 36ff 	mov.w	r6, #4294967295
  dlp->delta      = delta;
 8000c02:	9302      	str	r3, [sp, #8]
  dlp->delta -= delta;
 8000c04:	6890      	ldr	r0, [r2, #8]
  dlp->next       = dlhp;
 8000c06:	9200      	str	r2, [sp, #0]
  dlp->delta -= delta;
 8000c08:	1ac0      	subs	r0, r0, r3
  dlp->prev       = dlp->next->prev;
 8000c0a:	6853      	ldr	r3, [r2, #4]
 8000c0c:	9301      	str	r3, [sp, #4]
  dlp->prev->next = dlp;
 8000c0e:	601c      	str	r4, [r3, #0]
  dlhp->prev      = dlp;
 8000c10:	e9c2 4001 	strd	r4, r0, [r2, #4]
  dlhp->delta = (sysinterval_t)-1;
 8000c14:	626e      	str	r6, [r5, #36]	@ 0x24
  currp->state = CH_STATE_CURRENT;
 8000c16:	2201      	movs	r2, #1
  ch_priority_queue_t *p = pqp->next;
 8000c18:	6828      	ldr	r0, [r5, #0]
  otp->state = newstate;
 8000c1a:	f881 8020 	strb.w	r8, [r1, #32]
  pqp->next       = p->next;
 8000c1e:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8000c20:	605d      	str	r5, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8000c22:	f880 2020 	strb.w	r2, [r0, #32]
  pqp->next       = p->next;
 8000c26:	602b      	str	r3, [r5, #0]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 8000c28:	61a8      	str	r0, [r5, #24]
  chSysSwitch(currp, otp);
 8000c2a:	f7ff fb11 	bl	8000250 <_port_switch>
    if (chVTIsArmedI(&vt)) {
 8000c2e:	9b03      	ldr	r3, [sp, #12]
 8000c30:	b16b      	cbz	r3, 8000c4e <chSchGoSleepTimeoutS+0x9e>
  systime_t now;
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!vt_is_first(&vtlp->dlist, &vtp->dlist)) {
 8000c32:	69eb      	ldr	r3, [r5, #28]
  dlp->prev->next = dlp->next;
 8000c34:	9a00      	ldr	r2, [sp, #0]
  if (!vt_is_first(&vtlp->dlist, &vtp->dlist)) {
 8000c36:	42a3      	cmp	r3, r4
 8000c38:	d046      	beq.n	8000cc8 <chSchGoSleepTimeoutS+0x118>
  dlp->prev->next = dlp->next;
 8000c3a:	e9dd 1401 	ldrd	r1, r4, [sp, #4]
    vtp->dlist.next->delta += vtp->dlist.delta;

    /* Special case when the removed element from the last position in the list,
       the value in the header must be restored, just doing it is faster than
       checking then doing.*/
    vtlp->dlist.delta = (sysinterval_t)-1;
 8000c3e:	f04f 30ff 	mov.w	r0, #4294967295
    vtp->dlist.next->delta += vtp->dlist.delta;
 8000c42:	6893      	ldr	r3, [r2, #8]
  dlp->prev->next = dlp->next;
 8000c44:	600a      	str	r2, [r1, #0]
    vtp->dlist.next->delta += vtp->dlist.delta;
 8000c46:	4423      	add	r3, r4
 8000c48:	e9c2 1301 	strd	r1, r3, [r2, #4]
    vtlp->dlist.delta = (sysinterval_t)-1;
 8000c4c:	6268      	str	r0, [r5, #36]	@ 0x24
  return currp->u.rdymsg;
 8000c4e:	69ab      	ldr	r3, [r5, #24]
}
 8000c50:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000c52:	b006      	add	sp, #24
 8000c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  currp->state = CH_STATE_CURRENT;
 8000c58:	2201      	movs	r2, #1
  ch_priority_queue_t *p = pqp->next;
 8000c5a:	6828      	ldr	r0, [r5, #0]
  otp->state = newstate;
 8000c5c:	f881 8020 	strb.w	r8, [r1, #32]
  pqp->next       = p->next;
 8000c60:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8000c62:	605d      	str	r5, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8000c64:	f880 2020 	strb.w	r2, [r0, #32]
  pqp->next       = p->next;
 8000c68:	602b      	str	r3, [r5, #0]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 8000c6a:	61a8      	str	r0, [r5, #24]
  chSysSwitch(currp, otp);
 8000c6c:	f7ff faf0 	bl	8000250 <_port_switch>
  return currp->u.rdymsg;
 8000c70:	69ab      	ldr	r3, [r5, #24]
}
 8000c72:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000c74:	b006      	add	sp, #24
 8000c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (delay > (sysinterval_t)TIME_MAX_SYSTIME) {
 8000c7a:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8000c7e:	42b4      	cmp	r4, r6
 8000c80:	bf28      	it	cs
 8000c82:	4634      	movcs	r4, r6
 8000c84:	2c02      	cmp	r4, #2
 8000c86:	bf38      	it	cc
 8000c88:	2402      	movcc	r4, #2
  return systime + (systime_t)interval;
 8000c8a:	1906      	adds	r6, r0, r4
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000c8c:	b2b6      	uxth	r6, r6
 8000c8e:	f8ce 6034 	str.w	r6, [lr, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8000c92:	f8de 6024 	ldr.w	r6, [lr, #36]	@ 0x24
 8000c96:	fa1f fc86 	uxth.w	ip, r6
  return (sysinterval_t)((systime_t)(end - start));
 8000c9a:	ebac 0000 	sub.w	r0, ip, r0
 8000c9e:	b280      	uxth	r0, r0
    if (nowdelta < delay) {
 8000ca0:	4284      	cmp	r4, r0
 8000ca2:	d8ab      	bhi.n	8000bfc <chSchGoSleepTimeoutS+0x4c>
 8000ca4:	2602      	movs	r6, #2
    currdelta += (sysinterval_t)1;
 8000ca6:	4664      	mov	r4, ip
 8000ca8:	3601      	adds	r6, #1
  return systime + (systime_t)interval;
 8000caa:	44b4      	add	ip, r6
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000cac:	fa1f f08c 	uxth.w	r0, ip
 8000cb0:	f8ce 0034 	str.w	r0, [lr, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8000cb4:	f8de 0024 	ldr.w	r0, [lr, #36]	@ 0x24
 8000cb8:	fa1f fc80 	uxth.w	ip, r0
  return (sysinterval_t)((systime_t)(end - start));
 8000cbc:	ebac 0404 	sub.w	r4, ip, r4
 8000cc0:	b2a4      	uxth	r4, r4
    if (nowdelta < delay) {
 8000cc2:	42b4      	cmp	r4, r6
 8000cc4:	d2ef      	bcs.n	8000ca6 <chSchGoSleepTimeoutS+0xf6>
 8000cc6:	e799      	b.n	8000bfc <chSchGoSleepTimeoutS+0x4c>
    return;
  }

  /* Removing the first timer from the list, marking it as not armed.*/
  vt_remove_first(&vtlp->dlist);
  vtp->func = NULL;
 8000cc8:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (vt_is_empty(&vtlp->dlist)) {
 8000cca:	42ba      	cmp	r2, r7
  dlhp->next       = dlp->next;
 8000ccc:	61ea      	str	r2, [r5, #28]
  dlhp->next->prev = dlhp;
 8000cce:	6057      	str	r7, [r2, #4]
  vtp->func = NULL;
 8000cd0:	9303      	str	r3, [sp, #12]
  if (vt_is_empty(&vtlp->dlist)) {
 8000cd2:	d05e      	beq.n	8000d92 <chSchGoSleepTimeoutS+0x1e2>
 8000cd4:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  vtlp->dlist.next->delta += vtp->dlist.delta;
 8000cd8:	6893      	ldr	r3, [r2, #8]
 8000cda:	9902      	ldr	r1, [sp, #8]
 8000cdc:	440b      	add	r3, r1
 8000cde:	6093      	str	r3, [r2, #8]
 8000ce0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000ce2:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8000ce4:	b289      	uxth	r1, r1
 8000ce6:	1a8a      	subs	r2, r1, r2
 8000ce8:	b292      	uxth	r2, r2
  now = chVTGetSystemTimeX();
  nowdelta = chTimeDiffX(vtlp->lasttime, now);

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= vtlp->dlist.next->delta) {
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d9af      	bls.n	8000c4e <chSchGoSleepTimeoutS+0x9e>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = vtlp->dlist.next->delta - nowdelta;
 8000cee:	1a9a      	subs	r2, r3, r2
  else if (delay > (sysinterval_t)TIME_MAX_SYSTIME) {
 8000cf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	bf28      	it	cs
 8000cf8:	461a      	movcs	r2, r3
 8000cfa:	2a02      	cmp	r2, #2
 8000cfc:	bf38      	it	cc
 8000cfe:	2202      	movcc	r2, #2
  return systime + (systime_t)interval;
 8000d00:	188b      	adds	r3, r1, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	6363      	str	r3, [r4, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8000d06:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000d08:	b29b      	uxth	r3, r3
  return (sysinterval_t)((systime_t)(end - start));
 8000d0a:	1a59      	subs	r1, r3, r1
 8000d0c:	b289      	uxth	r1, r1
    if (nowdelta < delay) {
 8000d0e:	4291      	cmp	r1, r2
 8000d10:	d39d      	bcc.n	8000c4e <chSchGoSleepTimeoutS+0x9e>
 8000d12:	2102      	movs	r1, #2
    currdelta += (sysinterval_t)1;
 8000d14:	461a      	mov	r2, r3
 8000d16:	3101      	adds	r1, #1
  return systime + (systime_t)interval;
 8000d18:	1858      	adds	r0, r3, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000d1a:	b280      	uxth	r0, r0
 8000d1c:	6360      	str	r0, [r4, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8000d1e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000d20:	b29b      	uxth	r3, r3
  return (sysinterval_t)((systime_t)(end - start));
 8000d22:	1a9a      	subs	r2, r3, r2
 8000d24:	b292      	uxth	r2, r2
    if (nowdelta < delay) {
 8000d26:	428a      	cmp	r2, r1
 8000d28:	d2f4      	bcs.n	8000d14 <chSchGoSleepTimeoutS+0x164>
 8000d2a:	e790      	b.n	8000c4e <chSchGoSleepTimeoutS+0x9e>
  else if (delay > (sysinterval_t)TIME_MAX_SYSTIME) {
 8000d2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d30:	429e      	cmp	r6, r3
  dlp->delta      = delta;
 8000d32:	9602      	str	r6, [sp, #8]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000d34:	f04f 0202 	mov.w	r2, #2
  else if (delay > (sysinterval_t)TIME_MAX_SYSTIME) {
 8000d38:	bf28      	it	cs
 8000d3a:	461e      	movcs	r6, r3
 8000d3c:	4296      	cmp	r6, r2
 8000d3e:	bf38      	it	cc
 8000d40:	4616      	movcc	r6, r2
  STM32_ST_TIM->SR     = 0;
 8000d42:	f04f 0c00 	mov.w	ip, #0
 8000d46:	466c      	mov	r4, sp
  return systime + (systime_t)interval;
 8000d48:	1983      	adds	r3, r0, r6
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000d4a:	b29b      	uxth	r3, r3
  dlp->next       = dlp->prev->next;
 8000d4c:	e9cd 7700 	strd	r7, r7, [sp]
  dlhp->next      = dlp;
 8000d50:	e9c5 4407 	strd	r4, r4, [r5, #28]
  vtlp->lasttime = now;
 8000d54:	8528      	strh	r0, [r5, #40]	@ 0x28
 8000d56:	f8ce 3034 	str.w	r3, [lr, #52]	@ 0x34
  STM32_ST_TIM->SR     = 0;
 8000d5a:	f8ce c010 	str.w	ip, [lr, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000d5e:	f8ce 200c 	str.w	r2, [lr, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 8000d62:	f8de 3024 	ldr.w	r3, [lr, #36]	@ 0x24
 8000d66:	b29b      	uxth	r3, r3
  return (sysinterval_t)((systime_t)(end - start));
 8000d68:	eba3 0c00 	sub.w	ip, r3, r0
 8000d6c:	fa1f fc8c 	uxth.w	ip, ip
    if (chTimeDiffX(now, newnow) < delay) {
 8000d70:	4566      	cmp	r6, ip
 8000d72:	f63f af50 	bhi.w	8000c16 <chSchGoSleepTimeoutS+0x66>
    currdelta += (sysinterval_t)1;
 8000d76:	3201      	adds	r2, #1
  return systime + (systime_t)interval;
 8000d78:	1886      	adds	r6, r0, r2
 8000d7a:	4618      	mov	r0, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000d7c:	b2b6      	uxth	r6, r6
 8000d7e:	f8ce 6034 	str.w	r6, [lr, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8000d82:	f8de 3024 	ldr.w	r3, [lr, #36]	@ 0x24
 8000d86:	b29b      	uxth	r3, r3
  return (sysinterval_t)((systime_t)(end - start));
 8000d88:	1a1e      	subs	r6, r3, r0
 8000d8a:	b2b6      	uxth	r6, r6
    if (chTimeDiffX(now, newnow) < delay) {
 8000d8c:	4296      	cmp	r6, r2
 8000d8e:	d2f2      	bcs.n	8000d76 <chSchGoSleepTimeoutS+0x1c6>
 8000d90:	e741      	b.n	8000c16 <chSchGoSleepTimeoutS+0x66>
  STM32_ST_TIM->DIER = 0U;
 8000d92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d96:	60d3      	str	r3, [r2, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 8000d98:	e759      	b.n	8000c4e <chSchGoSleepTimeoutS+0x9e>
 8000d9a:	bf00      	nop
 8000d9c:	20001428 	.word	0x20001428
 8000da0:	08000841 	.word	0x08000841
	...

08000db0 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 8000db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000db4:	b085      	sub	sp, #20
 8000db6:	f04f 0920 	mov.w	r9, #32
 8000dba:	4616      	mov	r6, r2
  qnotify_t nfy = iqp->q_notify;
 8000dbc:	f8d0 801c 	ldr.w	r8, [r0, #28]
                     size_t n, sysinterval_t timeout) {
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	d032      	beq.n	8000e30 <iqReadTimeout+0x80>

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 8000dca:	4646      	mov	r6, r8
 8000dcc:	4604      	mov	r4, r0
 8000dce:	4692      	mov	sl, r2
 8000dd0:	f04f 0b00 	mov.w	fp, #0
 8000dd4:	4688      	mov	r8, r1
 8000dd6:	9203      	str	r2, [sp, #12]
  if (n > iqGetFullI(iqp)) {
 8000dd8:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8000dda:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8000ddc:	4552      	cmp	r2, sl
    n = iqGetFullI(iqp);
 8000dde:	bf28      	it	cs
 8000de0:	4655      	movcs	r5, sl
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8000de2:	6927      	ldr	r7, [r4, #16]
    n = iqGetFullI(iqp);
 8000de4:	bf38      	it	cc
 8000de6:	68a5      	ldrcc	r5, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8000de8:	1a7f      	subs	r7, r7, r1
  if (n < s1) {
 8000dea:	42af      	cmp	r7, r5
 8000dec:	d84a      	bhi.n	8000e84 <iqReadTimeout+0xd4>
  else if (n > s1) {
 8000dee:	d226      	bcs.n	8000e3e <iqReadTimeout+0x8e>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8000df0:	463a      	mov	r2, r7
 8000df2:	4640      	mov	r0, r8
 8000df4:	f7ff fa92 	bl	800031c <memcpy>
    s2 = n - s1;
 8000df8:	1bea      	subs	r2, r5, r7
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8000dfa:	68e1      	ldr	r1, [r4, #12]
 8000dfc:	eb08 0007 	add.w	r0, r8, r7
 8000e00:	9202      	str	r2, [sp, #8]
 8000e02:	f7ff fa8b 	bl	800031c <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8000e06:	9a02      	ldr	r2, [sp, #8]
 8000e08:	68e1      	ldr	r1, [r4, #12]
 8000e0a:	4411      	add	r1, r2
  iqp->q_counter -= n;
 8000e0c:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 8000e0e:	61a1      	str	r1, [r4, #24]
  iqp->q_counter -= n;
 8000e10:	1b52      	subs	r2, r2, r5
 8000e12:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 8000e14:	b10e      	cbz	r6, 8000e1a <iqReadTimeout+0x6a>
        nfy(iqp);
 8000e16:	4620      	mov	r0, r4
 8000e18:	47b0      	blx	r6
 8000e1a:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8000e1e:	ebaa 0a05 	sub.w	sl, sl, r5
      bp += done;
 8000e22:	44a8      	add	r8, r5
 8000e24:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8000e28:	f1ba 0f00 	cmp.w	sl, #0
 8000e2c:	d1d4      	bne.n	8000dd8 <iqReadTimeout+0x28>
 8000e2e:	9e03      	ldr	r6, [sp, #12]
 8000e30:	4630      	mov	r0, r6
 8000e32:	2300      	movs	r3, #0
 8000e34:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8000e38:	b005      	add	sp, #20
 8000e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8000e3e:	462a      	mov	r2, r5
 8000e40:	4640      	mov	r0, r8
 8000e42:	f7ff fa6b 	bl	800031c <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8000e46:	68e1      	ldr	r1, [r4, #12]
  iqp->q_counter -= n;
 8000e48:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr += n;
 8000e4a:	61a1      	str	r1, [r4, #24]
  iqp->q_counter -= n;
 8000e4c:	1b52      	subs	r2, r2, r5
 8000e4e:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8000e50:	2d00      	cmp	r5, #0
 8000e52:	d1df      	bne.n	8000e14 <iqReadTimeout+0x64>
  if (TIME_IMMEDIATE == timeout) {
 8000e54:	9b01      	ldr	r3, [sp, #4]
 8000e56:	b163      	cbz	r3, 8000e72 <iqReadTimeout+0xc2>
  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 8000e58:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <iqReadTimeout+0xe4>)
  p->prev       = qp->prev;
 8000e5a:	6860      	ldr	r0, [r4, #4]
 8000e5c:	699a      	ldr	r2, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000e5e:	9901      	ldr	r1, [sp, #4]
 8000e60:	e9c2 4000 	strd	r4, r0, [r2]
  p->prev->next = p;
 8000e64:	6002      	str	r2, [r0, #0]
 8000e66:	2004      	movs	r0, #4
  qp->prev      = p;
 8000e68:	6062      	str	r2, [r4, #4]
 8000e6a:	f7ff fea1 	bl	8000bb0 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	d0b2      	beq.n	8000dd8 <iqReadTimeout+0x28>
  return max - n;
 8000e72:	9e03      	ldr	r6, [sp, #12]
 8000e74:	2300      	movs	r3, #0
 8000e76:	eba6 000a 	sub.w	r0, r6, sl
 8000e7a:	f383 8811 	msr	BASEPRI, r3
}
 8000e7e:	b005      	add	sp, #20
 8000e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8000e84:	462a      	mov	r2, r5
 8000e86:	4640      	mov	r0, r8
 8000e88:	f7ff fa48 	bl	800031c <memcpy>
    iqp->q_rdptr += n;
 8000e8c:	69a1      	ldr	r1, [r4, #24]
 8000e8e:	4429      	add	r1, r5
 8000e90:	e7da      	b.n	8000e48 <iqReadTimeout+0x98>
 8000e92:	bf00      	nop
 8000e94:	20001428 	.word	0x20001428
	...

08000ea0 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea4:	300c      	adds	r0, #12
 8000ea6:	f7ff bf83 	b.w	8000db0 <iqReadTimeout>
 8000eaa:	bf00      	nop
 8000eac:	0000      	movs	r0, r0
	...

08000eb0 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8000eb0:	300c      	adds	r0, #12
 8000eb2:	f7ff bf7d 	b.w	8000db0 <iqReadTimeout>
 8000eb6:	bf00      	nop
	...

08000ec0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	2320      	movs	r3, #32
 8000ec4:	4604      	mov	r4, r0
 8000ec6:	f383 8811 	msr	BASEPRI, r3
  while (iqIsEmptyI(iqp)) {
 8000eca:	6883      	ldr	r3, [r0, #8]
 8000ecc:	b98b      	cbnz	r3, 8000ef2 <iqGetTimeout+0x32>
  if (TIME_IMMEDIATE == timeout) {
 8000ece:	460d      	mov	r5, r1
 8000ed0:	b329      	cbz	r1, 8000f1e <iqGetTimeout+0x5e>
 8000ed2:	4e16      	ldr	r6, [pc, #88]	@ (8000f2c <iqGetTimeout+0x6c>)
  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 8000ed4:	69b3      	ldr	r3, [r6, #24]
  p->prev       = qp->prev;
 8000ed6:	6862      	ldr	r2, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000ed8:	4629      	mov	r1, r5
 8000eda:	e9c3 4200 	strd	r4, r2, [r3]
 8000ede:	2004      	movs	r0, #4
  p->prev->next = p;
 8000ee0:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8000ee2:	6063      	str	r3, [r4, #4]
 8000ee4:	f7ff fe64 	bl	8000bb0 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8000ee8:	2800      	cmp	r0, #0
 8000eea:	db1a      	blt.n	8000f22 <iqGetTimeout+0x62>
  while (iqIsEmptyI(iqp)) {
 8000eec:	68a3      	ldr	r3, [r4, #8]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0f0      	beq.n	8000ed4 <iqGetTimeout+0x14>
  iqp->q_counter--;
 8000ef2:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8000ef4:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	60a3      	str	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8000efa:	6923      	ldr	r3, [r4, #16]
  b = *iqp->q_rdptr++;
 8000efc:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8000efe:	429a      	cmp	r2, r3
    iqp->q_rdptr = iqp->q_buffer;
 8000f00:	bf28      	it	cs
 8000f02:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8000f04:	61a2      	str	r2, [r4, #24]
 8000f06:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8000f08:	bf28      	it	cs
 8000f0a:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 8000f0c:	69e3      	ldr	r3, [r4, #28]
 8000f0e:	b10b      	cbz	r3, 8000f14 <iqGetTimeout+0x54>
    iqp->q_notify(iqp);
 8000f10:	4620      	mov	r0, r4
 8000f12:	4798      	blx	r3
 8000f14:	2300      	movs	r3, #0
 8000f16:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8000f1a:	4628      	mov	r0, r5
}
 8000f1c:	bd70      	pop	{r4, r5, r6, pc}
    return MSG_TIMEOUT;
 8000f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f22:	2300      	movs	r3, #0
 8000f24:	f383 8811 	msr	BASEPRI, r3
 8000f28:	bd70      	pop	{r4, r5, r6, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20001428 	.word	0x20001428

08000f30 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	300c      	adds	r0, #12
 8000f36:	f7ff bfc3 	b.w	8000ec0 <iqGetTimeout>
 8000f3a:	bf00      	nop
 8000f3c:	0000      	movs	r0, r0
	...

08000f40 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8000f40:	300c      	adds	r0, #12
 8000f42:	f7ff bfbd 	b.w	8000ec0 <iqGetTimeout>
 8000f46:	bf00      	nop
	...

08000f50 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8000f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f52:	2320      	movs	r3, #32
 8000f54:	4604      	mov	r4, r0
 8000f56:	460f      	mov	r7, r1
 8000f58:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 8000f5c:	6883      	ldr	r3, [r0, #8]
 8000f5e:	b98b      	cbnz	r3, 8000f84 <oqPutTimeout+0x34>
  if (TIME_IMMEDIATE == timeout) {
 8000f60:	4615      	mov	r5, r2
 8000f62:	b322      	cbz	r2, 8000fae <oqPutTimeout+0x5e>
 8000f64:	4e15      	ldr	r6, [pc, #84]	@ (8000fbc <oqPutTimeout+0x6c>)
  p->prev       = qp->prev;
 8000f66:	6860      	ldr	r0, [r4, #4]
  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 8000f68:	69b3      	ldr	r3, [r6, #24]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000f6a:	4629      	mov	r1, r5
 8000f6c:	e9c3 4000 	strd	r4, r0, [r3]
  p->prev->next = p;
 8000f70:	6003      	str	r3, [r0, #0]
 8000f72:	2004      	movs	r0, #4
  qp->prev      = p;
 8000f74:	6063      	str	r3, [r4, #4]
 8000f76:	f7ff fe1b 	bl	8000bb0 <chSchGoSleepTimeoutS>
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8000f7a:	2800      	cmp	r0, #0
 8000f7c:	db19      	blt.n	8000fb2 <oqPutTimeout+0x62>
  while (oqIsFullI(oqp)) {
 8000f7e:	68a3      	ldr	r3, [r4, #8]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0f0      	beq.n	8000f66 <oqPutTimeout+0x16>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8000f84:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8000f86:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000f88:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8000f8a:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8000f8c:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8000f8e:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000f90:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000f92:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8000f96:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8000f98:	bf24      	itt	cs
 8000f9a:	68e3      	ldrcs	r3, [r4, #12]
 8000f9c:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8000f9e:	69e3      	ldr	r3, [r4, #28]
 8000fa0:	b10b      	cbz	r3, 8000fa6 <oqPutTimeout+0x56>
    oqp->q_notify(oqp);
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	4798      	blx	r3
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 8000fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return MSG_TIMEOUT;
 8000fae:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f383 8811 	msr	BASEPRI, r3
 8000fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20001428 	.word	0x20001428

08000fc0 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc4:	3030      	adds	r0, #48	@ 0x30
 8000fc6:	f7ff bfc3 	b.w	8000f50 <oqPutTimeout>
 8000fca:	bf00      	nop
 8000fcc:	0000      	movs	r0, r0
	...

08000fd0 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8000fd0:	3030      	adds	r0, #48	@ 0x30
 8000fd2:	f7ff bfbd 	b.w	8000f50 <oqPutTimeout>
 8000fd6:	bf00      	nop
	...

08000fe0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8000fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fe4:	b085      	sub	sp, #20
 8000fe6:	f04f 0920 	mov.w	r9, #32
 8000fea:	4616      	mov	r6, r2
  qnotify_t nfy = oqp->q_notify;
 8000fec:	f8d0 801c 	ldr.w	r8, [r0, #28]
                      size_t n, sysinterval_t timeout) {
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8000ff6:	b38a      	cbz	r2, 800105c <oqWriteTimeout+0x7c>
  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 8000ff8:	4646      	mov	r6, r8
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	4692      	mov	sl, r2
 8000ffe:	f04f 0b00 	mov.w	fp, #0
 8001002:	4688      	mov	r8, r1
 8001004:	9203      	str	r2, [sp, #12]
  if (n > oqGetEmptyI(oqp)) {
 8001006:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001008:	e9d4 7004 	ldrd	r7, r0, [r4, #16]
  if (n > oqGetEmptyI(oqp)) {
 800100c:	4552      	cmp	r2, sl
    n = oqGetEmptyI(oqp);
 800100e:	bf2c      	ite	cs
 8001010:	4655      	movcs	r5, sl
 8001012:	68a5      	ldrcc	r5, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001014:	1a3f      	subs	r7, r7, r0
  if (n < s1) {
 8001016:	42af      	cmp	r7, r5
 8001018:	d84a      	bhi.n	80010b0 <oqWriteTimeout+0xd0>
  else if (n > s1) {
 800101a:	d226      	bcs.n	800106a <oqWriteTimeout+0x8a>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 800101c:	463a      	mov	r2, r7
 800101e:	4641      	mov	r1, r8
 8001020:	f7ff f97c 	bl	800031c <memcpy>
    s2 = n - s1;
 8001024:	1bea      	subs	r2, r5, r7
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8001026:	eb08 0107 	add.w	r1, r8, r7
 800102a:	68e0      	ldr	r0, [r4, #12]
 800102c:	9202      	str	r2, [sp, #8]
 800102e:	f7ff f975 	bl	800031c <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8001032:	9a02      	ldr	r2, [sp, #8]
 8001034:	68e1      	ldr	r1, [r4, #12]
 8001036:	4411      	add	r1, r2
  oqp->q_counter -= n;
 8001038:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 800103a:	6161      	str	r1, [r4, #20]
  oqp->q_counter -= n;
 800103c:	1b52      	subs	r2, r2, r5
 800103e:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8001040:	b10e      	cbz	r6, 8001046 <oqWriteTimeout+0x66>
        nfy(oqp);
 8001042:	4620      	mov	r0, r4
 8001044:	47b0      	blx	r6
 8001046:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 800104a:	ebaa 0a05 	sub.w	sl, sl, r5
      bp += done;
 800104e:	44a8      	add	r8, r5
 8001050:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8001054:	f1ba 0f00 	cmp.w	sl, #0
 8001058:	d1d5      	bne.n	8001006 <oqWriteTimeout+0x26>
 800105a:	9e03      	ldr	r6, [sp, #12]
 800105c:	4630      	mov	r0, r6
 800105e:	2300      	movs	r3, #0
 8001060:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8001064:	b005      	add	sp, #20
 8001066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800106a:	4641      	mov	r1, r8
 800106c:	462a      	mov	r2, r5
 800106e:	f7ff f955 	bl	800031c <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8001072:	68e1      	ldr	r1, [r4, #12]
  oqp->q_counter -= n;
 8001074:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr += n;
 8001076:	6161      	str	r1, [r4, #20]
  oqp->q_counter -= n;
 8001078:	1b52      	subs	r2, r2, r5
 800107a:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 800107c:	2d00      	cmp	r5, #0
 800107e:	d1df      	bne.n	8001040 <oqWriteTimeout+0x60>
  if (TIME_IMMEDIATE == timeout) {
 8001080:	9b01      	ldr	r3, [sp, #4]
 8001082:	b163      	cbz	r3, 800109e <oqWriteTimeout+0xbe>
  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 8001084:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <oqWriteTimeout+0xe0>)
  p->prev       = qp->prev;
 8001086:	6860      	ldr	r0, [r4, #4]
 8001088:	699a      	ldr	r2, [r3, #24]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800108a:	9901      	ldr	r1, [sp, #4]
 800108c:	e9c2 4000 	strd	r4, r0, [r2]
  p->prev->next = p;
 8001090:	6002      	str	r2, [r0, #0]
 8001092:	2004      	movs	r0, #4
  qp->prev      = p;
 8001094:	6062      	str	r2, [r4, #4]
 8001096:	f7ff fd8b 	bl	8000bb0 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 800109a:	2800      	cmp	r0, #0
 800109c:	d0b3      	beq.n	8001006 <oqWriteTimeout+0x26>
  return max - n;
 800109e:	9e03      	ldr	r6, [sp, #12]
 80010a0:	2300      	movs	r3, #0
 80010a2:	eba6 000a 	sub.w	r0, r6, sl
 80010a6:	f383 8811 	msr	BASEPRI, r3
}
 80010aa:	b005      	add	sp, #20
 80010ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80010b0:	4641      	mov	r1, r8
 80010b2:	462a      	mov	r2, r5
 80010b4:	f7ff f932 	bl	800031c <memcpy>
    oqp->q_wrptr += n;
 80010b8:	6961      	ldr	r1, [r4, #20]
 80010ba:	4429      	add	r1, r5
 80010bc:	e7da      	b.n	8001074 <oqWriteTimeout+0x94>
 80010be:	bf00      	nop
 80010c0:	20001428 	.word	0x20001428
	...

080010d0 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295
 80010d4:	3030      	adds	r0, #48	@ 0x30
 80010d6:	f7ff bf83 	b.w	8000fe0 <oqWriteTimeout>
 80010da:	bf00      	nop
 80010dc:	0000      	movs	r0, r0
	...

080010e0 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80010e0:	3030      	adds	r0, #48	@ 0x30
 80010e2:	f7ff bf7d 	b.w	8000fe0 <oqWriteTimeout>
 80010e6:	bf00      	nop
	...

080010f0 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 80010f0:	b4f0      	push	{r4, r5, r6, r7}

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 80010f2:	6883      	ldr	r3, [r0, #8]
 *
 * @xclass
 */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 80010f4:	4c35      	ldr	r4, [pc, #212]	@ (80011cc <chMtxLockS+0xdc>)
 80010f6:	69a1      	ldr	r1, [r4, #24]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d047      	beq.n	800118c <chMtxLockS+0x9c>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 80010fc:	688d      	ldr	r5, [r1, #8]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	4295      	cmp	r5, r2
 8001102:	d917      	bls.n	8001134 <chMtxLockS+0x44>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->hdr.pqueue.prio = currtp->hdr.pqueue.prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8001104:	f893 2020 	ldrb.w	r2, [r3, #32]
        tp->hdr.pqueue.prio = currtp->hdr.pqueue.prio;
 8001108:	609d      	str	r5, [r3, #8]
        switch (tp->state) {
 800110a:	2a06      	cmp	r2, #6
 800110c:	d044      	beq.n	8001198 <chMtxLockS+0xa8>
 800110e:	2a07      	cmp	r2, #7
 8001110:	d02d      	beq.n	800116e <chMtxLockS+0x7e>
 8001112:	b97a      	cbnz	r2, 8001134 <chMtxLockS+0x44>
  p->prev->next = p->next;
 8001114:	e9d3 6700 	ldrd	r6, r7, [r3]
 8001118:	603e      	str	r6, [r7, #0]
  p->next->prev = p->prev;
 800111a:	6077      	str	r7, [r6, #4]
  tp->state = CH_STATE_READY;
 800111c:	f883 2020 	strb.w	r2, [r3, #32]
  return (thread_t *)ch_pqueue_insert_behind(&ch.rlist.pqueue,
 8001120:	4a2a      	ldr	r2, [pc, #168]	@ (80011cc <chMtxLockS+0xdc>)
    pqp = pqp->next;
 8001122:	6812      	ldr	r2, [r2, #0]
  } while (pqp->prio >= p->prio);
 8001124:	6896      	ldr	r6, [r2, #8]
 8001126:	42ae      	cmp	r6, r5
 8001128:	d2fb      	bcs.n	8001122 <chMtxLockS+0x32>
  p->next       = pqp;
 800112a:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 800112c:	6855      	ldr	r5, [r2, #4]
 800112e:	605d      	str	r5, [r3, #4]
  p->prev->next = p;
 8001130:	602b      	str	r3, [r5, #0]
  pqp->prev     = p;
 8001132:	6053      	str	r3, [r2, #4]
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void ch_sch_prio_insert(ch_queue_t *tp, ch_queue_t *qp) {

  ch_queue_t *cp = qp;
 8001134:	4603      	mov	r3, r0
 8001136:	e003      	b.n	8001140 <chMtxLockS+0x50>
  do {
    cp = cp->next;
  } while ((cp != qp) &&
 8001138:	688a      	ldr	r2, [r1, #8]
 800113a:	689d      	ldr	r5, [r3, #8]
 800113c:	4295      	cmp	r5, r2
 800113e:	d302      	bcc.n	8001146 <chMtxLockS+0x56>
    cp = cp->next;
 8001140:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 8001142:	4298      	cmp	r0, r3
 8001144:	d1f8      	bne.n	8001138 <chMtxLockS+0x48>
  otp->state = newstate;
 8001146:	2506      	movs	r5, #6
           (((thread_t *)cp)->hdr.pqueue.prio >= ((thread_t *)tp)->hdr.pqueue.prio));
  tp->next       = cp;
  tp->prev       = cp->prev;
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	e9c1 3200 	strd	r3, r2, [r1]
  tp->prev->next = tp;
 800114e:	6011      	str	r1, [r2, #0]
  currp->state = CH_STATE_CURRENT;
 8001150:	2201      	movs	r2, #1
  cp->prev       = tp;
 8001152:	6059      	str	r1, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      ch_sch_prio_insert(&currtp->hdr.queue, &mp->queue);
      currtp->u.wtmtxp = mp;
 8001154:	6248      	str	r0, [r1, #36]	@ 0x24
  ch_priority_queue_t *p = pqp->next;
 8001156:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 8001158:	f881 5020 	strb.w	r5, [r1, #32]
  pqp->next       = p->next;
 800115c:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 800115e:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8001160:	f880 2020 	strb.w	r2, [r0, #32]
  pqp->next       = p->next;
 8001164:	6023      	str	r3, [r4, #0]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 8001166:	61a0      	str	r0, [r4, #24]
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = currtp;
    mp->next = currtp->mtxlist;
    currtp->mtxlist = mp;
  }
}
 8001168:	bcf0      	pop	{r4, r5, r6, r7}
  chSysSwitch(currp, otp);
 800116a:	f7ff b871 	b.w	8000250 <_port_switch>
          ch_sch_prio_insert(ch_queue_dequeue(&tp->hdr.queue),
 800116e:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
  p->prev->next = p->next;
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	685d      	ldr	r5, [r3, #4]
 8001174:	602a      	str	r2, [r5, #0]
  p->next->prev = p->prev;
 8001176:	6055      	str	r5, [r2, #4]
  ch_queue_t *cp = qp;
 8001178:	4632      	mov	r2, r6
 800117a:	e003      	b.n	8001184 <chMtxLockS+0x94>
  } while ((cp != qp) &&
 800117c:	689d      	ldr	r5, [r3, #8]
 800117e:	6897      	ldr	r7, [r2, #8]
 8001180:	42af      	cmp	r7, r5
 8001182:	d3d2      	bcc.n	800112a <chMtxLockS+0x3a>
    cp = cp->next;
 8001184:	6812      	ldr	r2, [r2, #0]
  } while ((cp != qp) &&
 8001186:	4296      	cmp	r6, r2
 8001188:	d1f8      	bne.n	800117c <chMtxLockS+0x8c>
 800118a:	e7ce      	b.n	800112a <chMtxLockS+0x3a>
    mp->next = currtp->mtxlist;
 800118c:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
}
 800118e:	bcf0      	pop	{r4, r5, r6, r7}
    mp->next = currtp->mtxlist;
 8001190:	e9c0 1302 	strd	r1, r3, [r0, #8]
    currtp->mtxlist = mp;
 8001194:	6388      	str	r0, [r1, #56]	@ 0x38
}
 8001196:	4770      	bx	lr
                             &tp->u.wtmtxp->queue);
 8001198:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
  p->prev->next = p->next;
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	685d      	ldr	r5, [r3, #4]
 800119e:	602a      	str	r2, [r5, #0]
  p->next->prev = p->prev;
 80011a0:	6055      	str	r5, [r2, #4]
  ch_queue_t *cp = qp;
 80011a2:	4632      	mov	r2, r6
 80011a4:	e003      	b.n	80011ae <chMtxLockS+0xbe>
  } while ((cp != qp) &&
 80011a6:	689d      	ldr	r5, [r3, #8]
 80011a8:	6897      	ldr	r7, [r2, #8]
 80011aa:	42af      	cmp	r7, r5
 80011ac:	d302      	bcc.n	80011b4 <chMtxLockS+0xc4>
    cp = cp->next;
 80011ae:	6812      	ldr	r2, [r2, #0]
  } while ((cp != qp) &&
 80011b0:	4296      	cmp	r6, r2
 80011b2:	d1f8      	bne.n	80011a6 <chMtxLockS+0xb6>
  tp->prev       = cp->prev;
 80011b4:	6855      	ldr	r5, [r2, #4]
  tp->next       = cp;
 80011b6:	601a      	str	r2, [r3, #0]
  tp->prev       = cp->prev;
 80011b8:	605d      	str	r5, [r3, #4]
  tp->prev->next = tp;
 80011ba:	602b      	str	r3, [r5, #0]
  cp->prev       = tp;
 80011bc:	6053      	str	r3, [r2, #4]
          tp = tp->u.wtmtxp->owner;
 80011be:	68b3      	ldr	r3, [r6, #8]
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 80011c0:	688d      	ldr	r5, [r1, #8]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	42aa      	cmp	r2, r5
 80011c6:	d39d      	bcc.n	8001104 <chMtxLockS+0x14>
 80011c8:	e7b4      	b.n	8001134 <chMtxLockS+0x44>
 80011ca:	bf00      	nop
 80011cc:	20001428 	.word	0x20001428

080011d0 <chSchWakeupS.constprop.0>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80011d0:	b470      	push	{r4, r5, r6}
  ntp->u.rdymsg = msg;
 80011d2:	2600      	movs	r6, #0
  thread_t *otp = currp;
 80011d4:	4a13      	ldr	r2, [pc, #76]	@ (8001224 <chSchWakeupS.constprop.0+0x54>)
  if (ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio) {
 80011d6:	6885      	ldr	r5, [r0, #8]
  thread_t *otp = currp;
 80011d8:	6991      	ldr	r1, [r2, #24]
  if (ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio) {
 80011da:	688c      	ldr	r4, [r1, #8]
  ntp->u.rdymsg = msg;
 80011dc:	6246      	str	r6, [r0, #36]	@ 0x24
  if (ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio) {
 80011de:	42a5      	cmp	r5, r4
 80011e0:	d912      	bls.n	8001208 <chSchWakeupS.constprop.0+0x38>
  return (thread_t *)ch_pqueue_insert_ahead(&ch.rlist.pqueue,
 80011e2:	4613      	mov	r3, r2
  tp->state = CH_STATE_READY;
 80011e4:	f881 6020 	strb.w	r6, [r1, #32]
static inline ch_priority_queue_t *ch_pqueue_insert_ahead(ch_priority_queue_t *pqp,
                                                          ch_priority_queue_t *p) {

  /* Scanning priority queue.*/
  do {
    pqp = pqp->next;
 80011e8:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio > p->prio);
 80011ea:	689d      	ldr	r5, [r3, #8]
 80011ec:	42ac      	cmp	r4, r5
 80011ee:	d3fb      	bcc.n	80011e8 <chSchWakeupS.constprop.0+0x18>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 80011f0:	685c      	ldr	r4, [r3, #4]
 80011f2:	e9c1 3400 	strd	r3, r4, [r1]
  p->prev->next = p;
 80011f6:	6021      	str	r1, [r4, #0]
    ntp->state = CH_STATE_CURRENT;
 80011f8:	2401      	movs	r4, #1
  pqp->prev     = p;
 80011fa:	6059      	str	r1, [r3, #4]
 80011fc:	f880 4020 	strb.w	r4, [r0, #32]
}
 8001200:	bc70      	pop	{r4, r5, r6}
    currp = ntp;
 8001202:	6190      	str	r0, [r2, #24]
    chSysSwitch(ntp, otp);
 8001204:	f7ff b824 	b.w	8000250 <_port_switch>
  return (thread_t *)ch_pqueue_insert_behind(&ch.rlist.pqueue,
 8001208:	4613      	mov	r3, r2
  tp->state = CH_STATE_READY;
 800120a:	f880 6020 	strb.w	r6, [r0, #32]
    pqp = pqp->next;
 800120e:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	4295      	cmp	r5, r2
 8001214:	d9fb      	bls.n	800120e <chSchWakeupS.constprop.0+0x3e>
}
 8001216:	bc70      	pop	{r4, r5, r6}
  p->prev       = pqp->prev;
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800121e:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001220:	6058      	str	r0, [r3, #4]
 8001222:	4770      	bx	lr
 8001224:	20001428 	.word	0x20001428
	...

08001230 <chThdCreateStatic.constprop.0.isra.0>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8001230:	b538      	push	{r3, r4, r5, lr}
 8001232:	2420      	movs	r4, #32
 8001234:	4603      	mov	r3, r0
 8001236:	f384 8811 	msr	BASEPRI, r4
  tp->name            = name;
 800123a:	4d1a      	ldr	r5, [pc, #104]	@ (80012a4 <chThdCreateStatic.constprop.0.isra.0+0x74>)
  tp->hdr.pqueue.prio = prio;
 800123c:	f8c3 1108 	str.w	r1, [r3, #264]	@ 0x108
  tp->realprio        = prio;
 8001240:	f8c3 113c 	str.w	r1, [r3, #316]	@ 0x13c
  tp->name            = name;
 8001244:	f8c3 5118 	str.w	r5, [r3, #280]	@ 0x118
  tp->refs            = (trefs_t)1;
 8001248:	2101      	movs	r1, #1
  tp->state           = CH_STATE_WTSTART;
 800124a:	2502      	movs	r5, #2
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800124c:	f103 04dc 	add.w	r4, r3, #220	@ 0xdc
 8001250:	f8c3 410c 	str.w	r4, [r3, #268]	@ 0x10c
 8001254:	2400      	movs	r4, #0
 8001256:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  REG_INSERT(tp);
 800125a:	4a13      	ldr	r2, [pc, #76]	@ (80012a8 <chThdCreateStatic.constprop.0.isra.0+0x78>)
  tp->state           = CH_STATE_WTSTART;
 800125c:	f8a3 5120 	strh.w	r5, [r3, #288]	@ 0x120
  tp->refs            = (trefs_t)1;
 8001260:	f883 1122 	strb.w	r1, [r3, #290]	@ 0x122
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001264:	4d11      	ldr	r5, [pc, #68]	@ (80012ac <chThdCreateStatic.constprop.0.isra.0+0x7c>)
  REG_INSERT(tp);
 8001266:	6951      	ldr	r1, [r2, #20]
  tp = threadref(((uint8_t *)wsp + size -
 8001268:	f500 7080 	add.w	r0, r0, #256	@ 0x100
  REG_INSERT(tp);
 800126c:	f8c3 1114 	str.w	r1, [r3, #276]	@ 0x114
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001270:	f8c3 50fc 	str.w	r5, [r3, #252]	@ 0xfc
  tp->epending        = (eventmask_t)0;
 8001274:	e9c3 444d 	strd	r4, r4, [r3, #308]	@ 0x134
  tp->wabase = (stkalign_t *)wsp;
 8001278:	f8c3 311c 	str.w	r3, [r3, #284]	@ 0x11c
  REG_INSERT(tp);
 800127c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001280:	f8c3 40e0 	str.w	r4, [r3, #224]	@ 0xe0
  ch_list_init(&tp->waiting);
 8001284:	f503 7594 	add.w	r5, r3, #296	@ 0x128
  REG_INSERT(tp);
 8001288:	6108      	str	r0, [r1, #16]
  ch_queue_init(&tp->msgqueue);
 800128a:	f503 7196 	add.w	r1, r3, #300	@ 0x12c
  qp->next = qp;
 800128e:	e9c3 514a 	strd	r5, r1, [r3, #296]	@ 0x128
  qp->prev = qp;
 8001292:	f8c3 1130 	str.w	r1, [r3, #304]	@ 0x130
  REG_INSERT(tp);
 8001296:	6150      	str	r0, [r2, #20]
  chSchWakeupS(tp, MSG_OK);
 8001298:	f7ff ff9a 	bl	80011d0 <chSchWakeupS.constprop.0>
 800129c:	f384 8811 	msr	BASEPRI, r4
}
 80012a0:	bd38      	pop	{r3, r4, r5, pc}
 80012a2:	bf00      	nop
 80012a4:	08003528 	.word	0x08003528
 80012a8:	20001428 	.word	0x20001428
 80012ac:	08000261 	.word	0x08000261

080012b0 <canTransmitTimeout.constprop.0.isra.0>:
 * @retval MSG_TIMEOUT  The operation has timed out.
 * @retval MSG_RESET    The driver has been stopped while waiting.
 *
 * @api
 */
msg_t canTransmitTimeout(CANDriver *canp,
 80012b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012b4:	2320      	movs	r3, #32
 80012b6:	4680      	mov	r8, r0
 80012b8:	f383 8811 	msr	BASEPRI, r3
  otp->state = newstate;
 80012bc:	2704      	movs	r7, #4
 80012be:	4d29      	ldr	r5, [pc, #164]	@ (8001364 <canTransmitTimeout.constprop.0.isra.0+0xb4>)
  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 80012c0:	4c29      	ldr	r4, [pc, #164]	@ (8001368 <canTransmitTimeout.constprop.0.isra.0+0xb8>)
  p->next       = qp;
 80012c2:	f105 0608 	add.w	r6, r5, #8
  osalSysLock();
  osalDbgAssert((canp->state == CAN_READY) || (canp->state == CAN_SLEEP),
                "invalid state");

  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_tx_empty(canp, mailbox)) {
 80012c6:	782b      	ldrb	r3, [r5, #0]
 80012c8:	2b05      	cmp	r3, #5
 80012ca:	d004      	beq.n	80012d6 <canTransmitTimeout.constprop.0.isra.0+0x26>
 */
bool can_lld_is_tx_empty(CANDriver *canp, canmbx_t mailbox) {

  switch (mailbox) {
  case CAN_ANY_MAILBOX:
    return (canp->can->TSR & CAN_TSR_TME) != 0;
 80012cc:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	f012 5fe0 	tst.w	r2, #469762048	@ 0x1c000000
 80012d4:	d11a      	bne.n	800130c <canTransmitTimeout.constprop.0.isra.0+0x5c>
  currp->state = CH_STATE_CURRENT;
 80012d6:	2201      	movs	r2, #1
 80012d8:	69a1      	ldr	r1, [r4, #24]
  p->prev       = qp->prev;
 80012da:	68eb      	ldr	r3, [r5, #12]
  ch_priority_queue_t *p = pqp->next;
 80012dc:	6820      	ldr	r0, [r4, #0]
  p->prev       = qp->prev;
 80012de:	e9c1 6300 	strd	r6, r3, [r1]
  p->prev->next = p;
 80012e2:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 80012e4:	f881 7020 	strb.w	r7, [r1, #32]
  pqp->next       = p->next;
 80012e8:	6803      	ldr	r3, [r0, #0]
  qp->prev      = p;
 80012ea:	60e9      	str	r1, [r5, #12]
  pqp->next->prev = pqp;
 80012ec:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 80012ee:	f880 2020 	strb.w	r2, [r0, #32]
  pqp->next       = p->next;
 80012f2:	6023      	str	r3, [r4, #0]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 80012f4:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 80012f6:	f7fe ffab 	bl	8000250 <_port_switch>
  return currp->u.rdymsg;
 80012fa:	69a3      	ldr	r3, [r4, #24]
  /*lint -restore*/
   msg_t msg = osalThreadEnqueueTimeoutS(&canp->txqueue, timeout);
    if (msg != MSG_OK) {
 80012fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0e1      	beq.n	80012c6 <canTransmitTimeout.constprop.0.isra.0+0x16>
 8001302:	2300      	movs	r3, #0
 8001304:	f383 8811 	msr	BASEPRI, r3
    }
  }
  can_lld_transmit(canp, mailbox, ctfp);
  osalSysUnlock();
  return MSG_OK;
}
 8001308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return;
  }

  /* Preparing the message.*/
  if (ctfp->IDE)
    tir = ((uint32_t)ctfp->EID << 3) | ((uint32_t)ctfp->RTR << 1) |
 800130c:	f898 1000 	ldrb.w	r1, [r8]
    tmbp = &canp->can->sTxMailBox[(canp->can->TSR & CAN_TSR_CODE) >> 24];
 8001310:	6898      	ldr	r0, [r3, #8]
    tir = ((uint32_t)ctfp->EID << 3) | ((uint32_t)ctfp->RTR << 1) |
 8001312:	f3c1 1200 	ubfx	r2, r1, #4, #1
  if (ctfp->IDE)
 8001316:	068c      	lsls	r4, r1, #26
    tmbp = &canp->can->sTxMailBox[(canp->can->TSR & CAN_TSR_CODE) >> 24];
 8001318:	f3c0 6001 	ubfx	r0, r0, #24, #2
    tir = ((uint32_t)ctfp->EID << 3) | ((uint32_t)ctfp->RTR << 1) |
 800131c:	ea4f 0242 	mov.w	r2, r2, lsl #1
  if (ctfp->IDE)
 8001320:	d51a      	bpl.n	8001358 <canTransmitTimeout.constprop.0.isra.0+0xa8>
    tir = ((uint32_t)ctfp->EID << 3) | ((uint32_t)ctfp->RTR << 1) |
 8001322:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8001326:	ea42 02c4 	orr.w	r2, r2, r4, lsl #3
 800132a:	f042 0204 	orr.w	r2, r2, #4
 800132e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
          CAN_TI0R_IDE;
  else
    tir = ((uint32_t)ctfp->SID << 21) | ((uint32_t)ctfp->RTR << 1);
  tmbp->TDTR = ctfp->DLC;
 8001332:	f001 010f 	and.w	r1, r1, #15
  tmbp->TDLR = ctfp->data32[0];
  tmbp->TDHR = ctfp->data32[1];
  tmbp->TIR  = tir | CAN_TI0R_TXRQ;
 8001336:	f042 0201 	orr.w	r2, r2, #1
  tmbp->TDHR = ctfp->data32[1];
 800133a:	e9d8 4002 	ldrd	r4, r0, [r8, #8]
  tmbp->TDTR = ctfp->DLC;
 800133e:	f8c3 1184 	str.w	r1, [r3, #388]	@ 0x184
  tmbp->TDLR = ctfp->data32[0];
 8001342:	f8c3 4188 	str.w	r4, [r3, #392]	@ 0x188
 8001346:	2100      	movs	r1, #0
  tmbp->TDHR = ctfp->data32[1];
 8001348:	f8c3 018c 	str.w	r0, [r3, #396]	@ 0x18c
  tmbp->TIR  = tir | CAN_TI0R_TXRQ;
 800134c:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
 8001350:	f381 8811 	msr	BASEPRI, r1
 8001354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tir = ((uint32_t)ctfp->SID << 21) | ((uint32_t)ctfp->RTR << 1);
 8001358:	f8b8 4004 	ldrh.w	r4, [r8, #4]
 800135c:	ea42 5244 	orr.w	r2, r2, r4, lsl #21
 8001360:	e7e5      	b.n	800132e <canTransmitTimeout.constprop.0.isra.0+0x7e>
 8001362:	bf00      	nop
 8001364:	200012fc 	.word	0x200012fc
 8001368:	20001428 	.word	0x20001428
 800136c:	00000000 	.word	0x00000000

08001370 <__core_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
	...

08001380 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
	...

08001390 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8001390:	e7fe      	b.n	8001390 <__default_exit>
 8001392:	bf00      	nop
	...

080013a0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	4d13      	ldr	r5, [pc, #76]	@ (80013f0 <__init_ram_areas+0x50>)
 80013a4:	f105 0480 	add.w	r4, r5, #128	@ 0x80
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 80013a8:	e955 0103 	ldrd	r0, r1, [r5, #-12]
 80013ac:	4288      	cmp	r0, r1
    uint32_t *tp = rap->init_text_area;
 80013ae:	f855 2c10 	ldr.w	r2, [r5, #-16]
    while (p < rap->clear_area) {
 80013b2:	d20d      	bcs.n	80013d0 <__init_ram_areas+0x30>
    uint32_t *p = rap->init_area;
 80013b4:	4603      	mov	r3, r0
 80013b6:	3a04      	subs	r2, #4
      *p = *tp;
 80013b8:	f852 6f04 	ldr.w	r6, [r2, #4]!
 80013bc:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->clear_area) {
 80013c0:	428b      	cmp	r3, r1
 80013c2:	d3f9      	bcc.n	80013b8 <__init_ram_areas+0x18>
 80013c4:	1e4b      	subs	r3, r1, #1
 80013c6:	1a1b      	subs	r3, r3, r0
 80013c8:	f023 0303 	bic.w	r3, r3, #3
 80013cc:	3304      	adds	r3, #4
 80013ce:	4418      	add	r0, r3
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 80013d0:	f855 2c04 	ldr.w	r2, [r5, #-4]
 80013d4:	4282      	cmp	r2, r0
 80013d6:	d907      	bls.n	80013e8 <__init_ram_areas+0x48>
      *p = 0;
 80013d8:	3a01      	subs	r2, #1
 80013da:	1a12      	subs	r2, r2, r0
 80013dc:	f022 0203 	bic.w	r2, r2, #3
 80013e0:	2100      	movs	r1, #0
 80013e2:	3204      	adds	r2, #4
 80013e4:	f7fe ff4a 	bl	800027c <memset>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80013e8:	3510      	adds	r5, #16
 80013ea:	42a5      	cmp	r5, r4
 80013ec:	d1dc      	bne.n	80013a8 <__init_ram_areas+0x8>
     for self-modifying code.*/
  SCB_CleanDCache();
  SCB_InvalidateICache();
#endif
#endif
}
 80013ee:	bd70      	pop	{r4, r5, r6, pc}
 80013f0:	08003690 	.word	0x08003690
	...

08001400 <Vector58>:
OSAL_IRQ_HANDLER(Vector58) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001400:	4a18      	ldr	r2, [pc, #96]	@ (8001464 <Vector58+0x64>)
 8001402:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 8001404:	6813      	ldr	r3, [r2, #0]
 8001406:	400b      	ands	r3, r1
 8001408:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 800140c:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 0);
 800140e:	b33b      	cbz	r3, 8001460 <Vector58+0x60>
OSAL_IRQ_HANDLER(Vector58) {
 8001410:	b570      	push	{r4, r5, r6, lr}
  exti_serve_irq(pr, 0);
 8001412:	4d15      	ldr	r5, [pc, #84]	@ (8001468 <Vector58+0x68>)
 8001414:	68ab      	ldr	r3, [r5, #8]
 8001416:	b10b      	cbz	r3, 800141c <Vector58+0x1c>
 8001418:	68e8      	ldr	r0, [r5, #12]
 800141a:	4798      	blx	r3
 800141c:	2320      	movs	r3, #32
 800141e:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 8001422:	682c      	ldr	r4, [r5, #0]
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (ch_queue_notempty(&tqp->queue)) {
 8001424:	42ac      	cmp	r4, r5
 8001426:	d014      	beq.n	8001452 <Vector58+0x52>

  tp = (thread_t *)ch_queue_fifo_remove(&tqp->queue);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8001428:	2600      	movs	r6, #0
 800142a:	4620      	mov	r0, r4
  qp->next       = p->next;
 800142c:	6824      	ldr	r4, [r4, #0]
  } while (pqp->prio >= p->prio);
 800142e:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <Vector58+0x6c>)
 8001430:	6881      	ldr	r1, [r0, #8]
  qp->next->prev = qp;
 8001432:	6065      	str	r5, [r4, #4]
  qp->next       = p->next;
 8001434:	602c      	str	r4, [r5, #0]
 8001436:	6246      	str	r6, [r0, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8001438:	f880 6020 	strb.w	r6, [r0, #32]
    pqp = pqp->next;
 800143c:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	428a      	cmp	r2, r1
 8001442:	d2fb      	bcs.n	800143c <Vector58+0x3c>
  p->prev       = pqp->prev;
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	42ac      	cmp	r4, r5
 8001448:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800144c:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 800144e:	6058      	str	r0, [r3, #4]
 8001450:	d1eb      	bne.n	800142a <Vector58+0x2a>
 8001452:	2300      	movs	r3, #0
 8001454:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8001458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 800145c:	f7ff b870 	b.w	8000540 <_port_irq_epilogue>
 8001460:	f7ff b86e 	b.w	8000540 <_port_irq_epilogue>
 8001464:	40010400 	.word	0x40010400
 8001468:	20001324 	.word	0x20001324
 800146c:	20001428 	.word	0x20001428

08001470 <Vector5C>:
OSAL_IRQ_HANDLER(Vector5C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001470:	4a18      	ldr	r2, [pc, #96]	@ (80014d4 <Vector5C+0x64>)
OSAL_IRQ_HANDLER(Vector5C) {
 8001472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pr = EXTI->PR;
 8001474:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 8001476:	6813      	ldr	r3, [r2, #0]
 8001478:	400b      	ands	r3, r1
 800147a:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 800147e:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 1);
 8001480:	b31b      	cbz	r3, 80014ca <Vector5C+0x5a>
 8001482:	4f15      	ldr	r7, [pc, #84]	@ (80014d8 <Vector5C+0x68>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	b10b      	cbz	r3, 800148c <Vector5C+0x1c>
 8001488:	69f8      	ldr	r0, [r7, #28]
 800148a:	4798      	blx	r3
 800148c:	2320      	movs	r3, #32
 800148e:	f383 8811 	msr	BASEPRI, r3
 8001492:	4d12      	ldr	r5, [pc, #72]	@ (80014dc <Vector5C+0x6c>)
  return (bool)(qp->next != qp);
 8001494:	693c      	ldr	r4, [r7, #16]
 8001496:	42ac      	cmp	r4, r5
 8001498:	d014      	beq.n	80014c4 <Vector5C+0x54>
 800149a:	2600      	movs	r6, #0
 800149c:	4620      	mov	r0, r4
  qp->next       = p->next;
 800149e:	6824      	ldr	r4, [r4, #0]
  } while (pqp->prio >= p->prio);
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <Vector5C+0x70>)
 80014a2:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 80014a4:	613c      	str	r4, [r7, #16]
  qp->next->prev = qp;
 80014a6:	6065      	str	r5, [r4, #4]
 80014a8:	6246      	str	r6, [r0, #36]	@ 0x24
 80014aa:	f880 6020 	strb.w	r6, [r0, #32]
    pqp = pqp->next;
 80014ae:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	428a      	cmp	r2, r1
 80014b4:	d2fb      	bcs.n	80014ae <Vector5C+0x3e>
  p->prev       = pqp->prev;
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	42ac      	cmp	r4, r5
 80014ba:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 80014be:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 80014c0:	6058      	str	r0, [r3, #4]
 80014c2:	d1eb      	bne.n	800149c <Vector5C+0x2c>
 80014c4:	2300      	movs	r3, #0
 80014c6:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80014ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 80014ce:	f7ff b837 	b.w	8000540 <_port_irq_epilogue>
 80014d2:	bf00      	nop
 80014d4:	40010400 	.word	0x40010400
 80014d8:	20001324 	.word	0x20001324
 80014dc:	20001334 	.word	0x20001334
 80014e0:	20001428 	.word	0x20001428
	...

080014f0 <Vector60>:
OSAL_IRQ_HANDLER(Vector60) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80014f0:	4a18      	ldr	r2, [pc, #96]	@ (8001554 <Vector60+0x64>)
OSAL_IRQ_HANDLER(Vector60) {
 80014f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pr = EXTI->PR;
 80014f4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 80014f6:	6813      	ldr	r3, [r2, #0]
 80014f8:	400b      	ands	r3, r1
 80014fa:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 80014fe:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 2);
 8001500:	b31b      	cbz	r3, 800154a <Vector60+0x5a>
 8001502:	4f15      	ldr	r7, [pc, #84]	@ (8001558 <Vector60+0x68>)
 8001504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001506:	b10b      	cbz	r3, 800150c <Vector60+0x1c>
 8001508:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800150a:	4798      	blx	r3
 800150c:	2320      	movs	r3, #32
 800150e:	f383 8811 	msr	BASEPRI, r3
 8001512:	4d12      	ldr	r5, [pc, #72]	@ (800155c <Vector60+0x6c>)
  return (bool)(qp->next != qp);
 8001514:	6a3c      	ldr	r4, [r7, #32]
 8001516:	42ac      	cmp	r4, r5
 8001518:	d014      	beq.n	8001544 <Vector60+0x54>
 800151a:	2600      	movs	r6, #0
 800151c:	4620      	mov	r0, r4
  qp->next       = p->next;
 800151e:	6824      	ldr	r4, [r4, #0]
  } while (pqp->prio >= p->prio);
 8001520:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <Vector60+0x70>)
 8001522:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 8001524:	623c      	str	r4, [r7, #32]
  qp->next->prev = qp;
 8001526:	6065      	str	r5, [r4, #4]
 8001528:	6246      	str	r6, [r0, #36]	@ 0x24
 800152a:	f880 6020 	strb.w	r6, [r0, #32]
    pqp = pqp->next;
 800152e:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	428a      	cmp	r2, r1
 8001534:	d2fb      	bcs.n	800152e <Vector60+0x3e>
  p->prev       = pqp->prev;
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	42ac      	cmp	r4, r5
 800153a:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800153e:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001540:	6058      	str	r0, [r3, #4]
 8001542:	d1eb      	bne.n	800151c <Vector60+0x2c>
 8001544:	2300      	movs	r3, #0
 8001546:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800154a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 800154e:	f7fe bff7 	b.w	8000540 <_port_irq_epilogue>
 8001552:	bf00      	nop
 8001554:	40010400 	.word	0x40010400
 8001558:	20001324 	.word	0x20001324
 800155c:	20001344 	.word	0x20001344
 8001560:	20001428 	.word	0x20001428
	...

08001570 <Vector64>:
OSAL_IRQ_HANDLER(Vector64) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001570:	4a18      	ldr	r2, [pc, #96]	@ (80015d4 <Vector64+0x64>)
OSAL_IRQ_HANDLER(Vector64) {
 8001572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pr = EXTI->PR;
 8001574:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 8001576:	6813      	ldr	r3, [r2, #0]
 8001578:	400b      	ands	r3, r1
 800157a:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 800157e:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 3);
 8001580:	b31b      	cbz	r3, 80015ca <Vector64+0x5a>
 8001582:	4f15      	ldr	r7, [pc, #84]	@ (80015d8 <Vector64+0x68>)
 8001584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001586:	b10b      	cbz	r3, 800158c <Vector64+0x1c>
 8001588:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800158a:	4798      	blx	r3
 800158c:	2320      	movs	r3, #32
 800158e:	f383 8811 	msr	BASEPRI, r3
 8001592:	4d12      	ldr	r5, [pc, #72]	@ (80015dc <Vector64+0x6c>)
  return (bool)(qp->next != qp);
 8001594:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8001596:	42ac      	cmp	r4, r5
 8001598:	d014      	beq.n	80015c4 <Vector64+0x54>
 800159a:	2600      	movs	r6, #0
 800159c:	4620      	mov	r0, r4
  qp->next       = p->next;
 800159e:	6824      	ldr	r4, [r4, #0]
  } while (pqp->prio >= p->prio);
 80015a0:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <Vector64+0x70>)
 80015a2:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 80015a4:	633c      	str	r4, [r7, #48]	@ 0x30
  qp->next->prev = qp;
 80015a6:	6065      	str	r5, [r4, #4]
 80015a8:	6246      	str	r6, [r0, #36]	@ 0x24
 80015aa:	f880 6020 	strb.w	r6, [r0, #32]
    pqp = pqp->next;
 80015ae:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	428a      	cmp	r2, r1
 80015b4:	d2fb      	bcs.n	80015ae <Vector64+0x3e>
  p->prev       = pqp->prev;
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	42ac      	cmp	r4, r5
 80015ba:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 80015be:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 80015c0:	6058      	str	r0, [r3, #4]
 80015c2:	d1eb      	bne.n	800159c <Vector64+0x2c>
 80015c4:	2300      	movs	r3, #0
 80015c6:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80015ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 80015ce:	f7fe bfb7 	b.w	8000540 <_port_irq_epilogue>
 80015d2:	bf00      	nop
 80015d4:	40010400 	.word	0x40010400
 80015d8:	20001324 	.word	0x20001324
 80015dc:	20001354 	.word	0x20001354
 80015e0:	20001428 	.word	0x20001428
	...

080015f0 <Vector68>:
OSAL_IRQ_HANDLER(Vector68) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80015f0:	4a18      	ldr	r2, [pc, #96]	@ (8001654 <Vector68+0x64>)
OSAL_IRQ_HANDLER(Vector68) {
 80015f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pr = EXTI->PR;
 80015f4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 80015f6:	6813      	ldr	r3, [r2, #0]
 80015f8:	400b      	ands	r3, r1
 80015fa:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 80015fe:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 4);
 8001600:	b31b      	cbz	r3, 800164a <Vector68+0x5a>
 8001602:	4f15      	ldr	r7, [pc, #84]	@ (8001658 <Vector68+0x68>)
 8001604:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001606:	b10b      	cbz	r3, 800160c <Vector68+0x1c>
 8001608:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800160a:	4798      	blx	r3
 800160c:	2320      	movs	r3, #32
 800160e:	f383 8811 	msr	BASEPRI, r3
 8001612:	4d12      	ldr	r5, [pc, #72]	@ (800165c <Vector68+0x6c>)
  return (bool)(qp->next != qp);
 8001614:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8001616:	42ac      	cmp	r4, r5
 8001618:	d014      	beq.n	8001644 <Vector68+0x54>
 800161a:	2600      	movs	r6, #0
 800161c:	4620      	mov	r0, r4
  qp->next       = p->next;
 800161e:	6824      	ldr	r4, [r4, #0]
  } while (pqp->prio >= p->prio);
 8001620:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <Vector68+0x70>)
 8001622:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 8001624:	643c      	str	r4, [r7, #64]	@ 0x40
  qp->next->prev = qp;
 8001626:	6065      	str	r5, [r4, #4]
 8001628:	6246      	str	r6, [r0, #36]	@ 0x24
 800162a:	f880 6020 	strb.w	r6, [r0, #32]
    pqp = pqp->next;
 800162e:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	428a      	cmp	r2, r1
 8001634:	d2fb      	bcs.n	800162e <Vector68+0x3e>
  p->prev       = pqp->prev;
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	42ac      	cmp	r4, r5
 800163a:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800163e:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001640:	6058      	str	r0, [r3, #4]
 8001642:	d1eb      	bne.n	800161c <Vector68+0x2c>
 8001644:	2300      	movs	r3, #0
 8001646:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800164a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 800164e:	f7fe bf77 	b.w	8000540 <_port_irq_epilogue>
 8001652:	bf00      	nop
 8001654:	40010400 	.word	0x40010400
 8001658:	20001324 	.word	0x20001324
 800165c:	20001364 	.word	0x20001364
 8001660:	20001428 	.word	0x20001428
	...

08001670 <Vector9C>:
/**
 * @brief   EXTI[5]...EXTI[9] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector9C) {
 8001670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001672:	4b6c      	ldr	r3, [pc, #432]	@ (8001824 <Vector9C+0x1b4>)
 8001674:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 8001676:	681d      	ldr	r5, [r3, #0]
 8001678:	4015      	ands	r5, r2
 800167a:	f405 7278 	and.w	r2, r5, #992	@ 0x3e0
                     (1U << 9));
  EXTI->PR = pr;

  exti_serve_irq(pr, 5);
 800167e:	06ac      	lsls	r4, r5, #26
  EXTI->PR = pr;
 8001680:	615a      	str	r2, [r3, #20]
  exti_serve_irq(pr, 5);
 8001682:	d525      	bpl.n	80016d0 <Vector9C+0x60>
 8001684:	4c68      	ldr	r4, [pc, #416]	@ (8001828 <Vector9C+0x1b8>)
 8001686:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001688:	b10b      	cbz	r3, 800168e <Vector9C+0x1e>
 800168a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800168c:	4798      	blx	r3
 800168e:	2320      	movs	r3, #32
 8001690:	f383 8811 	msr	BASEPRI, r3
 8001694:	4f65      	ldr	r7, [pc, #404]	@ (800182c <Vector9C+0x1bc>)
  return (bool)(qp->next != qp);
 8001696:	6d26      	ldr	r6, [r4, #80]	@ 0x50
 8001698:	42be      	cmp	r6, r7
 800169a:	d016      	beq.n	80016ca <Vector9C+0x5a>
 800169c:	f04f 0c00 	mov.w	ip, #0
 80016a0:	4630      	mov	r0, r6
  qp->next       = p->next;
 80016a2:	6836      	ldr	r6, [r6, #0]
  } while (pqp->prio >= p->prio);
 80016a4:	4b62      	ldr	r3, [pc, #392]	@ (8001830 <Vector9C+0x1c0>)
 80016a6:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 80016a8:	6526      	str	r6, [r4, #80]	@ 0x50
  qp->next->prev = qp;
 80016aa:	6077      	str	r7, [r6, #4]
 80016ac:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
 80016b0:	f880 c020 	strb.w	ip, [r0, #32]
    pqp = pqp->next;
 80016b4:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	428a      	cmp	r2, r1
 80016ba:	d2fb      	bcs.n	80016b4 <Vector9C+0x44>
  p->prev       = pqp->prev;
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	42be      	cmp	r6, r7
 80016c0:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 80016c4:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 80016c6:	6058      	str	r0, [r3, #4]
 80016c8:	d1ea      	bne.n	80016a0 <Vector9C+0x30>
 80016ca:	2300      	movs	r3, #0
 80016cc:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 6);
 80016d0:	0668      	lsls	r0, r5, #25
 80016d2:	d525      	bpl.n	8001720 <Vector9C+0xb0>
 80016d4:	4c54      	ldr	r4, [pc, #336]	@ (8001828 <Vector9C+0x1b8>)
 80016d6:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80016d8:	b10b      	cbz	r3, 80016de <Vector9C+0x6e>
 80016da:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80016dc:	4798      	blx	r3
 80016de:	2320      	movs	r3, #32
 80016e0:	f383 8811 	msr	BASEPRI, r3
 80016e4:	4f53      	ldr	r7, [pc, #332]	@ (8001834 <Vector9C+0x1c4>)
  return (bool)(qp->next != qp);
 80016e6:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 80016e8:	42be      	cmp	r6, r7
 80016ea:	d016      	beq.n	800171a <Vector9C+0xaa>
 80016ec:	f04f 0c00 	mov.w	ip, #0
 80016f0:	4630      	mov	r0, r6
  qp->next       = p->next;
 80016f2:	6836      	ldr	r6, [r6, #0]
  } while (pqp->prio >= p->prio);
 80016f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001830 <Vector9C+0x1c0>)
 80016f6:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 80016f8:	6626      	str	r6, [r4, #96]	@ 0x60
  qp->next->prev = qp;
 80016fa:	6077      	str	r7, [r6, #4]
 80016fc:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
 8001700:	f880 c020 	strb.w	ip, [r0, #32]
    pqp = pqp->next;
 8001704:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	428a      	cmp	r2, r1
 800170a:	d2fb      	bcs.n	8001704 <Vector9C+0x94>
  p->prev       = pqp->prev;
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	42be      	cmp	r6, r7
 8001710:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8001714:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001716:	6058      	str	r0, [r3, #4]
 8001718:	d1ea      	bne.n	80016f0 <Vector9C+0x80>
 800171a:	2300      	movs	r3, #0
 800171c:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 7);
 8001720:	0629      	lsls	r1, r5, #24
 8001722:	d525      	bpl.n	8001770 <Vector9C+0x100>
 8001724:	4c40      	ldr	r4, [pc, #256]	@ (8001828 <Vector9C+0x1b8>)
 8001726:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8001728:	b10b      	cbz	r3, 800172e <Vector9C+0xbe>
 800172a:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800172c:	4798      	blx	r3
 800172e:	2320      	movs	r3, #32
 8001730:	f383 8811 	msr	BASEPRI, r3
 8001734:	4f40      	ldr	r7, [pc, #256]	@ (8001838 <Vector9C+0x1c8>)
  return (bool)(qp->next != qp);
 8001736:	6f26      	ldr	r6, [r4, #112]	@ 0x70
 8001738:	42be      	cmp	r6, r7
 800173a:	d016      	beq.n	800176a <Vector9C+0xfa>
 800173c:	f04f 0c00 	mov.w	ip, #0
 8001740:	4630      	mov	r0, r6
  qp->next       = p->next;
 8001742:	6836      	ldr	r6, [r6, #0]
  } while (pqp->prio >= p->prio);
 8001744:	4b3a      	ldr	r3, [pc, #232]	@ (8001830 <Vector9C+0x1c0>)
 8001746:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 8001748:	6726      	str	r6, [r4, #112]	@ 0x70
  qp->next->prev = qp;
 800174a:	6077      	str	r7, [r6, #4]
 800174c:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
 8001750:	f880 c020 	strb.w	ip, [r0, #32]
    pqp = pqp->next;
 8001754:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	428a      	cmp	r2, r1
 800175a:	d2fb      	bcs.n	8001754 <Vector9C+0xe4>
  p->prev       = pqp->prev;
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	42be      	cmp	r6, r7
 8001760:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8001764:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001766:	6058      	str	r0, [r3, #4]
 8001768:	d1ea      	bne.n	8001740 <Vector9C+0xd0>
 800176a:	2300      	movs	r3, #0
 800176c:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 8);
 8001770:	05ea      	lsls	r2, r5, #23
 8001772:	d529      	bpl.n	80017c8 <Vector9C+0x158>
 8001774:	4c2c      	ldr	r4, [pc, #176]	@ (8001828 <Vector9C+0x1b8>)
 8001776:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 800177a:	b113      	cbz	r3, 8001782 <Vector9C+0x112>
 800177c:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8001780:	4798      	blx	r3
 8001782:	2320      	movs	r3, #32
 8001784:	f383 8811 	msr	BASEPRI, r3
 8001788:	4f2c      	ldr	r7, [pc, #176]	@ (800183c <Vector9C+0x1cc>)
  return (bool)(qp->next != qp);
 800178a:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800178e:	42be      	cmp	r6, r7
 8001790:	d017      	beq.n	80017c2 <Vector9C+0x152>
 8001792:	f04f 0c00 	mov.w	ip, #0
 8001796:	4630      	mov	r0, r6
  qp->next       = p->next;
 8001798:	6836      	ldr	r6, [r6, #0]
  } while (pqp->prio >= p->prio);
 800179a:	4b25      	ldr	r3, [pc, #148]	@ (8001830 <Vector9C+0x1c0>)
 800179c:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 800179e:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
  qp->next->prev = qp;
 80017a2:	6077      	str	r7, [r6, #4]
 80017a4:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
 80017a8:	f880 c020 	strb.w	ip, [r0, #32]
    pqp = pqp->next;
 80017ac:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	428a      	cmp	r2, r1
 80017b2:	d2fb      	bcs.n	80017ac <Vector9C+0x13c>
  p->prev       = pqp->prev;
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	42be      	cmp	r6, r7
 80017b8:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 80017bc:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 80017be:	6058      	str	r0, [r3, #4]
 80017c0:	d1e9      	bne.n	8001796 <Vector9C+0x126>
 80017c2:	2300      	movs	r3, #0
 80017c4:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 9);
 80017c8:	05ab      	lsls	r3, r5, #22
 80017ca:	d527      	bpl.n	800181c <Vector9C+0x1ac>
 80017cc:	4c16      	ldr	r4, [pc, #88]	@ (8001828 <Vector9C+0x1b8>)
 80017ce:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 80017d2:	b113      	cbz	r3, 80017da <Vector9C+0x16a>
 80017d4:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80017d8:	4798      	blx	r3
 80017da:	2320      	movs	r3, #32
 80017dc:	f383 8811 	msr	BASEPRI, r3
 80017e0:	4e17      	ldr	r6, [pc, #92]	@ (8001840 <Vector9C+0x1d0>)
  return (bool)(qp->next != qp);
 80017e2:	f8d4 5090 	ldr.w	r5, [r4, #144]	@ 0x90
 80017e6:	42b5      	cmp	r5, r6
 80017e8:	d015      	beq.n	8001816 <Vector9C+0x1a6>
 80017ea:	2700      	movs	r7, #0
 80017ec:	4628      	mov	r0, r5
  qp->next       = p->next;
 80017ee:	682d      	ldr	r5, [r5, #0]
  } while (pqp->prio >= p->prio);
 80017f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <Vector9C+0x1c0>)
 80017f2:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 80017f4:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
  qp->next->prev = qp;
 80017f8:	606e      	str	r6, [r5, #4]
 80017fa:	6247      	str	r7, [r0, #36]	@ 0x24
 80017fc:	f880 7020 	strb.w	r7, [r0, #32]
    pqp = pqp->next;
 8001800:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	428a      	cmp	r2, r1
 8001806:	d2fb      	bcs.n	8001800 <Vector9C+0x190>
  p->prev       = pqp->prev;
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	42b5      	cmp	r5, r6
 800180c:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8001810:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001812:	6058      	str	r0, [r3, #4]
 8001814:	d1ea      	bne.n	80017ec <Vector9C+0x17c>
 8001816:	2300      	movs	r3, #0
 8001818:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800181c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8001820:	f7fe be8e 	b.w	8000540 <_port_irq_epilogue>
 8001824:	40010400 	.word	0x40010400
 8001828:	20001324 	.word	0x20001324
 800182c:	20001374 	.word	0x20001374
 8001830:	20001428 	.word	0x20001428
 8001834:	20001384 	.word	0x20001384
 8001838:	20001394 	.word	0x20001394
 800183c:	200013a4 	.word	0x200013a4
 8001840:	200013b4 	.word	0x200013b4
	...

08001850 <VectorE0>:
/**
 * @brief   EXTI[10]...EXTI[15] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE0) {
 8001850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001852:	4b88      	ldr	r3, [pc, #544]	@ (8001a74 <VectorE0+0x224>)
 8001854:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8001856:	681d      	ldr	r5, [r3, #0]
 8001858:	4015      	ands	r5, r2
 800185a:	f405 427c 	and.w	r2, r5, #64512	@ 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;

  exti_serve_irq(pr, 10);
 800185e:	056e      	lsls	r6, r5, #21
  EXTI->PR = pr;
 8001860:	615a      	str	r2, [r3, #20]
  exti_serve_irq(pr, 10);
 8001862:	d529      	bpl.n	80018b8 <VectorE0+0x68>
 8001864:	4c84      	ldr	r4, [pc, #528]	@ (8001a78 <VectorE0+0x228>)
 8001866:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 800186a:	b113      	cbz	r3, 8001872 <VectorE0+0x22>
 800186c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8001870:	4798      	blx	r3
 8001872:	2320      	movs	r3, #32
 8001874:	f383 8811 	msr	BASEPRI, r3
 8001878:	4f80      	ldr	r7, [pc, #512]	@ (8001a7c <VectorE0+0x22c>)
  return (bool)(qp->next != qp);
 800187a:	f8d4 60a0 	ldr.w	r6, [r4, #160]	@ 0xa0
 800187e:	42be      	cmp	r6, r7
 8001880:	d017      	beq.n	80018b2 <VectorE0+0x62>
 8001882:	f04f 0c00 	mov.w	ip, #0
 8001886:	4630      	mov	r0, r6
  qp->next       = p->next;
 8001888:	6836      	ldr	r6, [r6, #0]
  } while (pqp->prio >= p->prio);
 800188a:	4b7d      	ldr	r3, [pc, #500]	@ (8001a80 <VectorE0+0x230>)
 800188c:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 800188e:	f8c4 60a0 	str.w	r6, [r4, #160]	@ 0xa0
  qp->next->prev = qp;
 8001892:	6077      	str	r7, [r6, #4]
 8001894:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
 8001898:	f880 c020 	strb.w	ip, [r0, #32]
    pqp = pqp->next;
 800189c:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	428a      	cmp	r2, r1
 80018a2:	d2fb      	bcs.n	800189c <VectorE0+0x4c>
  p->prev       = pqp->prev;
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	42be      	cmp	r6, r7
 80018a8:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 80018ac:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 80018ae:	6058      	str	r0, [r3, #4]
 80018b0:	d1e9      	bne.n	8001886 <VectorE0+0x36>
 80018b2:	2300      	movs	r3, #0
 80018b4:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 11);
 80018b8:	052c      	lsls	r4, r5, #20
 80018ba:	d529      	bpl.n	8001910 <VectorE0+0xc0>
 80018bc:	4c6e      	ldr	r4, [pc, #440]	@ (8001a78 <VectorE0+0x228>)
 80018be:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 80018c2:	b113      	cbz	r3, 80018ca <VectorE0+0x7a>
 80018c4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 80018c8:	4798      	blx	r3
 80018ca:	2320      	movs	r3, #32
 80018cc:	f383 8811 	msr	BASEPRI, r3
 80018d0:	4f6c      	ldr	r7, [pc, #432]	@ (8001a84 <VectorE0+0x234>)
  return (bool)(qp->next != qp);
 80018d2:	f8d4 60b0 	ldr.w	r6, [r4, #176]	@ 0xb0
 80018d6:	42be      	cmp	r6, r7
 80018d8:	d017      	beq.n	800190a <VectorE0+0xba>
 80018da:	f04f 0c00 	mov.w	ip, #0
 80018de:	4630      	mov	r0, r6
  qp->next       = p->next;
 80018e0:	6836      	ldr	r6, [r6, #0]
  } while (pqp->prio >= p->prio);
 80018e2:	4b67      	ldr	r3, [pc, #412]	@ (8001a80 <VectorE0+0x230>)
 80018e4:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 80018e6:	f8c4 60b0 	str.w	r6, [r4, #176]	@ 0xb0
  qp->next->prev = qp;
 80018ea:	6077      	str	r7, [r6, #4]
 80018ec:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
 80018f0:	f880 c020 	strb.w	ip, [r0, #32]
    pqp = pqp->next;
 80018f4:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	428a      	cmp	r2, r1
 80018fa:	d2fb      	bcs.n	80018f4 <VectorE0+0xa4>
  p->prev       = pqp->prev;
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	42be      	cmp	r6, r7
 8001900:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8001904:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001906:	6058      	str	r0, [r3, #4]
 8001908:	d1e9      	bne.n	80018de <VectorE0+0x8e>
 800190a:	2300      	movs	r3, #0
 800190c:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 12);
 8001910:	04e8      	lsls	r0, r5, #19
 8001912:	d529      	bpl.n	8001968 <VectorE0+0x118>
 8001914:	4c58      	ldr	r4, [pc, #352]	@ (8001a78 <VectorE0+0x228>)
 8001916:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 800191a:	b113      	cbz	r3, 8001922 <VectorE0+0xd2>
 800191c:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8001920:	4798      	blx	r3
 8001922:	2320      	movs	r3, #32
 8001924:	f383 8811 	msr	BASEPRI, r3
 8001928:	4f57      	ldr	r7, [pc, #348]	@ (8001a88 <VectorE0+0x238>)
  return (bool)(qp->next != qp);
 800192a:	f8d4 60c0 	ldr.w	r6, [r4, #192]	@ 0xc0
 800192e:	42be      	cmp	r6, r7
 8001930:	d017      	beq.n	8001962 <VectorE0+0x112>
 8001932:	f04f 0c00 	mov.w	ip, #0
 8001936:	4630      	mov	r0, r6
  qp->next       = p->next;
 8001938:	6836      	ldr	r6, [r6, #0]
  } while (pqp->prio >= p->prio);
 800193a:	4b51      	ldr	r3, [pc, #324]	@ (8001a80 <VectorE0+0x230>)
 800193c:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 800193e:	f8c4 60c0 	str.w	r6, [r4, #192]	@ 0xc0
  qp->next->prev = qp;
 8001942:	6077      	str	r7, [r6, #4]
 8001944:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
 8001948:	f880 c020 	strb.w	ip, [r0, #32]
    pqp = pqp->next;
 800194c:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	428a      	cmp	r2, r1
 8001952:	d2fb      	bcs.n	800194c <VectorE0+0xfc>
  p->prev       = pqp->prev;
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	42be      	cmp	r6, r7
 8001958:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800195c:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 800195e:	6058      	str	r0, [r3, #4]
 8001960:	d1e9      	bne.n	8001936 <VectorE0+0xe6>
 8001962:	2300      	movs	r3, #0
 8001964:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 13);
 8001968:	04a9      	lsls	r1, r5, #18
 800196a:	d529      	bpl.n	80019c0 <VectorE0+0x170>
 800196c:	4c42      	ldr	r4, [pc, #264]	@ (8001a78 <VectorE0+0x228>)
 800196e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 8001972:	b113      	cbz	r3, 800197a <VectorE0+0x12a>
 8001974:	f8d4 00dc 	ldr.w	r0, [r4, #220]	@ 0xdc
 8001978:	4798      	blx	r3
 800197a:	2320      	movs	r3, #32
 800197c:	f383 8811 	msr	BASEPRI, r3
 8001980:	4f42      	ldr	r7, [pc, #264]	@ (8001a8c <VectorE0+0x23c>)
  return (bool)(qp->next != qp);
 8001982:	f8d4 60d0 	ldr.w	r6, [r4, #208]	@ 0xd0
 8001986:	42be      	cmp	r6, r7
 8001988:	d017      	beq.n	80019ba <VectorE0+0x16a>
 800198a:	f04f 0c00 	mov.w	ip, #0
 800198e:	4630      	mov	r0, r6
  qp->next       = p->next;
 8001990:	6836      	ldr	r6, [r6, #0]
  } while (pqp->prio >= p->prio);
 8001992:	4b3b      	ldr	r3, [pc, #236]	@ (8001a80 <VectorE0+0x230>)
 8001994:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 8001996:	f8c4 60d0 	str.w	r6, [r4, #208]	@ 0xd0
  qp->next->prev = qp;
 800199a:	6077      	str	r7, [r6, #4]
 800199c:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
 80019a0:	f880 c020 	strb.w	ip, [r0, #32]
    pqp = pqp->next;
 80019a4:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	428a      	cmp	r2, r1
 80019aa:	d2fb      	bcs.n	80019a4 <VectorE0+0x154>
  p->prev       = pqp->prev;
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	42be      	cmp	r6, r7
 80019b0:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 80019b4:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 80019b6:	6058      	str	r0, [r3, #4]
 80019b8:	d1e9      	bne.n	800198e <VectorE0+0x13e>
 80019ba:	2300      	movs	r3, #0
 80019bc:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 14);
 80019c0:	046a      	lsls	r2, r5, #17
 80019c2:	d529      	bpl.n	8001a18 <VectorE0+0x1c8>
 80019c4:	4c2c      	ldr	r4, [pc, #176]	@ (8001a78 <VectorE0+0x228>)
 80019c6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 80019ca:	b113      	cbz	r3, 80019d2 <VectorE0+0x182>
 80019cc:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
 80019d0:	4798      	blx	r3
 80019d2:	2320      	movs	r3, #32
 80019d4:	f383 8811 	msr	BASEPRI, r3
 80019d8:	4f2d      	ldr	r7, [pc, #180]	@ (8001a90 <VectorE0+0x240>)
  return (bool)(qp->next != qp);
 80019da:	f8d4 60e0 	ldr.w	r6, [r4, #224]	@ 0xe0
 80019de:	42be      	cmp	r6, r7
 80019e0:	d017      	beq.n	8001a12 <VectorE0+0x1c2>
 80019e2:	f04f 0c00 	mov.w	ip, #0
 80019e6:	4630      	mov	r0, r6
  qp->next       = p->next;
 80019e8:	6836      	ldr	r6, [r6, #0]
  } while (pqp->prio >= p->prio);
 80019ea:	4b25      	ldr	r3, [pc, #148]	@ (8001a80 <VectorE0+0x230>)
 80019ec:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 80019ee:	f8c4 60e0 	str.w	r6, [r4, #224]	@ 0xe0
  qp->next->prev = qp;
 80019f2:	6077      	str	r7, [r6, #4]
 80019f4:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
 80019f8:	f880 c020 	strb.w	ip, [r0, #32]
    pqp = pqp->next;
 80019fc:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	428a      	cmp	r2, r1
 8001a02:	d2fb      	bcs.n	80019fc <VectorE0+0x1ac>
  p->prev       = pqp->prev;
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	42be      	cmp	r6, r7
 8001a08:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8001a0c:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001a0e:	6058      	str	r0, [r3, #4]
 8001a10:	d1e9      	bne.n	80019e6 <VectorE0+0x196>
 8001a12:	2300      	movs	r3, #0
 8001a14:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 15);
 8001a18:	042b      	lsls	r3, r5, #16
 8001a1a:	d527      	bpl.n	8001a6c <VectorE0+0x21c>
 8001a1c:	4c16      	ldr	r4, [pc, #88]	@ (8001a78 <VectorE0+0x228>)
 8001a1e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 8001a22:	b113      	cbz	r3, 8001a2a <VectorE0+0x1da>
 8001a24:	f8d4 00fc 	ldr.w	r0, [r4, #252]	@ 0xfc
 8001a28:	4798      	blx	r3
 8001a2a:	2320      	movs	r3, #32
 8001a2c:	f383 8811 	msr	BASEPRI, r3
 8001a30:	4e18      	ldr	r6, [pc, #96]	@ (8001a94 <VectorE0+0x244>)
  return (bool)(qp->next != qp);
 8001a32:	f8d4 50f0 	ldr.w	r5, [r4, #240]	@ 0xf0
 8001a36:	42b5      	cmp	r5, r6
 8001a38:	d015      	beq.n	8001a66 <VectorE0+0x216>
 8001a3a:	2700      	movs	r7, #0
 8001a3c:	4628      	mov	r0, r5
  qp->next       = p->next;
 8001a3e:	682d      	ldr	r5, [r5, #0]
  } while (pqp->prio >= p->prio);
 8001a40:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <VectorE0+0x230>)
 8001a42:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 8001a44:	f8c4 50f0 	str.w	r5, [r4, #240]	@ 0xf0
  qp->next->prev = qp;
 8001a48:	606e      	str	r6, [r5, #4]
 8001a4a:	6247      	str	r7, [r0, #36]	@ 0x24
 8001a4c:	f880 7020 	strb.w	r7, [r0, #32]
    pqp = pqp->next;
 8001a50:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	428a      	cmp	r2, r1
 8001a56:	d2fb      	bcs.n	8001a50 <VectorE0+0x200>
  p->prev       = pqp->prev;
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	42b5      	cmp	r5, r6
 8001a5c:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8001a60:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001a62:	6058      	str	r0, [r3, #4]
 8001a64:	d1ea      	bne.n	8001a3c <VectorE0+0x1ec>
 8001a66:	2300      	movs	r3, #0
 8001a68:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8001a6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8001a70:	f7fe bd66 	b.w	8000540 <_port_irq_epilogue>
 8001a74:	40010400 	.word	0x40010400
 8001a78:	20001324 	.word	0x20001324
 8001a7c:	200013c4 	.word	0x200013c4
 8001a80:	20001428 	.word	0x20001428
 8001a84:	200013d4 	.word	0x200013d4
 8001a88:	200013e4 	.word	0x200013e4
 8001a8c:	200013f4 	.word	0x200013f4
 8001a90:	20001404 	.word	0x20001404
 8001a94:	20001414 	.word	0x20001414
	...

08001aa0 <Vector8C>:
  tsr = canp->can->TSR;
 8001aa0:	f8df c090 	ldr.w	ip, [pc, #144]	@ 8001b34 <Vector8C+0x94>
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 8001aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  tsr = canp->can->TSR;
 8001aa6:	f8dc 2024 	ldr.w	r2, [ip, #36]	@ 0x24
 8001aaa:	6893      	ldr	r3, [r2, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 8001aac:	f013 0101 	ands.w	r1, r3, #1
  canp->can->TSR = tsr;
 8001ab0:	6093      	str	r3, [r2, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 8001ab2:	d004      	beq.n	8001abe <Vector8C+0x1e>
      flags |= CAN_MAILBOX_TO_MASK(1U) << 16U;
 8001ab4:	f013 0f0c 	tst.w	r3, #12
 8001ab8:	bf18      	it	ne
 8001aba:	f44f 3180 	movne.w	r1, #65536	@ 0x10000
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
 8001abe:	05d8      	lsls	r0, r3, #23
 8001ac0:	d506      	bpl.n	8001ad0 <Vector8C+0x30>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 8001ac2:	f413 6f40 	tst.w	r3, #3072	@ 0xc00
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
 8001ac6:	bf14      	ite	ne
 8001ac8:	f441 3100 	orrne.w	r1, r1, #131072	@ 0x20000
      flags |= CAN_MAILBOX_TO_MASK(2U);
 8001acc:	f041 0102 	orreq.w	r1, r1, #2
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
 8001ad0:	03da      	lsls	r2, r3, #15
 8001ad2:	d506      	bpl.n	8001ae2 <Vector8C+0x42>
    if ((tsr & (CAN_TSR_ALST2 | CAN_TSR_TERR2)) != 0U) {
 8001ad4:	f413 2f40 	tst.w	r3, #786432	@ 0xc0000
      flags |= CAN_MAILBOX_TO_MASK(3U) << 16U;
 8001ad8:	bf14      	ite	ne
 8001ada:	f441 2180 	orrne.w	r1, r1, #262144	@ 0x40000
      flags |= CAN_MAILBOX_TO_MASK(3U);
 8001ade:	f041 0104 	orreq.w	r1, r1, #4
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	f383 8811 	msr	BASEPRI, r3
 8001ae8:	4e13      	ldr	r6, [pc, #76]	@ (8001b38 <Vector8C+0x98>)
  return (bool)(qp->next != qp);
 8001aea:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8001aee:	42b5      	cmp	r5, r6
 8001af0:	d015      	beq.n	8001b1e <Vector8C+0x7e>
 8001af2:	2700      	movs	r7, #0
 8001af4:	462c      	mov	r4, r5
  qp->next       = p->next;
 8001af6:	682d      	ldr	r5, [r5, #0]
  } while (pqp->prio >= p->prio);
 8001af8:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <Vector8C+0x9c>)
 8001afa:	68a0      	ldr	r0, [r4, #8]
  qp->next       = p->next;
 8001afc:	f8cc 5008 	str.w	r5, [ip, #8]
  qp->next->prev = qp;
 8001b00:	606e      	str	r6, [r5, #4]
 8001b02:	6267      	str	r7, [r4, #36]	@ 0x24
 8001b04:	f884 7020 	strb.w	r7, [r4, #32]
    pqp = pqp->next;
 8001b08:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4282      	cmp	r2, r0
 8001b0e:	d2fb      	bcs.n	8001b08 <Vector8C+0x68>
  p->prev       = pqp->prev;
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	42b5      	cmp	r5, r6
 8001b14:	e9c4 3200 	strd	r3, r2, [r4]
  p->prev->next = p;
 8001b18:	6014      	str	r4, [r2, #0]
  pqp->prev     = p;
 8001b1a:	605c      	str	r4, [r3, #4]
 8001b1c:	d1ea      	bne.n	8001af4 <Vector8C+0x54>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001b1e:	4808      	ldr	r0, [pc, #32]	@ (8001b40 <Vector8C+0xa0>)
 8001b20:	f7fe fef6 	bl	8000910 <chEvtBroadcastFlagsI>
 8001b24:	2300      	movs	r3, #0
 8001b26:	f383 8811 	msr	BASEPRI, r3
}
 8001b2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8001b2e:	f7fe bd07 	b.w	8000540 <_port_irq_epilogue>
 8001b32:	bf00      	nop
 8001b34:	200012fc 	.word	0x200012fc
 8001b38:	20001304 	.word	0x20001304
 8001b3c:	20001428 	.word	0x20001428
 8001b40:	20001318 	.word	0x20001318
	...

08001b50 <Vector90>:
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 8001b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  rf0r = canp->can->RF0R;
 8001b54:	4f24      	ldr	r7, [pc, #144]	@ (8001be8 <Vector90+0x98>)
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	f8d3 800c 	ldr.w	r8, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 8001b5c:	f018 0f03 	tst.w	r8, #3
 8001b60:	d106      	bne.n	8001b70 <Vector90+0x20>
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 8001b62:	f018 0f10 	tst.w	r8, #16
 8001b66:	d12e      	bne.n	8001bc6 <Vector90+0x76>
}
 8001b68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 8001b6c:	f7fe bce8 	b.w	8000540 <_port_irq_epilogue>
    canp->can->IER &= ~CAN_IER_FMPIE0;
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	2120      	movs	r1, #32
 8001b74:	f022 0202 	bic.w	r2, r2, #2
 8001b78:	615a      	str	r2, [r3, #20]
 8001b7a:	f381 8811 	msr	BASEPRI, r1
  return (bool)(qp->next != qp);
 8001b7e:	463d      	mov	r5, r7
 8001b80:	f855 4f10 	ldr.w	r4, [r5, #16]!
 8001b84:	42ac      	cmp	r4, r5
 8001b86:	d014      	beq.n	8001bb2 <Vector90+0x62>
 8001b88:	2600      	movs	r6, #0
 8001b8a:	4620      	mov	r0, r4
  qp->next       = p->next;
 8001b8c:	6824      	ldr	r4, [r4, #0]
  } while (pqp->prio >= p->prio);
 8001b8e:	4b17      	ldr	r3, [pc, #92]	@ (8001bec <Vector90+0x9c>)
 8001b90:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 8001b92:	613c      	str	r4, [r7, #16]
  qp->next->prev = qp;
 8001b94:	6065      	str	r5, [r4, #4]
 8001b96:	6246      	str	r6, [r0, #36]	@ 0x24
 8001b98:	f880 6020 	strb.w	r6, [r0, #32]
    pqp = pqp->next;
 8001b9c:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	428a      	cmp	r2, r1
 8001ba2:	d2fb      	bcs.n	8001b9c <Vector90+0x4c>
  p->prev       = pqp->prev;
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	42ac      	cmp	r4, r5
 8001ba8:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8001bac:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001bae:	6058      	str	r0, [r3, #4]
 8001bb0:	d1eb      	bne.n	8001b8a <Vector90+0x3a>
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	480e      	ldr	r0, [pc, #56]	@ (8001bf0 <Vector90+0xa0>)
 8001bb6:	f7fe feab 	bl	8000910 <chEvtBroadcastFlagsI>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f383 8811 	msr	BASEPRI, r3
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 8001bc0:	f018 0f10 	tst.w	r8, #16
 8001bc4:	d0d0      	beq.n	8001b68 <Vector90+0x18>
    canp->can->RF0R = CAN_RF0R_FOVR0;
 8001bc6:	2110      	movs	r1, #16
 8001bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bca:	2320      	movs	r3, #32
 8001bcc:	60d1      	str	r1, [r2, #12]
 8001bce:	f383 8811 	msr	BASEPRI, r3
 8001bd2:	4808      	ldr	r0, [pc, #32]	@ (8001bf4 <Vector90+0xa4>)
 8001bd4:	f7fe fe9c 	bl	8000910 <chEvtBroadcastFlagsI>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f383 8811 	msr	BASEPRI, r3
}
 8001bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 8001be2:	f7fe bcad 	b.w	8000540 <_port_irq_epilogue>
 8001be6:	bf00      	nop
 8001be8:	200012fc 	.word	0x200012fc
 8001bec:	20001428 	.word	0x20001428
 8001bf0:	20001314 	.word	0x20001314
 8001bf4:	2000131c 	.word	0x2000131c
	...

08001c00 <Vector94>:
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 8001c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  rf1r = canp->can->RF1R;
 8001c04:	4f24      	ldr	r7, [pc, #144]	@ (8001c98 <Vector94+0x98>)
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	f8d3 8010 	ldr.w	r8, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 8001c0c:	f018 0f03 	tst.w	r8, #3
 8001c10:	d106      	bne.n	8001c20 <Vector94+0x20>
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 8001c12:	f018 0f10 	tst.w	r8, #16
 8001c16:	d12e      	bne.n	8001c76 <Vector94+0x76>
}
 8001c18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 8001c1c:	f7fe bc90 	b.w	8000540 <_port_irq_epilogue>
    canp->can->IER &= ~CAN_IER_FMPIE1;
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	2120      	movs	r1, #32
 8001c24:	f022 0210 	bic.w	r2, r2, #16
 8001c28:	615a      	str	r2, [r3, #20]
 8001c2a:	f381 8811 	msr	BASEPRI, r1
  return (bool)(qp->next != qp);
 8001c2e:	463d      	mov	r5, r7
 8001c30:	f855 4f10 	ldr.w	r4, [r5, #16]!
 8001c34:	42ac      	cmp	r4, r5
 8001c36:	d014      	beq.n	8001c62 <Vector94+0x62>
 8001c38:	2600      	movs	r6, #0
 8001c3a:	4620      	mov	r0, r4
  qp->next       = p->next;
 8001c3c:	6824      	ldr	r4, [r4, #0]
  } while (pqp->prio >= p->prio);
 8001c3e:	4b17      	ldr	r3, [pc, #92]	@ (8001c9c <Vector94+0x9c>)
 8001c40:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 8001c42:	613c      	str	r4, [r7, #16]
  qp->next->prev = qp;
 8001c44:	6065      	str	r5, [r4, #4]
 8001c46:	6246      	str	r6, [r0, #36]	@ 0x24
 8001c48:	f880 6020 	strb.w	r6, [r0, #32]
    pqp = pqp->next;
 8001c4c:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	428a      	cmp	r2, r1
 8001c52:	d2fb      	bcs.n	8001c4c <Vector94+0x4c>
  p->prev       = pqp->prev;
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	42ac      	cmp	r4, r5
 8001c58:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8001c5c:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001c5e:	6058      	str	r0, [r3, #4]
 8001c60:	d1eb      	bne.n	8001c3a <Vector94+0x3a>
 8001c62:	2102      	movs	r1, #2
 8001c64:	480e      	ldr	r0, [pc, #56]	@ (8001ca0 <Vector94+0xa0>)
 8001c66:	f7fe fe53 	bl	8000910 <chEvtBroadcastFlagsI>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f383 8811 	msr	BASEPRI, r3
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 8001c70:	f018 0f10 	tst.w	r8, #16
 8001c74:	d0d0      	beq.n	8001c18 <Vector94+0x18>
    canp->can->RF1R = CAN_RF1R_FOVR1;
 8001c76:	2110      	movs	r1, #16
 8001c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c7a:	2320      	movs	r3, #32
 8001c7c:	6111      	str	r1, [r2, #16]
 8001c7e:	f383 8811 	msr	BASEPRI, r3
 8001c82:	4808      	ldr	r0, [pc, #32]	@ (8001ca4 <Vector94+0xa4>)
 8001c84:	f7fe fe44 	bl	8000910 <chEvtBroadcastFlagsI>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f383 8811 	msr	BASEPRI, r3
}
 8001c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 8001c92:	f7fe bc55 	b.w	8000540 <_port_irq_epilogue>
 8001c96:	bf00      	nop
 8001c98:	200012fc 	.word	0x200012fc
 8001c9c:	20001428 	.word	0x20001428
 8001ca0:	20001314 	.word	0x20001314
 8001ca4:	2000131c 	.word	0x2000131c
	...

08001cb0 <Vector98>:
  msr = canp->can->MSR;
 8001cb0:	4818      	ldr	r0, [pc, #96]	@ (8001d14 <Vector98+0x64>)
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 8001cb2:	b508      	push	{r3, lr}
  msr = canp->can->MSR;
 8001cb4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001cb6:	685a      	ldr	r2, [r3, #4]
  canp->can->MSR = msr;
 8001cb8:	605a      	str	r2, [r3, #4]
  if (msr & CAN_MSR_ERRI) {
 8001cba:	0752      	lsls	r2, r2, #29
 8001cbc:	d40a      	bmi.n	8001cd4 <Vector98+0x24>
 8001cbe:	2320      	movs	r3, #32
 8001cc0:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001cc4:	4b14      	ldr	r3, [pc, #80]	@ (8001d18 <Vector98+0x68>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8001ccc:	d10e      	bne.n	8001cec <Vector98+0x3c>
 8001cce:	f383 8811 	msr	BASEPRI, r3
}
 8001cd2:	bd08      	pop	{r3, pc}
    uint32_t esr = canp->can->ESR;
 8001cd4:	6999      	ldr	r1, [r3, #24]
 8001cd6:	2320      	movs	r3, #32
 8001cd8:	f383 8811 	msr	BASEPRI, r3
 8001cdc:	4418      	add	r0, r3
 8001cde:	0409      	lsls	r1, r1, #16
 8001ce0:	f7fe fe16 	bl	8000910 <chEvtBroadcastFlagsI>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f383 8811 	msr	BASEPRI, r3
}
 8001cea:	e7e8      	b.n	8001cbe <Vector98+0xe>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001cec:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8001cf0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8001cf4:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001cf6:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001cf8:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8001cfc:	4a07      	ldr	r2, [pc, #28]	@ (8001d1c <Vector98+0x6c>)
 8001cfe:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 8001d00:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8001d02:	6889      	ldr	r1, [r1, #8]
 8001d04:	6892      	ldr	r2, [r2, #8]
 8001d06:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8001d08:	bf8c      	ite	hi
 8001d0a:	4a05      	ldrhi	r2, [pc, #20]	@ (8001d20 <Vector98+0x70>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8001d0c:	4a05      	ldrls	r2, [pc, #20]	@ (8001d24 <Vector98+0x74>)
 8001d0e:	619a      	str	r2, [r3, #24]
}
 8001d10:	bd08      	pop	{r3, pc}
 8001d12:	bf00      	nop
 8001d14:	200012fc 	.word	0x200012fc
 8001d18:	e000ed00 	.word	0xe000ed00
 8001d1c:	20001428 	.word	0x20001428
 8001d20:	08000273 	.word	0x08000273
 8001d24:	08000276 	.word	0x08000276
	...

08001d30 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8001d30:	b508      	push	{r3, lr}
 */
void dmaServeInterrupt(const stm32_dma_stream_t *dmastp) {
  uint32_t flags;
  uint32_t selfindex = (uint32_t)dmastp->selfindex;

  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001d32:	4b15      	ldr	r3, [pc, #84]	@ (8001d88 <Vector6C+0x58>)
 8001d34:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001d36:	689a      	ldr	r2, [r3, #8]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001d38:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001d3c:	4211      	tst	r1, r2
 8001d3e:	d005      	beq.n	8001d4c <Vector6C+0x1c>
    dmastp->dma->IFCR = flags << dmastp->shift;
    if (dma.streams[selfindex].func) {
 8001d40:	4a12      	ldr	r2, [pc, #72]	@ (8001d8c <Vector6C+0x5c>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001d42:	6059      	str	r1, [r3, #4]
    if (dma.streams[selfindex].func) {
 8001d44:	6893      	ldr	r3, [r2, #8]
 8001d46:	b10b      	cbz	r3, 8001d4c <Vector6C+0x1c>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001d48:	68d0      	ldr	r0, [r2, #12]
 8001d4a:	4798      	blx	r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001d4c:	2320      	movs	r3, #32
 8001d4e:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001d52:	4b0f      	ldr	r3, [pc, #60]	@ (8001d90 <Vector6C+0x60>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8001d5a:	d102      	bne.n	8001d62 <Vector6C+0x32>
 8001d5c:	f383 8811 	msr	BASEPRI, r3
}
 8001d60:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001d62:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8001d66:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8001d6a:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001d6c:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001d6e:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8001d72:	4a08      	ldr	r2, [pc, #32]	@ (8001d94 <Vector6C+0x64>)
 8001d74:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 8001d76:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8001d78:	6889      	ldr	r1, [r1, #8]
 8001d7a:	6892      	ldr	r2, [r2, #8]
 8001d7c:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8001d7e:	bf8c      	ite	hi
 8001d80:	4a05      	ldrhi	r2, [pc, #20]	@ (8001d98 <Vector6C+0x68>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8001d82:	4a06      	ldrls	r2, [pc, #24]	@ (8001d9c <Vector6C+0x6c>)
 8001d84:	619a      	str	r2, [r3, #24]
 8001d86:	bd08      	pop	{r3, pc}
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	200012bc 	.word	0x200012bc
 8001d90:	e000ed00 	.word	0xe000ed00
 8001d94:	20001428 	.word	0x20001428
 8001d98:	08000273 	.word	0x08000273
 8001d9c:	08000276 	.word	0x08000276

08001da0 <Vector70>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001da0:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <Vector70+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8001da2:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001da4:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001da6:	69da      	ldr	r2, [r3, #28]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001da8:	0909      	lsrs	r1, r1, #4
 8001daa:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001dae:	4211      	tst	r1, r2
 8001db0:	d006      	beq.n	8001dc0 <Vector70+0x20>
    if (dma.streams[selfindex].func) {
 8001db2:	4813      	ldr	r0, [pc, #76]	@ (8001e00 <Vector70+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001db4:	010a      	lsls	r2, r1, #4
    if (dma.streams[selfindex].func) {
 8001db6:	6904      	ldr	r4, [r0, #16]
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001db8:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 8001dba:	b10c      	cbz	r4, 8001dc0 <Vector70+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001dbc:	6940      	ldr	r0, [r0, #20]
 8001dbe:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001dc0:	2320      	movs	r3, #32
 8001dc2:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <Vector70+0x64>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8001dce:	d102      	bne.n	8001dd6 <Vector70+0x36>
 8001dd0:	f383 8811 	msr	BASEPRI, r3
}
 8001dd4:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001dd6:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8001dda:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8001dde:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001de0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001de2:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8001de6:	4a08      	ldr	r2, [pc, #32]	@ (8001e08 <Vector70+0x68>)
 8001de8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 8001dea:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8001dec:	6889      	ldr	r1, [r1, #8]
 8001dee:	6892      	ldr	r2, [r2, #8]
 8001df0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8001df2:	bf8c      	ite	hi
 8001df4:	4a05      	ldrhi	r2, [pc, #20]	@ (8001e0c <Vector70+0x6c>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8001df6:	4a06      	ldrls	r2, [pc, #24]	@ (8001e10 <Vector70+0x70>)
 8001df8:	619a      	str	r2, [r3, #24]
 8001dfa:	bd10      	pop	{r4, pc}
 8001dfc:	40020000 	.word	0x40020000
 8001e00:	200012bc 	.word	0x200012bc
 8001e04:	e000ed00 	.word	0xe000ed00
 8001e08:	20001428 	.word	0x20001428
 8001e0c:	08000273 	.word	0x08000273
 8001e10:	08000276 	.word	0x08000276
	...

08001e20 <Vector74>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001e20:	4b16      	ldr	r3, [pc, #88]	@ (8001e7c <Vector74+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8001e22:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001e24:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001e26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001e28:	0a09      	lsrs	r1, r1, #8
 8001e2a:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001e2e:	4211      	tst	r1, r2
 8001e30:	d006      	beq.n	8001e40 <Vector74+0x20>
    if (dma.streams[selfindex].func) {
 8001e32:	4813      	ldr	r0, [pc, #76]	@ (8001e80 <Vector74+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001e34:	020a      	lsls	r2, r1, #8
    if (dma.streams[selfindex].func) {
 8001e36:	6984      	ldr	r4, [r0, #24]
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001e38:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 8001e3a:	b10c      	cbz	r4, 8001e40 <Vector74+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001e3c:	69c0      	ldr	r0, [r0, #28]
 8001e3e:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001e40:	2320      	movs	r3, #32
 8001e42:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001e46:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <Vector74+0x64>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8001e4e:	d102      	bne.n	8001e56 <Vector74+0x36>
 8001e50:	f383 8811 	msr	BASEPRI, r3
}
 8001e54:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001e56:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8001e5a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8001e5e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001e60:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001e62:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8001e66:	4a08      	ldr	r2, [pc, #32]	@ (8001e88 <Vector74+0x68>)
 8001e68:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 8001e6a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8001e6c:	6889      	ldr	r1, [r1, #8]
 8001e6e:	6892      	ldr	r2, [r2, #8]
 8001e70:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8001e72:	bf8c      	ite	hi
 8001e74:	4a05      	ldrhi	r2, [pc, #20]	@ (8001e8c <Vector74+0x6c>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8001e76:	4a06      	ldrls	r2, [pc, #24]	@ (8001e90 <Vector74+0x70>)
 8001e78:	619a      	str	r2, [r3, #24]
 8001e7a:	bd10      	pop	{r4, pc}
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	200012bc 	.word	0x200012bc
 8001e84:	e000ed00 	.word	0xe000ed00
 8001e88:	20001428 	.word	0x20001428
 8001e8c:	08000273 	.word	0x08000273
 8001e90:	08000276 	.word	0x08000276
	...

08001ea0 <Vector78>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001ea0:	4b16      	ldr	r3, [pc, #88]	@ (8001efc <Vector78+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8001ea2:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001ea4:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001ea6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001ea8:	0b09      	lsrs	r1, r1, #12
 8001eaa:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001eae:	4211      	tst	r1, r2
 8001eb0:	d006      	beq.n	8001ec0 <Vector78+0x20>
    if (dma.streams[selfindex].func) {
 8001eb2:	4813      	ldr	r0, [pc, #76]	@ (8001f00 <Vector78+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001eb4:	030a      	lsls	r2, r1, #12
    if (dma.streams[selfindex].func) {
 8001eb6:	6a04      	ldr	r4, [r0, #32]
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001eb8:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 8001eba:	b10c      	cbz	r4, 8001ec0 <Vector78+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001ebc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8001ebe:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <Vector78+0x64>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8001ece:	d102      	bne.n	8001ed6 <Vector78+0x36>
 8001ed0:	f383 8811 	msr	BASEPRI, r3
}
 8001ed4:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001ed6:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8001eda:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8001ede:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001ee0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001ee2:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8001ee6:	4a08      	ldr	r2, [pc, #32]	@ (8001f08 <Vector78+0x68>)
 8001ee8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 8001eea:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8001eec:	6889      	ldr	r1, [r1, #8]
 8001eee:	6892      	ldr	r2, [r2, #8]
 8001ef0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8001ef2:	bf8c      	ite	hi
 8001ef4:	4a05      	ldrhi	r2, [pc, #20]	@ (8001f0c <Vector78+0x6c>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8001ef6:	4a06      	ldrls	r2, [pc, #24]	@ (8001f10 <Vector78+0x70>)
 8001ef8:	619a      	str	r2, [r3, #24]
 8001efa:	bd10      	pop	{r4, pc}
 8001efc:	40020000 	.word	0x40020000
 8001f00:	200012bc 	.word	0x200012bc
 8001f04:	e000ed00 	.word	0xe000ed00
 8001f08:	20001428 	.word	0x20001428
 8001f0c:	08000273 	.word	0x08000273
 8001f10:	08000276 	.word	0x08000276
	...

08001f20 <Vector7C>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001f20:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <Vector7C+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8001f22:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001f24:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001f26:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001f28:	0c09      	lsrs	r1, r1, #16
 8001f2a:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001f2e:	4211      	tst	r1, r2
 8001f30:	d006      	beq.n	8001f40 <Vector7C+0x20>
    if (dma.streams[selfindex].func) {
 8001f32:	4813      	ldr	r0, [pc, #76]	@ (8001f80 <Vector7C+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001f34:	040a      	lsls	r2, r1, #16
    if (dma.streams[selfindex].func) {
 8001f36:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001f38:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 8001f3a:	b10c      	cbz	r4, 8001f40 <Vector7C+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001f3c:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8001f3e:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001f40:	2320      	movs	r3, #32
 8001f42:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001f46:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <Vector7C+0x64>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8001f4e:	d102      	bne.n	8001f56 <Vector7C+0x36>
 8001f50:	f383 8811 	msr	BASEPRI, r3
}
 8001f54:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001f56:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8001f5a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8001f5e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001f60:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001f62:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8001f66:	4a08      	ldr	r2, [pc, #32]	@ (8001f88 <Vector7C+0x68>)
 8001f68:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 8001f6a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8001f6c:	6889      	ldr	r1, [r1, #8]
 8001f6e:	6892      	ldr	r2, [r2, #8]
 8001f70:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8001f72:	bf8c      	ite	hi
 8001f74:	4a05      	ldrhi	r2, [pc, #20]	@ (8001f8c <Vector7C+0x6c>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8001f76:	4a06      	ldrls	r2, [pc, #24]	@ (8001f90 <Vector7C+0x70>)
 8001f78:	619a      	str	r2, [r3, #24]
 8001f7a:	bd10      	pop	{r4, pc}
 8001f7c:	40020000 	.word	0x40020000
 8001f80:	200012bc 	.word	0x200012bc
 8001f84:	e000ed00 	.word	0xe000ed00
 8001f88:	20001428 	.word	0x20001428
 8001f8c:	08000273 	.word	0x08000273
 8001f90:	08000276 	.word	0x08000276
	...

08001fa0 <Vector80>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <Vector80+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8001fa2:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001fa4:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001fa6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001fa8:	0d09      	lsrs	r1, r1, #20
 8001faa:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001fae:	4211      	tst	r1, r2
 8001fb0:	d006      	beq.n	8001fc0 <Vector80+0x20>
    if (dma.streams[selfindex].func) {
 8001fb2:	4813      	ldr	r0, [pc, #76]	@ (8002000 <Vector80+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001fb4:	050a      	lsls	r2, r1, #20
    if (dma.streams[selfindex].func) {
 8001fb6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001fb8:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 8001fba:	b10c      	cbz	r4, 8001fc0 <Vector80+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001fbc:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8001fbe:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <Vector80+0x64>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8001fce:	d102      	bne.n	8001fd6 <Vector80+0x36>
 8001fd0:	f383 8811 	msr	BASEPRI, r3
}
 8001fd4:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001fd6:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8001fda:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8001fde:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001fe0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001fe2:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8001fe6:	4a08      	ldr	r2, [pc, #32]	@ (8002008 <Vector80+0x68>)
 8001fe8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 8001fea:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8001fec:	6889      	ldr	r1, [r1, #8]
 8001fee:	6892      	ldr	r2, [r2, #8]
 8001ff0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8001ff2:	bf8c      	ite	hi
 8001ff4:	4a05      	ldrhi	r2, [pc, #20]	@ (800200c <Vector80+0x6c>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8001ff6:	4a06      	ldrls	r2, [pc, #24]	@ (8002010 <Vector80+0x70>)
 8001ff8:	619a      	str	r2, [r3, #24]
 8001ffa:	bd10      	pop	{r4, pc}
 8001ffc:	40020000 	.word	0x40020000
 8002000:	200012bc 	.word	0x200012bc
 8002004:	e000ed00 	.word	0xe000ed00
 8002008:	20001428 	.word	0x20001428
 800200c:	08000273 	.word	0x08000273
 8002010:	08000276 	.word	0x08000276
	...

08002020 <Vector84>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002020:	4b17      	ldr	r3, [pc, #92]	@ (8002080 <Vector84+0x60>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8002022:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8002024:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8002026:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 800202a:	0e09      	lsrs	r1, r1, #24
 800202c:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8002030:	4211      	tst	r1, r2
 8002032:	d006      	beq.n	8002042 <Vector84+0x22>
    if (dma.streams[selfindex].func) {
 8002034:	4813      	ldr	r0, [pc, #76]	@ (8002084 <Vector84+0x64>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8002036:	060a      	lsls	r2, r1, #24
    if (dma.streams[selfindex].func) {
 8002038:	6b84      	ldr	r4, [r0, #56]	@ 0x38
    dmastp->dma->IFCR = flags << dmastp->shift;
 800203a:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 800203c:	b10c      	cbz	r4, 8002042 <Vector84+0x22>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 800203e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8002040:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002042:	2320      	movs	r3, #32
 8002044:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002048:	4b0f      	ldr	r3, [pc, #60]	@ (8002088 <Vector84+0x68>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8002050:	d102      	bne.n	8002058 <Vector84+0x38>
 8002052:	f383 8811 	msr	BASEPRI, r3
}
 8002056:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002058:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800205c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8002060:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8002062:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002064:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8002068:	4a08      	ldr	r2, [pc, #32]	@ (800208c <Vector84+0x6c>)
 800206a:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 800206c:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 800206e:	6889      	ldr	r1, [r1, #8]
 8002070:	6892      	ldr	r2, [r2, #8]
 8002072:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8002074:	bf8c      	ite	hi
 8002076:	4a06      	ldrhi	r2, [pc, #24]	@ (8002090 <Vector84+0x70>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8002078:	4a06      	ldrls	r2, [pc, #24]	@ (8002094 <Vector84+0x74>)
 800207a:	619a      	str	r2, [r3, #24]
 800207c:	bd10      	pop	{r4, pc}
 800207e:	bf00      	nop
 8002080:	40020000 	.word	0x40020000
 8002084:	200012bc 	.word	0x200012bc
 8002088:	e000ed00 	.word	0xe000ed00
 800208c:	20001428 	.word	0x20001428
 8002090:	08000273 	.word	0x08000273
 8002094:	08000276 	.word	0x08000276
	...

080020a0 <VectorB0>:
/**
 * @brief   Interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80020a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 80020a4:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
 80020a8:	693b      	ldr	r3, [r7, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 80020b0:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 80020b2:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 80020b4:	613a      	str	r2, [r7, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 80020b6:	d403      	bmi.n	80020c0 <VectorB0+0x20>
}
 80020b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 80020bc:	f7fe ba40 	b.w	8000540 <_port_irq_epilogue>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80020c0:	2520      	movs	r5, #32
 80020c2:	f385 8811 	msr	BASEPRI, r5
     than the interval between "now" and "lasttime".*/
  while (true) {
    vtfunc_t fn;

    /* First timer in the delta list.*/
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 80020c6:	4c2f      	ldr	r4, [pc, #188]	@ (8002184 <VectorB0+0xe4>)
  return (systime_t)STM32_ST_TIM->CNT;
 80020c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020ca:	69e3      	ldr	r3, [r4, #28]

    /* Delta between current time and last execution time.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 80020cc:	f8b4 c028 	ldrh.w	ip, [r4, #40]	@ 0x28
 80020d0:	b280      	uxth	r0, r0

    /* Loop break condition.
       Note that the list scan is limited by the delta list header having
       "vtlp->dlist.delta == (sysinterval_t)-1" which is greater than all
       deltas*/
    if (nowdelta < vtp->dlist.delta) {
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	eba0 010c 	sub.w	r1, r0, ip
 80020d8:	b289      	uxth	r1, r1
 80020da:	4291      	cmp	r1, r2
 80020dc:	d34e      	bcc.n	800217c <VectorB0+0xdc>
    /* Removing the timer from the list.*/
    (void) vt_dequeue(&vtp->dlist);

    /* Marking the timer as not armed.*/
    fn = vtp->func;
    vtp->func = NULL;
 80020de:	f04f 0800 	mov.w	r8, #0
 80020e2:	f104 061c 	add.w	r6, r4, #28
  return systime + (systime_t)interval;
 80020e6:	4462      	add	r2, ip
  dlp->prev->next = dlp->next;
 80020e8:	e9d3 1000 	ldrd	r1, r0, [r3]
    vtlp->lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
 80020ec:	8522      	strh	r2, [r4, #40]	@ 0x28
  dlp->prev->next = dlp->next;
 80020ee:	6001      	str	r1, [r0, #0]

    /* If the list becomes empty then the alarm is disabled.*/
    if (vt_is_empty(&vtlp->dlist)) {
 80020f0:	f8d4 c01c 	ldr.w	ip, [r4, #28]
    fn = vtp->func;
 80020f4:	68da      	ldr	r2, [r3, #12]
    if (vt_is_empty(&vtlp->dlist)) {
 80020f6:	45b4      	cmp	ip, r6
  dlp->next->prev = dlp->prev;
 80020f8:	6048      	str	r0, [r1, #4]
    vtp->func = NULL;
 80020fa:	f8c3 800c 	str.w	r8, [r3, #12]
  STM32_ST_TIM->DIER = 0U;
 80020fe:	bf08      	it	eq
 8002100:	f8c7 800c 	streq.w	r8, [r7, #12]
 8002104:	f388 8811 	msr	BASEPRI, r8

    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();
    fn(vtp->par);
 8002108:	6918      	ldr	r0, [r3, #16]
 800210a:	4790      	blx	r2
 800210c:	f385 8811 	msr	BASEPRI, r5
  return (systime_t)STM32_ST_TIM->CNT;
 8002110:	6a78      	ldr	r0, [r7, #36]	@ 0x24
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 8002112:	69e3      	ldr	r3, [r4, #28]
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8002114:	f8b4 c028 	ldrh.w	ip, [r4, #40]	@ 0x28
 8002118:	b280      	uxth	r0, r0
    if (nowdelta < vtp->dlist.delta) {
 800211a:	689a      	ldr	r2, [r3, #8]
  return (sysinterval_t)((systime_t)(end - start));
 800211c:	eba0 010c 	sub.w	r1, r0, ip
 8002120:	b289      	uxth	r1, r1
 8002122:	4291      	cmp	r1, r2
 8002124:	d2df      	bcs.n	80020e6 <VectorB0+0x46>
    chSysLockFromISR();
  }

  /* If the list is empty, nothing else to do.*/
  if (vt_is_empty(&vtlp->dlist)) {
 8002126:	42b3      	cmp	r3, r6
 8002128:	d021      	beq.n	800216e <VectorB0+0xce>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
  vtp->dlist.delta -= nowdelta;
 800212a:	1a52      	subs	r2, r2, r1
  else if (delay > (sysinterval_t)TIME_MAX_SYSTIME) {
 800212c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002130:	428a      	cmp	r2, r1
  vtlp->lasttime += nowdelta;
 8002132:	8520      	strh	r0, [r4, #40]	@ 0x28
  vtp->dlist.delta -= nowdelta;
 8002134:	609a      	str	r2, [r3, #8]
  else if (delay > (sysinterval_t)TIME_MAX_SYSTIME) {
 8002136:	bf28      	it	cs
 8002138:	460a      	movcs	r2, r1
 800213a:	2a02      	cmp	r2, #2
 800213c:	bf38      	it	cc
 800213e:	2202      	movcc	r2, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002140:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
  return systime + (systime_t)interval;
 8002144:	1883      	adds	r3, r0, r2
 8002146:	b29b      	uxth	r3, r3
 8002148:	6363      	str	r3, [r4, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800214a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800214c:	b29b      	uxth	r3, r3
  return (sysinterval_t)((systime_t)(end - start));
 800214e:	1a18      	subs	r0, r3, r0
 8002150:	b280      	uxth	r0, r0
    if (nowdelta < delay) {
 8002152:	4282      	cmp	r2, r0
 8002154:	d80b      	bhi.n	800216e <VectorB0+0xce>
 8002156:	2102      	movs	r1, #2
    currdelta += (sysinterval_t)1;
 8002158:	461a      	mov	r2, r3
 800215a:	3101      	adds	r1, #1
  return systime + (systime_t)interval;
 800215c:	440b      	add	r3, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800215e:	b29b      	uxth	r3, r3
 8002160:	6363      	str	r3, [r4, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8002162:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002164:	b29b      	uxth	r3, r3
  return (sysinterval_t)((systime_t)(end - start));
 8002166:	1a9a      	subs	r2, r3, r2
 8002168:	b292      	uxth	r2, r2
    if (nowdelta < delay) {
 800216a:	428a      	cmp	r2, r1
 800216c:	d2f4      	bcs.n	8002158 <VectorB0+0xb8>
 800216e:	2300      	movs	r3, #0
 8002170:	f383 8811 	msr	BASEPRI, r3
}
 8002174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 8002178:	f7fe b9e2 	b.w	8000540 <_port_irq_epilogue>
 800217c:	f104 061c 	add.w	r6, r4, #28
 8002180:	e7d1      	b.n	8002126 <VectorB0+0x86>
 8002182:	bf00      	nop
 8002184:	20001428 	.word	0x20001428
	...

08002190 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8002190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = sdp->usart;
 8002194:	4c8b      	ldr	r4, [pc, #556]	@ (80023c4 <VectorD4+0x234>)
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8002196:	b083      	sub	sp, #12
  USART_TypeDef *u = sdp->usart;
 8002198:	f8d4 a074 	ldr.w	sl, [r4, #116]	@ 0x74
  uint16_t cr1 = u->CR1;
 800219c:	f8da 900c 	ldr.w	r9, [sl, #12]
  uint16_t sr = u->SR;
 80021a0:	f8da 3000 	ldr.w	r3, [sl]
  if (sr & USART_SR_LBD) {
 80021a4:	05d9      	lsls	r1, r3, #23
  uint16_t sr = u->SR;
 80021a6:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 80021a8:	f100 809d 	bmi.w	80022e6 <VectorD4+0x156>
 80021ac:	2320      	movs	r3, #32
 80021ae:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80021b2:	f015 0f2f 	tst.w	r5, #47	@ 0x2f
 80021b6:	d05e      	beq.n	8002276 <VectorD4+0xe6>
  chEvtBroadcastFlagsI(esp, flags);
 80021b8:	4f83      	ldr	r7, [pc, #524]	@ (80023c8 <VectorD4+0x238>)
 80021ba:	f04f 0800 	mov.w	r8, #0
  if (ch_queue_notempty(&tqp->queue)) {
 80021be:	f107 0608 	add.w	r6, r7, #8
 80021c2:	e00b      	b.n	80021dc <VectorD4+0x4c>
    if (sr & USART_SR_RXNE)
 80021c4:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80021c6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80021ca:	f894 b078 	ldrb.w	fp, [r4, #120]	@ 0x78
    if (sr & USART_SR_RXNE)
 80021ce:	d420      	bmi.n	8002212 <VectorD4+0x82>
    sr = u->SR;
 80021d0:	f8da 3000 	ldr.w	r3, [sl]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80021d4:	f013 0f2f 	tst.w	r3, #47	@ 0x2f
    sr = u->SR;
 80021d8:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80021da:	d04c      	beq.n	8002276 <VectorD4+0xe6>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80021dc:	072a      	lsls	r2, r5, #28
 80021de:	d0f1      	beq.n	80021c4 <VectorD4+0x34>
  if (sr & USART_SR_PE)
 80021e0:	f345 0100 	sbfx	r1, r5, #0, #1
  if (sr & USART_SR_ORE)
 80021e4:	f3c5 03c0 	ubfx	r3, r5, #3, #1
  if (sr & USART_SR_PE)
 80021e8:	f001 0120 	and.w	r1, r1, #32
 80021ec:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
  if (sr & USART_SR_FE)
 80021f0:	07ab      	lsls	r3, r5, #30
    sts |= SD_FRAMING_ERROR;
 80021f2:	bf48      	it	mi
 80021f4:	f041 0140 	orrmi.w	r1, r1, #64	@ 0x40
  if (sr & USART_SR_NE)
 80021f8:	0768      	lsls	r0, r5, #29
    sts |= SD_NOISE_ERROR;
 80021fa:	bf48      	it	mi
 80021fc:	f441 7180 	orrmi.w	r1, r1, #256	@ 0x100
 8002200:	4638      	mov	r0, r7
 8002202:	f7fe fb85 	bl	8000910 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8002206:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8002208:	f8da 3004 	ldr.w	r3, [sl, #4]
 800220c:	f894 b078 	ldrb.w	fp, [r4, #120]	@ 0x78
    if (sr & USART_SR_RXNE)
 8002210:	d5de      	bpl.n	80021d0 <VectorD4+0x40>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8002212:	6962      	ldr	r2, [r4, #20]
 8002214:	2a00      	cmp	r2, #0
 8002216:	d048      	beq.n	80022aa <VectorD4+0x11a>
  if (!iqIsFullI(iqp)) {
 8002218:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 800221c:	428a      	cmp	r2, r1
 800221e:	d04e      	beq.n	80022be <VectorD4+0x12e>
    iqp->q_counter++;
 8002220:	6961      	ldr	r1, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8002222:	ea0b 0b03 	and.w	fp, fp, r3
 8002226:	3101      	adds	r1, #1
    *iqp->q_wrptr++ = b;
 8002228:	1c53      	adds	r3, r2, #1
 800222a:	6223      	str	r3, [r4, #32]
    iqp->q_counter++;
 800222c:	6161      	str	r1, [r4, #20]
    *iqp->q_wrptr++ = b;
 800222e:	f882 b000 	strb.w	fp, [r2]
    if (iqp->q_wrptr >= iqp->q_top) {
 8002232:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002236:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 8002238:	bf28      	it	cs
 800223a:	69a3      	ldrcs	r3, [r4, #24]
  return (bool)(qp->next != qp);
 800223c:	68e1      	ldr	r1, [r4, #12]
 800223e:	bf28      	it	cs
 8002240:	6223      	strcs	r3, [r4, #32]
 8002242:	42b1      	cmp	r1, r6
 8002244:	d0c4      	beq.n	80021d0 <VectorD4+0x40>
  qp->next       = p->next;
 8002246:	680b      	ldr	r3, [r1, #0]
  } while (pqp->prio >= p->prio);
 8002248:	6888      	ldr	r0, [r1, #8]
  qp->next       = p->next;
 800224a:	60e3      	str	r3, [r4, #12]
  qp->next->prev = qp;
 800224c:	605e      	str	r6, [r3, #4]
  } while (pqp->prio >= p->prio);
 800224e:	4b5f      	ldr	r3, [pc, #380]	@ (80023cc <VectorD4+0x23c>)
 8002250:	f8c1 8024 	str.w	r8, [r1, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8002254:	f881 8020 	strb.w	r8, [r1, #32]
    pqp = pqp->next;
 8002258:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	4282      	cmp	r2, r0
 800225e:	d2fb      	bcs.n	8002258 <VectorD4+0xc8>
  p->prev       = pqp->prev;
 8002260:	685a      	ldr	r2, [r3, #4]
  p->next       = pqp;
 8002262:	600b      	str	r3, [r1, #0]
  p->prev       = pqp->prev;
 8002264:	604a      	str	r2, [r1, #4]
  p->prev->next = p;
 8002266:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8002268:	6059      	str	r1, [r3, #4]
    sr = u->SR;
 800226a:	f8da 3000 	ldr.w	r3, [sl]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800226e:	f013 0f2f 	tst.w	r3, #47	@ 0x2f
    sr = u->SR;
 8002272:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002274:	d1b2      	bne.n	80021dc <VectorD4+0x4c>
 8002276:	2300      	movs	r3, #0
 8002278:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800227c:	f019 0f80 	tst.w	r9, #128	@ 0x80
 8002280:	d001      	beq.n	8002286 <VectorD4+0xf6>
 8002282:	062a      	lsls	r2, r5, #24
 8002284:	d454      	bmi.n	8002330 <VectorD4+0x1a0>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8002286:	f019 0f40 	tst.w	r9, #64	@ 0x40
 800228a:	d001      	beq.n	8002290 <VectorD4+0x100>
 800228c:	066b      	lsls	r3, r5, #25
 800228e:	d41f      	bmi.n	80022d0 <VectorD4+0x140>
 8002290:	2320      	movs	r3, #32
 8002292:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002296:	4b4e      	ldr	r3, [pc, #312]	@ (80023d0 <VectorD4+0x240>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 800229e:	d132      	bne.n	8002306 <VectorD4+0x176>
 80022a0:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
}
 80022a4:	b003      	add	sp, #12
 80022a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022aa:	2104      	movs	r1, #4
 80022ac:	4846      	ldr	r0, [pc, #280]	@ (80023c8 <VectorD4+0x238>)
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	f7fe fb2e 	bl	8000910 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 80022b4:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 80022b8:	428a      	cmp	r2, r1
 80022ba:	9b01      	ldr	r3, [sp, #4]
 80022bc:	d1b0      	bne.n	8002220 <VectorD4+0x90>
 80022be:	6961      	ldr	r1, [r4, #20]
 80022c0:	2900      	cmp	r1, #0
 80022c2:	d0ad      	beq.n	8002220 <VectorD4+0x90>
 80022c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022c8:	483f      	ldr	r0, [pc, #252]	@ (80023c8 <VectorD4+0x238>)
 80022ca:	f7fe fb21 	bl	8000910 <chEvtBroadcastFlagsI>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
 80022ce:	e77f      	b.n	80021d0 <VectorD4+0x40>
 80022d0:	2320      	movs	r3, #32
 80022d2:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 80022d6:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 80022da:	429a      	cmp	r2, r3
 80022dc:	d056      	beq.n	800238c <VectorD4+0x1fc>
 80022de:	2300      	movs	r3, #0
 80022e0:	f383 8811 	msr	BASEPRI, r3
}
 80022e4:	e7d4      	b.n	8002290 <VectorD4+0x100>
 80022e6:	2320      	movs	r3, #32
 80022e8:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 80022ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022f0:	1d20      	adds	r0, r4, #4
 80022f2:	f7fe fb0d 	bl	8000910 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 80022f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80022fa:	2300      	movs	r3, #0
 80022fc:	f8ca 2000 	str.w	r2, [sl]
 8002300:	f383 8811 	msr	BASEPRI, r3
}
 8002304:	e752      	b.n	80021ac <VectorD4+0x1c>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002306:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800230a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 800230e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8002310:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002312:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8002316:	4a2d      	ldr	r2, [pc, #180]	@ (80023cc <VectorD4+0x23c>)
 8002318:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 800231a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 800231c:	6889      	ldr	r1, [r1, #8]
 800231e:	6892      	ldr	r2, [r2, #8]
 8002320:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8002322:	bf8c      	ite	hi
 8002324:	4a2b      	ldrhi	r2, [pc, #172]	@ (80023d4 <VectorD4+0x244>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8002326:	4a2c      	ldrls	r2, [pc, #176]	@ (80023d8 <VectorD4+0x248>)
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	b003      	add	sp, #12
 800232c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002330:	2320      	movs	r3, #32
 8002332:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 8002336:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 800233a:	429a      	cmp	r2, r3
 800233c:	d034      	beq.n	80023a8 <VectorD4+0x218>
    oqp->q_counter++;
 800233e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002340:	3201      	adds	r2, #1
 8002342:	63a2      	str	r2, [r4, #56]	@ 0x38
    b = *oqp->q_rdptr++;
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	64a2      	str	r2, [r4, #72]	@ 0x48
 8002348:	781e      	ldrb	r6, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 800234a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800234c:	429a      	cmp	r2, r3
 800234e:	d301      	bcc.n	8002354 <VectorD4+0x1c4>
      oqp->q_rdptr = oqp->q_buffer;
 8002350:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002352:	64a3      	str	r3, [r4, #72]	@ 0x48
  return (bool)(qp->next != qp);
 8002354:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002356:	4b21      	ldr	r3, [pc, #132]	@ (80023dc <VectorD4+0x24c>)
 8002358:	4299      	cmp	r1, r3
 800235a:	d011      	beq.n	8002380 <VectorD4+0x1f0>
 800235c:	2200      	movs	r2, #0
  qp->next       = p->next;
 800235e:	6808      	ldr	r0, [r1, #0]
 8002360:	6320      	str	r0, [r4, #48]	@ 0x30
  qp->next->prev = qp;
 8002362:	6043      	str	r3, [r0, #4]
  } while (pqp->prio >= p->prio);
 8002364:	6888      	ldr	r0, [r1, #8]
 8002366:	4b19      	ldr	r3, [pc, #100]	@ (80023cc <VectorD4+0x23c>)
 8002368:	624a      	str	r2, [r1, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 800236a:	f881 2020 	strb.w	r2, [r1, #32]
    pqp = pqp->next;
 800236e:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	4282      	cmp	r2, r0
 8002374:	d2fb      	bcs.n	800236e <VectorD4+0x1de>
  p->prev       = pqp->prev;
 8002376:	685a      	ldr	r2, [r3, #4]
  p->next       = pqp;
 8002378:	600b      	str	r3, [r1, #0]
  p->prev       = pqp->prev;
 800237a:	604a      	str	r2, [r1, #4]
  p->prev->next = p;
 800237c:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 800237e:	6059      	str	r1, [r3, #4]
      u->DR = b;
 8002380:	f8ca 6004 	str.w	r6, [sl, #4]
 8002384:	2300      	movs	r3, #0
 8002386:	f383 8811 	msr	BASEPRI, r3
 800238a:	e77c      	b.n	8002286 <VectorD4+0xf6>
    if (oqIsEmptyI(&sdp->oqueue)) {
 800238c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0a5      	beq.n	80022de <VectorD4+0x14e>
  chEvtBroadcastFlagsI(esp, flags);
 8002392:	2110      	movs	r1, #16
 8002394:	480c      	ldr	r0, [pc, #48]	@ (80023c8 <VectorD4+0x238>)
 8002396:	f7fe fabb 	bl	8000910 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 800239a:	f64f 73bf 	movw	r3, #65471	@ 0xffbf
 800239e:	ea09 0303 	and.w	r3, r9, r3
 80023a2:	f8ca 300c 	str.w	r3, [sl, #12]
 80023a6:	e79a      	b.n	80022de <VectorD4+0x14e>
  if (!oqIsEmptyI(oqp)) {
 80023a8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80023aa:	2a00      	cmp	r2, #0
 80023ac:	d0c7      	beq.n	800233e <VectorD4+0x1ae>
 80023ae:	2108      	movs	r1, #8
 80023b0:	4805      	ldr	r0, [pc, #20]	@ (80023c8 <VectorD4+0x238>)
 80023b2:	f7fe faad 	bl	8000910 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 80023b6:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 80023ba:	ea09 0303 	and.w	r3, r9, r3
 80023be:	f8ca 300c 	str.w	r3, [sl, #12]
 80023c2:	e7df      	b.n	8002384 <VectorD4+0x1f4>
 80023c4:	20001240 	.word	0x20001240
 80023c8:	20001244 	.word	0x20001244
 80023cc:	20001428 	.word	0x20001428
 80023d0:	e000ed00 	.word	0xe000ed00
 80023d4:	08000273 	.word	0x08000273
 80023d8:	08000276 	.word	0x08000276
 80023dc:	20001270 	.word	0x20001270

080023e0 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80023e0:	4a17      	ldr	r2, [pc, #92]	@ (8002440 <__early_init+0x60>)
 80023e2:	6813      	ldr	r3, [r2, #0]
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80023ea:	6813      	ldr	r3, [r2, #0]
 80023ec:	0799      	lsls	r1, r3, #30
 80023ee:	d5fc      	bpl.n	80023ea <__early_init+0xa>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80023f0:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80023f2:	6813      	ldr	r3, [r2, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80023f4:	4912      	ldr	r1, [pc, #72]	@ (8002440 <__early_init+0x60>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80023f6:	f003 03f9 	and.w	r3, r3, #249	@ 0xf9
 80023fa:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80023fc:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80023fe:	684b      	ldr	r3, [r1, #4]
 8002400:	f013 0f0c 	tst.w	r3, #12
 8002404:	d1fb      	bne.n	80023fe <__early_init+0x1e>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8002406:	684b      	ldr	r3, [r1, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002408:	4a0d      	ldr	r2, [pc, #52]	@ (8002440 <__early_init+0x60>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 800240a:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 800240e:	604b      	str	r3, [r1, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8002410:	680b      	ldr	r3, [r1, #0]
 8002412:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002416:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002418:	6813      	ldr	r3, [r2, #0]
 800241a:	019b      	lsls	r3, r3, #6
 800241c:	d5fc      	bpl.n	8002418 <__early_init+0x38>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800241e:	2011      	movs	r0, #17
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8002420:	4908      	ldr	r1, [pc, #32]	@ (8002444 <__early_init+0x64>)
  FLASH->ACR = STM32_FLASHBITS;
 8002422:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <__early_init+0x68>)
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8002424:	6051      	str	r1, [r2, #4]
  FLASH->ACR = STM32_FLASHBITS;
 8002426:	6018      	str	r0, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8002428:	6853      	ldr	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800242a:	4905      	ldr	r1, [pc, #20]	@ (8002440 <__early_init+0x60>)
  RCC->CFGR |= STM32_SW;
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002432:	684b      	ldr	r3, [r1, #4]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b08      	cmp	r3, #8
 800243a:	d1fa      	bne.n	8002432 <__early_init+0x52>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	00686400 	.word	0x00686400
 8002448:	40022000 	.word	0x40022000
 800244c:	00000000 	.word	0x00000000

08002450 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8002450:	b410      	push	{r4}
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
  currp->state = CH_STATE_CURRENT;
 8002452:	f04f 0c01 	mov.w	ip, #1
  tp->state = CH_STATE_READY;
 8002456:	2400      	movs	r4, #0
  thread_t *otp = currp;
 8002458:	4a0d      	ldr	r2, [pc, #52]	@ (8002490 <chSchDoReschedule+0x40>)
  ch_priority_queue_t *p = pqp->next;
 800245a:	6810      	ldr	r0, [r2, #0]
 800245c:	6991      	ldr	r1, [r2, #24]
  pqp->next       = p->next;
 800245e:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8002460:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8002462:	f880 c020 	strb.w	ip, [r0, #32]
  tp->state = CH_STATE_READY;
 8002466:	f881 4020 	strb.w	r4, [r1, #32]
  pqp->next       = p->next;
 800246a:	6013      	str	r3, [r2, #0]
  } while (pqp->prio > p->prio);
 800246c:	688c      	ldr	r4, [r1, #8]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 800246e:	6190      	str	r0, [r2, #24]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	42a2      	cmp	r2, r4
 8002474:	d903      	bls.n	800247e <chSchDoReschedule+0x2e>
    pqp = pqp->next;
 8002476:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio > p->prio);
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	42a2      	cmp	r2, r4
 800247c:	d8fb      	bhi.n	8002476 <chSchDoReschedule+0x26>
  p->prev       = pqp->prev;
 800247e:	685a      	ldr	r2, [r3, #4]
  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 8002480:	bc10      	pop	{r4}
 8002482:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 8002486:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8002488:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
 800248a:	f7fd bee1 	b.w	8000250 <_port_switch>
 800248e:	bf00      	nop
 8002490:	20001428 	.word	0x20001428
	...

080024a0 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 80024a0:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 80024a2:	4d21      	ldr	r5, [pc, #132]	@ (8002528 <chMtxUnlock+0x88>)
 80024a4:	2320      	movs	r3, #32
 80024a6:	69ac      	ldr	r4, [r5, #24]
 80024a8:	f383 8811 	msr	BASEPRI, r3
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    currtp->mtxlist = mp->next;

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80024ac:	6802      	ldr	r2, [r0, #0]
    currtp->mtxlist = mp->next;
 80024ae:	68c3      	ldr	r3, [r0, #12]
    if (chMtxQueueNotEmptyS(mp)) {
 80024b0:	4282      	cmp	r2, r0
    currtp->mtxlist = mp->next;
 80024b2:	63a3      	str	r3, [r4, #56]	@ 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 80024b4:	d032      	beq.n	800251c <chMtxUnlock+0x7c>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = currtp->realprio;
 80024b6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
      lmp = currtp->mtxlist;
      while (lmp != NULL) {
 80024b8:	b14b      	cbz	r3, 80024ce <chMtxUnlock+0x2e>
  return (bool)(qp->next != qp);
 80024ba:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80024bc:	4293      	cmp	r3, r2
 80024be:	d003      	beq.n	80024c8 <chMtxUnlock+0x28>
 80024c0:	6892      	ldr	r2, [r2, #8]
 80024c2:	4291      	cmp	r1, r2
 80024c4:	bf38      	it	cc
 80024c6:	4611      	movcc	r1, r2
            (((thread_t *)lmp->queue.next)->hdr.pqueue.prio > newprio)) {
          newprio = ((thread_t *)lmp->queue.next)->hdr.pqueue.prio;
        }
        lmp = lmp->next;
 80024c8:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f5      	bne.n	80024ba <chMtxUnlock+0x1a>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      currtp->hdr.pqueue.prio = newprio;
 80024ce:	60a1      	str	r1, [r4, #8]
  ch_queue_t *p = qp->next;
 80024d0:	6801      	ldr	r1, [r0, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = (thread_t *)ch_queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 80024d2:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
  qp->next       = p->next;
 80024d4:	680b      	ldr	r3, [r1, #0]
  } while (pqp->prio >= p->prio);
 80024d6:	688c      	ldr	r4, [r1, #8]
  qp->next       = p->next;
 80024d8:	6003      	str	r3, [r0, #0]
  qp->next->prev = qp;
 80024da:	6058      	str	r0, [r3, #4]
 80024dc:	e9c0 1202 	strd	r1, r2, [r0, #8]
  tp->state = CH_STATE_READY;
 80024e0:	2200      	movs	r2, #0
  } while (pqp->prio >= p->prio);
 80024e2:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <chMtxUnlock+0x88>)
      tp->mtxlist = mp;
 80024e4:	6388      	str	r0, [r1, #56]	@ 0x38
 80024e6:	f881 2020 	strb.w	r2, [r1, #32]
    pqp = pqp->next;
 80024ea:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	42a2      	cmp	r2, r4
 80024f0:	d2fb      	bcs.n	80024ea <chMtxUnlock+0x4a>
  p->prev       = pqp->prev;
 80024f2:	685a      	ldr	r2, [r3, #4]
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.pqueue) > currp->hdr.pqueue.prio;
 80024f4:	69a8      	ldr	r0, [r5, #24]
 80024f6:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 80024fa:	6011      	str	r1, [r2, #0]
 80024fc:	682a      	ldr	r2, [r5, #0]
  pqp->prev     = p;
 80024fe:	6059      	str	r1, [r3, #4]
  if (chSchIsRescRequiredI()) {
 8002500:	6892      	ldr	r2, [r2, #8]
 8002502:	6883      	ldr	r3, [r0, #8]
 8002504:	429a      	cmp	r2, r3
 8002506:	d803      	bhi.n	8002510 <chMtxUnlock+0x70>
 8002508:	2300      	movs	r3, #0
 800250a:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 800250e:	bd38      	pop	{r3, r4, r5, pc}
    chSchDoRescheduleAhead();
 8002510:	f7ff ff9e 	bl	8002450 <chSchDoReschedule>
 8002514:	2300      	movs	r3, #0
 8002516:	f383 8811 	msr	BASEPRI, r3
 800251a:	bd38      	pop	{r3, r4, r5, pc}
      mp->owner = NULL;
 800251c:	2300      	movs	r3, #0
 800251e:	6093      	str	r3, [r2, #8]
 8002520:	2300      	movs	r3, #0
 8002522:	f383 8811 	msr	BASEPRI, r3
}
 8002526:	bd38      	pop	{r3, r4, r5, pc}
 8002528:	20001428 	.word	0x20001428
 800252c:	00000000 	.word	0x00000000

08002530 <_ZL11CanRxThreadPv>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8002530:	4c63      	ldr	r4, [pc, #396]	@ (80026c0 <_ZL11CanRxThreadPv+0x190>)
    },
};

static THD_WORKING_AREA(waCanRxThread, 128);
static THD_FUNCTION(CanRxThread, p)
{
 8002532:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 8002536:	4a63      	ldr	r2, [pc, #396]	@ (80026c4 <_ZL11CanRxThreadPv+0x194>)
 8002538:	69a3      	ldr	r3, [r4, #24]
 800253a:	4e63      	ldr	r6, [pc, #396]	@ (80026c8 <_ZL11CanRxThreadPv+0x198>)
 800253c:	f04f 0920 	mov.w	r9, #32
  otp->state = newstate;
 8002540:	2704      	movs	r7, #4
  currp->state = CH_STATE_CURRENT;
 8002542:	2501      	movs	r5, #1
 8002544:	f04f 0a00 	mov.w	sl, #0
 8002548:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 80026cc <_ZL11CanRxThreadPv+0x19c>
 800254c:	619a      	str	r2, [r3, #24]
 800254e:	f1a6 0b10 	sub.w	fp, r6, #16
#else
  (void)name;
#endif
}
 8002552:	e061      	b.n	8002618 <_ZL11CanRxThreadPv+0xe8>
 */
bool can_lld_is_rx_nonempty(CANDriver *canp, canmbx_t mailbox) {

  switch (mailbox) {
  case CAN_ANY_MAILBOX:
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
 8002554:	f8db 3024 	ldr.w	r3, [fp, #36]	@ 0x24
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	0792      	lsls	r2, r2, #30
 800255c:	d102      	bne.n	8002564 <_ZL11CanRxThreadPv+0x34>
            (canp->can->RF1R & CAN_RF1R_FMP1) != 0);
 800255e:	691a      	ldr	r2, [r3, #16]
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
 8002560:	0790      	lsls	r0, r2, #30
 8002562:	d05f      	beq.n	8002624 <_ZL11CanRxThreadPv+0xf4>
                     canmbx_t mailbox,
                     CANRxFrame *crfp) {
  uint32_t rir, rdtr;

  if (mailbox == CAN_ANY_MAILBOX) {
    if ((canp->can->RF0R & CAN_RF0R_FMP0) != 0)
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	0791      	lsls	r1, r2, #30
 8002568:	d174      	bne.n	8002654 <_ZL11CanRxThreadPv+0x124>
      mailbox = 1;
    else if ((canp->can->RF1R & CAN_RF1R_FMP1) != 0)
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	0792      	lsls	r2, r2, #30
 800256e:	d037      	beq.n	80025e0 <_ZL11CanRxThreadPv+0xb0>
    if ((canp->can->RF0R & CAN_RF0R_FMP0) == 0)
      canp->can->IER |= CAN_IER_FMPIE0;
    break;
  case 2:
    /* Fetches the message.*/
    rir  = canp->can->sFIFOMailBox[1].RIR;
 8002570:	f8d3 11c0 	ldr.w	r1, [r3, #448]	@ 0x1c0
    rdtr = canp->can->sFIFOMailBox[1].RDTR;
 8002574:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
    crfp->data32[0] = canp->can->sFIFOMailBox[1].RDLR;
 8002578:	f8d3 01c8 	ldr.w	r0, [r3, #456]	@ 0x1c8
 800257c:	f8c8 0010 	str.w	r0, [r8, #16]
    crfp->data32[1] = canp->can->sFIFOMailBox[1].RDHR;
 8002580:	f8d3 01cc 	ldr.w	r0, [r3, #460]	@ 0x1cc
 8002584:	f8c8 0014 	str.w	r0, [r8, #20]

    /* Releases the mailbox.*/
    canp->can->RF1R = CAN_RF1R_RFOM1;
 8002588:	f8c3 9010 	str.w	r9, [r3, #16]

    /* If the queue is empty re-enables the interrupt in order to generate
       events again.*/
    if ((canp->can->RF1R & CAN_RF1R_FMP1) == 0)
 800258c:	6918      	ldr	r0, [r3, #16]
 800258e:	0780      	lsls	r0, r0, #30
 8002590:	d103      	bne.n	800259a <_ZL11CanRxThreadPv+0x6a>
      canp->can->IER |= CAN_IER_FMPIE1;
 8002592:	6958      	ldr	r0, [r3, #20]
 8002594:	f040 0010 	orr.w	r0, r0, #16
 8002598:	6158      	str	r0, [r3, #20]
    /* Should not happen, do nothing.*/
    return;
  }

  /* Decodes the various fields in the RX frame.*/
  crfp->RTR = (rir & CAN_RI0R_RTR) >> 1;
 800259a:	f898 0004 	ldrb.w	r0, [r8, #4]
 800259e:	f3c1 0340 	ubfx	r3, r1, #1, #1
 80025a2:	f3c1 0c80 	ubfx	ip, r1, #2, #1
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	f020 0030 	bic.w	r0, r0, #48	@ 0x30
 80025ac:	ea43 134c 	orr.w	r3, r3, ip, lsl #5
 80025b0:	4303      	orrs	r3, r0
  crfp->IDE = (rir & CAN_RI0R_IDE) >> 2;
  if (crfp->IDE)
 80025b2:	0698      	lsls	r0, r3, #26
  crfp->RTR = (rir & CAN_RI0R_RTR) >> 1;
 80025b4:	f888 3004 	strb.w	r3, [r8, #4]
  if (crfp->IDE)
 80025b8:	d562      	bpl.n	8002680 <_ZL11CanRxThreadPv+0x150>
    crfp->EID = rir >> 3;
 80025ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80025be:	08c9      	lsrs	r1, r1, #3
 80025c0:	f361 031c 	bfi	r3, r1, #0, #29
 80025c4:	f8c8 3008 	str.w	r3, [r8, #8]
  else
    crfp->SID = rir >> 21;
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 80025c8:	f898 3004 	ldrb.w	r3, [r8, #4]
  crfp->FMI = (uint8_t)(rdtr >> 8);
 80025cc:	0a11      	lsrs	r1, r2, #8
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 80025ce:	f362 0303 	bfi	r3, r2, #0, #4
  crfp->TIME = (uint16_t)(rdtr >> 16);
 80025d2:	0c12      	lsrs	r2, r2, #16
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 80025d4:	f888 3004 	strb.w	r3, [r8, #4]
  crfp->FMI = (uint8_t)(rdtr >> 8);
 80025d8:	f888 1000 	strb.w	r1, [r8]
  crfp->TIME = (uint16_t)(rdtr >> 16);
 80025dc:	f8a8 2002 	strh.w	r2, [r8, #2]
 80025e0:	f38a 8811 	msr	BASEPRI, sl
 80025e4:	f389 8811 	msr	BASEPRI, r9
  chMtxLockS(mp);
 80025e8:	4839      	ldr	r0, [pc, #228]	@ (80026d0 <_ZL11CanRxThreadPv+0x1a0>)
 80025ea:	f7fe fd81 	bl	80010f0 <chMtxLockS>
 80025ee:	f38a 8811 	msr	BASEPRI, sl
    {
        msg_t msg = canReceive(&CAND1, CAN_ANY_MAILBOX, &canRxMsg, TIME_INFINITE);
        if (msg != MSG_OK)
            continue;
        chMtxLock(&digitalOutputsMutex);
        if (canRxMsg.DLC > 0)
 80025f2:	f898 3004 	ldrb.w	r3, [r8, #4]
 80025f6:	071b      	lsls	r3, r3, #28
 80025f8:	d003      	beq.n	8002602 <_ZL11CanRxThreadPv+0xd2>
        {
            if (canRxMsg.data8[0])
 80025fa:	f898 1010 	ldrb.w	r1, [r8, #16]
 80025fe:	2900      	cmp	r1, #0
 8002600:	d146      	bne.n	8002690 <_ZL11CanRxThreadPv+0x160>
                        CZYSC_BIT(digitalOutputs, i);
                    }
                }
            }
        }
        chMtxUnlock(&digitalOutputsMutex);
 8002602:	4833      	ldr	r0, [pc, #204]	@ (80026d0 <_ZL11CanRxThreadPv+0x1a0>)
 8002604:	f7ff ff4c 	bl	80024a0 <chMtxUnlock>
 8002608:	f389 8811 	msr	BASEPRI, r9
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800260c:	21c8      	movs	r1, #200	@ 0xc8
 800260e:	2008      	movs	r0, #8
 8002610:	f7fe face 	bl	8000bb0 <chSchGoSleepTimeoutS>
 8002614:	f38a 8811 	msr	BASEPRI, sl
 8002618:	f389 8811 	msr	BASEPRI, r9
  osalSysLock();
  osalDbgAssert((canp->state == CAN_READY) || (canp->state == CAN_SLEEP),
                "invalid state");

  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_rx_nonempty(canp, mailbox)) {
 800261c:	f89b 3000 	ldrb.w	r3, [fp]
 8002620:	2b05      	cmp	r3, #5
 8002622:	d197      	bne.n	8002554 <_ZL11CanRxThreadPv+0x24>
  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 8002624:	69a1      	ldr	r1, [r4, #24]
  p->prev       = qp->prev;
 8002626:	f8db 3014 	ldr.w	r3, [fp, #20]
  ch_priority_queue_t *p = pqp->next;
 800262a:	6820      	ldr	r0, [r4, #0]
  p->prev       = qp->prev;
 800262c:	e9c1 6300 	strd	r6, r3, [r1]
  p->prev->next = p;
 8002630:	6019      	str	r1, [r3, #0]
  otp->state = newstate;
 8002632:	f881 7020 	strb.w	r7, [r1, #32]
  pqp->next       = p->next;
 8002636:	6803      	ldr	r3, [r0, #0]
  qp->prev      = p;
 8002638:	f8cb 1014 	str.w	r1, [fp, #20]
  pqp->next->prev = pqp;
 800263c:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 800263e:	f880 5020 	strb.w	r5, [r0, #32]
  pqp->next       = p->next;
 8002642:	6023      	str	r3, [r4, #0]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 8002644:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 8002646:	f7fd fe03 	bl	8000250 <_port_switch>
  return currp->u.rdymsg;
 800264a:	69a3      	ldr	r3, [r4, #24]
  /*lint -restore*/
    msg_t msg = osalThreadEnqueueTimeoutS(&canp->rxqueue, timeout);
    if (msg != MSG_OK) {
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0e4      	beq.n	800261c <_ZL11CanRxThreadPv+0xec>
 8002652:	e7df      	b.n	8002614 <_ZL11CanRxThreadPv+0xe4>
    rir  = canp->can->sFIFOMailBox[0].RIR;
 8002654:	f8d3 11b0 	ldr.w	r1, [r3, #432]	@ 0x1b0
    rdtr = canp->can->sFIFOMailBox[0].RDTR;
 8002658:	f8d3 21b4 	ldr.w	r2, [r3, #436]	@ 0x1b4
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
 800265c:	f8d3 01b8 	ldr.w	r0, [r3, #440]	@ 0x1b8
 8002660:	f8c8 0010 	str.w	r0, [r8, #16]
    crfp->data32[1] = canp->can->sFIFOMailBox[0].RDHR;
 8002664:	f8d3 01bc 	ldr.w	r0, [r3, #444]	@ 0x1bc
 8002668:	f8c8 0014 	str.w	r0, [r8, #20]
    canp->can->RF0R = CAN_RF0R_RFOM0;
 800266c:	f8c3 900c 	str.w	r9, [r3, #12]
    if ((canp->can->RF0R & CAN_RF0R_FMP0) == 0)
 8002670:	68d8      	ldr	r0, [r3, #12]
 8002672:	0780      	lsls	r0, r0, #30
 8002674:	d191      	bne.n	800259a <_ZL11CanRxThreadPv+0x6a>
      canp->can->IER |= CAN_IER_FMPIE0;
 8002676:	6958      	ldr	r0, [r3, #20]
 8002678:	f040 0002 	orr.w	r0, r0, #2
 800267c:	6158      	str	r0, [r3, #20]
 800267e:	e78c      	b.n	800259a <_ZL11CanRxThreadPv+0x6a>
    crfp->SID = rir >> 21;
 8002680:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8002684:	0d49      	lsrs	r1, r1, #21
 8002686:	f361 030a 	bfi	r3, r1, #0, #11
 800268a:	f8a8 3008 	strh.w	r3, [r8, #8]
 800268e:	e79b      	b.n	80025c8 <_ZL11CanRxThreadPv+0x98>
                for (uint8_t i = 0; i < 4; i++)
 8002690:	4b10      	ldr	r3, [pc, #64]	@ (80026d4 <_ZL11CanRxThreadPv+0x1a4>)
                    if (bits & (1 << i)) // Check if bit 'i' is set
 8002692:	f001 010f 	and.w	r1, r1, #15
 8002696:	7818      	ldrb	r0, [r3, #0]
 8002698:	2300      	movs	r3, #0
 800269a:	fa41 f203 	asr.w	r2, r1, r3
                        USTAW_BIT(digitalOutputs, i);
 800269e:	fa05 fc03 	lsl.w	ip, r5, r3
                    if (bits & (1 << i)) // Check if bit 'i' is set
 80026a2:	f012 0f01 	tst.w	r2, #1
                for (uint8_t i = 0; i < 4; i++)
 80026a6:	f103 0301 	add.w	r3, r3, #1
                        USTAW_BIT(digitalOutputs, i);
 80026aa:	ea40 020c 	orr.w	r2, r0, ip
 80026ae:	bf14      	ite	ne
 80026b0:	b2d0      	uxtbne	r0, r2
                        CZYSC_BIT(digitalOutputs, i);
 80026b2:	ea20 000c 	biceq.w	r0, r0, ip
                for (uint8_t i = 0; i < 4; i++)
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d1ef      	bne.n	800269a <_ZL11CanRxThreadPv+0x16a>
 80026ba:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <_ZL11CanRxThreadPv+0x1a4>)
 80026bc:	7018      	strb	r0, [r3, #0]
 80026be:	e7a0      	b.n	8002602 <_ZL11CanRxThreadPv+0xd2>
 80026c0:	20001428 	.word	0x20001428
 80026c4:	08003530 	.word	0x08003530
 80026c8:	2000130c 	.word	0x2000130c
 80026cc:	200009a0 	.word	0x200009a0
 80026d0:	20000830 	.word	0x20000830
 80026d4:	20000998 	.word	0x20000998
	...

080026e0 <_ZL11CanTxThreadPv>:
static THD_FUNCTION(CanTxThread, p)
{
    (void)p;
    chRegSetThreadName("can_TX_Thread");
    canTxMsg1.IDE = CAN_IDE_STD;
    canTxMsg1.SID = canVr.txID1;
 80026e0:	4e46      	ldr	r6, [pc, #280]	@ (80027fc <_ZL11CanTxThreadPv+0x11c>)
{
 80026e2:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
    canTxMsg1.RTR = CAN_RTR_DATA;
    canTxMsg1.DLC = 5;
 80026e6:	7833      	ldrb	r3, [r6, #0]
    canTxMsg2.IDE = CAN_IDE_STD;
    canTxMsg2.SID = canVr.txID2;
 80026e8:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 8002800 <_ZL11CanTxThreadPv+0x120>
    canTxMsg1.DLC = 5;
 80026ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026f0:	f043 0305 	orr.w	r3, r3, #5
 80026f4:	7033      	strb	r3, [r6, #0]
    canTxMsg2.RTR = CAN_RTR_DATA;
    canTxMsg2.DLC = 8;
 80026f6:	f898 3000 	ldrb.w	r3, [r8]
    canTxMsg3.IDE = CAN_IDE_STD;
    canTxMsg3.SID = canVr.txID3;
 80026fa:	4f42      	ldr	r7, [pc, #264]	@ (8002804 <_ZL11CanTxThreadPv+0x124>)
    canTxMsg2.DLC = 8;
 80026fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002700:	f043 0308 	orr.w	r3, r3, #8
 8002704:	f888 3000 	strb.w	r3, [r8]
    canTxMsg3.RTR = CAN_RTR_DATA;
    canTxMsg3.DLC = 8;
 8002708:	783b      	ldrb	r3, [r7, #0]
    canTxMsg4.IDE = CAN_IDE_STD;
    canTxMsg4.SID = canVr.txID4;
    canTxMsg4.RTR = CAN_RTR_DATA;
    canTxMsg4.DLC = 4;
 800270a:	493f      	ldr	r1, [pc, #252]	@ (8002808 <_ZL11CanTxThreadPv+0x128>)
    canTxMsg3.DLC = 8;
 800270c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002710:	f043 0308 	orr.w	r3, r3, #8
 8002714:	703b      	strb	r3, [r7, #0]
    canTxMsg4.DLC = 4;
 8002716:	780b      	ldrb	r3, [r1, #0]
  ch.rlist.current->name = name;
 8002718:	4a3c      	ldr	r2, [pc, #240]	@ (800280c <_ZL11CanTxThreadPv+0x12c>)
 800271a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800271e:	f043 0304 	orr.w	r3, r3, #4
 8002722:	700b      	strb	r3, [r1, #0]
    canTxMsg1.SID = canVr.txID1;
 8002724:	88b3      	ldrh	r3, [r6, #4]
 8002726:	6992      	ldr	r2, [r2, #24]
 8002728:	f36f 030a 	bfc	r3, #0, #11
 800272c:	80b3      	strh	r3, [r6, #4]
    canTxMsg2.SID = canVr.txID2;
 800272e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8002732:	f8df b0dc 	ldr.w	fp, [pc, #220]	@ 8002810 <_ZL11CanTxThreadPv+0x130>
 8002736:	f36f 030a 	bfc	r3, #0, #11
 800273a:	f8a8 3004 	strh.w	r3, [r8, #4]
    canTxMsg3.SID = canVr.txID3;
 800273e:	88bb      	ldrh	r3, [r7, #4]
 8002740:	f8df a0d0 	ldr.w	sl, [pc, #208]	@ 8002814 <_ZL11CanTxThreadPv+0x134>
 8002744:	f36f 030a 	bfc	r3, #0, #11
 8002748:	80bb      	strh	r3, [r7, #4]
    canTxMsg4.SID = canVr.txID4;
 800274a:	888b      	ldrh	r3, [r1, #4]
 800274c:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 8002818 <_ZL11CanTxThreadPv+0x138>
 8002750:	f36f 030a 	bfc	r3, #0, #11
 8002754:	808b      	strh	r3, [r1, #4]
 8002756:	4b31      	ldr	r3, [pc, #196]	@ (800281c <_ZL11CanTxThreadPv+0x13c>)
 8002758:	6193      	str	r3, [r2, #24]
 800275a:	2520      	movs	r5, #32
 800275c:	f385 8811 	msr	BASEPRI, r5
 8002760:	482f      	ldr	r0, [pc, #188]	@ (8002820 <_ZL11CanTxThreadPv+0x140>)
 8002762:	f7fe fcc5 	bl	80010f0 <chMtxLockS>
 8002766:	2400      	movs	r4, #0
 8002768:	f384 8811 	msr	BASEPRI, r4
    while (true)
    {
        chMtxLock(&temperatureMutex);
        canTxMsg1.data16[0] = temperature1;
 800276c:	f8bb 3000 	ldrh.w	r3, [fp]
        canTxMsg1.data16[1] = temperature2;
        chMtxUnlock(&temperatureMutex);
 8002770:	482b      	ldr	r0, [pc, #172]	@ (8002820 <_ZL11CanTxThreadPv+0x140>)
        canTxMsg1.data16[0] = temperature1;
 8002772:	8133      	strh	r3, [r6, #8]
        canTxMsg1.data16[1] = temperature2;
 8002774:	f8ba 3000 	ldrh.w	r3, [sl]
 8002778:	8173      	strh	r3, [r6, #10]
        chMtxUnlock(&temperatureMutex);
 800277a:	f7ff fe91 	bl	80024a0 <chMtxUnlock>
 800277e:	f385 8811 	msr	BASEPRI, r5
 8002782:	4828      	ldr	r0, [pc, #160]	@ (8002824 <_ZL11CanTxThreadPv+0x144>)
 8002784:	f7fe fcb4 	bl	80010f0 <chMtxLockS>
 8002788:	f384 8811 	msr	BASEPRI, r4

        chMtxLock(&digitalInputsMutex);
        canTxMsg1.data8[4] = digitalInputs[0];
 800278c:	4b26      	ldr	r3, [pc, #152]	@ (8002828 <_ZL11CanTxThreadPv+0x148>)
        chMtxUnlock(&digitalInputsMutex);
 800278e:	4825      	ldr	r0, [pc, #148]	@ (8002824 <_ZL11CanTxThreadPv+0x144>)
        canTxMsg1.data8[4] = digitalInputs[0];
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	7333      	strb	r3, [r6, #12]
        chMtxUnlock(&digitalInputsMutex);
 8002794:	f7ff fe84 	bl	80024a0 <chMtxUnlock>
 8002798:	f385 8811 	msr	BASEPRI, r5
 800279c:	4823      	ldr	r0, [pc, #140]	@ (800282c <_ZL11CanTxThreadPv+0x14c>)
 800279e:	f7fe fca7 	bl	80010f0 <chMtxLockS>
 80027a2:	f384 8811 	msr	BASEPRI, r4

        chMtxLock(&adcSampleMutex);
        canTxMsg2.data16[0] = adc1_samples[0];
 80027a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
        canTxMsg2.data16[3] = adc1_samples[3];
        canTxMsg3.data16[0] = adc1_samples[4];
        canTxMsg3.data16[1] = adc1_samples[5];
        canTxMsg3.data16[2] = adc1_samples[6];
        canTxMsg3.data16[3] = adc1_samples[7];
        canTxMsg4.data16[0] = adc1_samples[8];
 80027aa:	4a17      	ldr	r2, [pc, #92]	@ (8002808 <_ZL11CanTxThreadPv+0x128>)
        canTxMsg2.data16[0] = adc1_samples[0];
 80027ac:	f8c8 300c 	str.w	r3, [r8, #12]
 80027b0:	f8d9 3000 	ldr.w	r3, [r9]
        canTxMsg4.data16[1] = adc1_samples[9];
        chMtxUnlock(&adcSampleMutex);
 80027b4:	481d      	ldr	r0, [pc, #116]	@ (800282c <_ZL11CanTxThreadPv+0x14c>)
        canTxMsg2.data16[0] = adc1_samples[0];
 80027b6:	f8c8 3008 	str.w	r3, [r8, #8]
        canTxMsg3.data16[0] = adc1_samples[4];
 80027ba:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80027c4:	60bb      	str	r3, [r7, #8]
        canTxMsg4.data16[0] = adc1_samples[8];
 80027c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80027ca:	6093      	str	r3, [r2, #8]
        chMtxUnlock(&adcSampleMutex);
 80027cc:	f7ff fe68 	bl	80024a0 <chMtxUnlock>

        canTransmit(&CAND1, CAN_ANY_MAILBOX, &canTxMsg1, TIME_INFINITE);
 80027d0:	480a      	ldr	r0, [pc, #40]	@ (80027fc <_ZL11CanTxThreadPv+0x11c>)
 80027d2:	f7fe fd6d 	bl	80012b0 <canTransmitTimeout.constprop.0.isra.0>
        canTransmit(&CAND1, CAN_ANY_MAILBOX, &canTxMsg2, TIME_INFINITE);
 80027d6:	480a      	ldr	r0, [pc, #40]	@ (8002800 <_ZL11CanTxThreadPv+0x120>)
 80027d8:	f7fe fd6a 	bl	80012b0 <canTransmitTimeout.constprop.0.isra.0>
        canTransmit(&CAND1, CAN_ANY_MAILBOX, &canTxMsg3, TIME_INFINITE);
 80027dc:	4809      	ldr	r0, [pc, #36]	@ (8002804 <_ZL11CanTxThreadPv+0x124>)
 80027de:	f7fe fd67 	bl	80012b0 <canTransmitTimeout.constprop.0.isra.0>
        canTransmit(&CAND1, CAN_ANY_MAILBOX, &canTxMsg4, TIME_INFINITE);
 80027e2:	4809      	ldr	r0, [pc, #36]	@ (8002808 <_ZL11CanTxThreadPv+0x128>)
 80027e4:	f7fe fd64 	bl	80012b0 <canTransmitTimeout.constprop.0.isra.0>
 80027e8:	f385 8811 	msr	BASEPRI, r5
 80027ec:	21c8      	movs	r1, #200	@ 0xc8
 80027ee:	2008      	movs	r0, #8
 80027f0:	f7fe f9de 	bl	8000bb0 <chSchGoSleepTimeoutS>
 80027f4:	f384 8811 	msr	BASEPRI, r4
    while (true)
 80027f8:	e7af      	b.n	800275a <_ZL11CanTxThreadPv+0x7a>
 80027fa:	bf00      	nop
 80027fc:	20000988 	.word	0x20000988
 8002800:	20000978 	.word	0x20000978
 8002804:	20000968 	.word	0x20000968
 8002808:	20000958 	.word	0x20000958
 800280c:	20001428 	.word	0x20001428
 8002810:	20000950 	.word	0x20000950
 8002814:	2000094e 	.word	0x2000094e
 8002818:	20000938 	.word	0x20000938
 800281c:	08003540 	.word	0x08003540
 8002820:	20000820 	.word	0x20000820
 8002824:	20000810 	.word	0x20000810
 8002828:	2000094c 	.word	0x2000094c
 800282c:	20000800 	.word	0x20000800

08002830 <_ZL9OutThreadPv>:
 8002830:	4b25      	ldr	r3, [pc, #148]	@ (80028c8 <_ZL9OutThreadPv+0x98>)
 8002832:	4a26      	ldr	r2, [pc, #152]	@ (80028cc <_ZL9OutThreadPv+0x9c>)
 8002834:	699b      	ldr	r3, [r3, #24]

uint8_t digitalOutputs[(4 + 7) / 8] = {0}; // Definition and initialization

static THD_WORKING_AREA(waOutThread, 128);
static THD_FUNCTION(OutThread, p)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	4d25      	ldr	r5, [pc, #148]	@ (80028d0 <_ZL9OutThreadPv+0xa0>)
 800283a:	4f26      	ldr	r7, [pc, #152]	@ (80028d4 <_ZL9OutThreadPv+0xa4>)
            case 1:
                if(ODCZYTAJ_BIT(digitalOutputs, i)) palSetPad(GPIOC, 13);
                else palClearPad(GPIOC, 13);
                break;
            case 2:
                if(ODCZYTAJ_BIT(digitalOutputs, i)) palSetPad(GPIOC, 14);
 800283c:	4c26      	ldr	r4, [pc, #152]	@ (80028d8 <_ZL9OutThreadPv+0xa8>)
                else palClearPad(GPIOD, 0);
 800283e:	4e27      	ldr	r6, [pc, #156]	@ (80028dc <_ZL9OutThreadPv+0xac>)
 8002840:	619a      	str	r2, [r3, #24]
 8002842:	2320      	movs	r3, #32
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	4628      	mov	r0, r5
 800284a:	f7fe fc51 	bl	80010f0 <chMtxLockS>
 800284e:	2300      	movs	r3, #0
 8002850:	f383 8811 	msr	BASEPRI, r3
        for(uint8_t i = 0; i < 4; i++)
 8002854:	b2da      	uxtb	r2, r3
            switch (i)
 8002856:	2a02      	cmp	r2, #2
                if(ODCZYTAJ_BIT(digitalOutputs, i)) palSetPad(GPIOD, 0);
 8002858:	7839      	ldrb	r1, [r7, #0]
            switch (i)
 800285a:	d00c      	beq.n	8002876 <_ZL9OutThreadPv+0x46>
 800285c:	2a03      	cmp	r2, #3
 800285e:	d016      	beq.n	800288e <_ZL9OutThreadPv+0x5e>
 8002860:	2a01      	cmp	r2, #1
 8002862:	d00e      	beq.n	8002882 <_ZL9OutThreadPv+0x52>
                if(ODCZYTAJ_BIT(digitalOutputs, i)) palSetPad(GPIOD, 0);
 8002864:	2201      	movs	r2, #1
 8002866:	07c8      	lsls	r0, r1, #31
 8002868:	bf4c      	ite	mi
 800286a:	6132      	strmi	r2, [r6, #16]
                else palClearPad(GPIOD, 0);
 800286c:	6172      	strpl	r2, [r6, #20]
        for(uint8_t i = 0; i < 4; i++)
 800286e:	3301      	adds	r3, #1
 8002870:	b2da      	uxtb	r2, r3
            switch (i)
 8002872:	2a02      	cmp	r2, #2
 8002874:	d1f2      	bne.n	800285c <_ZL9OutThreadPv+0x2c>
                if(ODCZYTAJ_BIT(digitalOutputs, i)) palSetPad(GPIOC, 14);
 8002876:	0748      	lsls	r0, r1, #29
 8002878:	d51e      	bpl.n	80028b8 <_ZL9OutThreadPv+0x88>
 800287a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800287e:	6122      	str	r2, [r4, #16]
 8002880:	e7f5      	b.n	800286e <_ZL9OutThreadPv+0x3e>
                if(ODCZYTAJ_BIT(digitalOutputs, i)) palSetPad(GPIOC, 13);
 8002882:	0788      	lsls	r0, r1, #30
 8002884:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002888:	d4f9      	bmi.n	800287e <_ZL9OutThreadPv+0x4e>
                else palClearPad(GPIOC, 13);
 800288a:	6162      	str	r2, [r4, #20]
 800288c:	e7ef      	b.n	800286e <_ZL9OutThreadPv+0x3e>
                else palClearPad(GPIOC, 14);
                break;
            case 3:
                if(ODCZYTAJ_BIT(digitalOutputs, i)) palSetPad(GPIOC, 15);
 800288e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002892:	070a      	lsls	r2, r1, #28
 8002894:	bf4c      	ite	mi
 8002896:	6123      	strmi	r3, [r4, #16]
                else palClearPad(GPIOC, 15);
 8002898:	6163      	strpl	r3, [r4, #20]
            default:
                break;
            }
        }

        chMtxUnlock(&digitalOutputsMutex);
 800289a:	4628      	mov	r0, r5
 800289c:	f7ff fe00 	bl	80024a0 <chMtxUnlock>
 80028a0:	2320      	movs	r3, #32
 80028a2:	f383 8811 	msr	BASEPRI, r3
 80028a6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80028aa:	2008      	movs	r0, #8
 80028ac:	f7fe f980 	bl	8000bb0 <chSchGoSleepTimeoutS>
 80028b0:	2300      	movs	r3, #0
 80028b2:	f383 8811 	msr	BASEPRI, r3
}
 80028b6:	e7c4      	b.n	8002842 <_ZL9OutThreadPv+0x12>
                else palClearPad(GPIOC, 14);
 80028b8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80028bc:	3301      	adds	r3, #1
 80028be:	b2da      	uxtb	r2, r3
            switch (i)
 80028c0:	2a02      	cmp	r2, #2
                else palClearPad(GPIOC, 14);
 80028c2:	6160      	str	r0, [r4, #20]
            switch (i)
 80028c4:	d1ca      	bne.n	800285c <_ZL9OutThreadPv+0x2c>
 80028c6:	e7f9      	b.n	80028bc <_ZL9OutThreadPv+0x8c>
 80028c8:	20001428 	.word	0x20001428
 80028cc:	08003550 	.word	0x08003550
 80028d0:	20000830 	.word	0x20000830
 80028d4:	20000998 	.word	0x20000998
 80028d8:	40011000 	.word	0x40011000
 80028dc:	40011400 	.word	0x40011400

080028e0 <_ZL13DigitalThreadPv>:

uint8_t digitalInputs[(8 + 7) / 8] = {0}; // Definition and initialization

static THD_WORKING_AREA(waDigitalThread, 128);
static THD_FUNCTION(DigitalThread, p)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	2720      	movs	r7, #32
 80028e4:	4b3b      	ldr	r3, [pc, #236]	@ (80029d4 <_ZL13DigitalThreadPv+0xf4>)
 80028e6:	4a3c      	ldr	r2, [pc, #240]	@ (80029d8 <_ZL13DigitalThreadPv+0xf8>)
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	4e3c      	ldr	r6, [pc, #240]	@ (80029dc <_ZL13DigitalThreadPv+0xfc>)
 80028ec:	4d3c      	ldr	r5, [pc, #240]	@ (80029e0 <_ZL13DigitalThreadPv+0x100>)
            case 5:
                if(palReadPad(GPIOB, 15)) USTAW_BIT(digitalInputs, i);
                else CZYSC_BIT(digitalInputs, i);
                break;
            case 6:
                if(palReadPad(GPIOA, 15)) USTAW_BIT(digitalInputs, i);
 80028ee:	4c3d      	ldr	r4, [pc, #244]	@ (80029e4 <_ZL13DigitalThreadPv+0x104>)
                if(palReadPad(GPIOB, 15)) USTAW_BIT(digitalInputs, i);
 80028f0:	f8df 80f4 	ldr.w	r8, [pc, #244]	@ 80029e8 <_ZL13DigitalThreadPv+0x108>
 80028f4:	619a      	str	r2, [r3, #24]
 80028f6:	f387 8811 	msr	BASEPRI, r7
 80028fa:	4628      	mov	r0, r5
 80028fc:	f7fe fbf8 	bl	80010f0 <chMtxLockS>
 8002900:	2200      	movs	r2, #0
 8002902:	f382 8811 	msr	BASEPRI, r2
        for (uint8_t i = 0; i < 8; i++)
 8002906:	7830      	ldrb	r0, [r6, #0]
            switch (i)
 8002908:	b2d3      	uxtb	r3, r2
 800290a:	3b01      	subs	r3, #1
 800290c:	2b06      	cmp	r3, #6
 800290e:	d856      	bhi.n	80029be <_ZL13DigitalThreadPv+0xde>
 8002910:	e8df f003 	tbb	[pc, r3]
 8002914:	2d37414b 	.word	0x2d37414b
 8002918:	1a23      	.short	0x1a23
 800291a:	04          	.byte	0x04
 800291b:	00          	.byte	0x00
                else CZYSC_BIT(digitalInputs, i);
                break;
            case 7:
                if(palReadPad(GPIOA, 8)) USTAW_BIT(digitalInputs, i);
 800291c:	68a3      	ldr	r3, [r4, #8]
 800291e:	05db      	lsls	r3, r3, #23
 8002920:	bf4c      	ite	mi
 8002922:	f040 0380 	orrmi.w	r3, r0, #128	@ 0x80
                else CZYSC_BIT(digitalInputs, i);
 8002926:	f000 037f 	andpl.w	r3, r0, #127	@ 0x7f
                break;
            default:
                break;
            }
        }
        chMtxUnlock(&digitalInputsMutex);
 800292a:	4628      	mov	r0, r5
                else CZYSC_BIT(digitalInputs, i);
 800292c:	7033      	strb	r3, [r6, #0]
        chMtxUnlock(&digitalInputsMutex);
 800292e:	f7ff fdb7 	bl	80024a0 <chMtxUnlock>
 8002932:	f387 8811 	msr	BASEPRI, r7
 8002936:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800293a:	2008      	movs	r0, #8
 800293c:	f7fe f938 	bl	8000bb0 <chSchGoSleepTimeoutS>
 8002940:	2300      	movs	r3, #0
 8002942:	f383 8811 	msr	BASEPRI, r3
 8002946:	e7d6      	b.n	80028f6 <_ZL13DigitalThreadPv+0x16>
                if(palReadPad(GPIOA, 15)) USTAW_BIT(digitalInputs, i);
 8002948:	68a3      	ldr	r3, [r4, #8]
        for (uint8_t i = 0; i < 8; i++)
 800294a:	3201      	adds	r2, #1
                if(palReadPad(GPIOA, 15)) USTAW_BIT(digitalInputs, i);
 800294c:	0419      	lsls	r1, r3, #16
 800294e:	bf4c      	ite	mi
 8002950:	f040 0040 	orrmi.w	r0, r0, #64	@ 0x40
                else CZYSC_BIT(digitalInputs, i);
 8002954:	f000 00bf 	andpl.w	r0, r0, #191	@ 0xbf
        for (uint8_t i = 0; i < 8; i++)
 8002958:	e7d6      	b.n	8002908 <_ZL13DigitalThreadPv+0x28>
                if(palReadPad(GPIOB, 15)) USTAW_BIT(digitalInputs, i);
 800295a:	f8d8 3008 	ldr.w	r3, [r8, #8]
        for (uint8_t i = 0; i < 8; i++)
 800295e:	3201      	adds	r2, #1
                if(palReadPad(GPIOB, 15)) USTAW_BIT(digitalInputs, i);
 8002960:	041b      	lsls	r3, r3, #16
 8002962:	bf4c      	ite	mi
 8002964:	f040 0020 	orrmi.w	r0, r0, #32
                else CZYSC_BIT(digitalInputs, i);
 8002968:	f000 00df 	andpl.w	r0, r0, #223	@ 0xdf
        for (uint8_t i = 0; i < 8; i++)
 800296c:	e7cc      	b.n	8002908 <_ZL13DigitalThreadPv+0x28>
                if(palReadPad(GPIOB, 7)) USTAW_BIT(digitalInputs, i);
 800296e:	f8d8 3008 	ldr.w	r3, [r8, #8]
        for (uint8_t i = 0; i < 8; i++)
 8002972:	3201      	adds	r2, #1
                if(palReadPad(GPIOB, 7)) USTAW_BIT(digitalInputs, i);
 8002974:	0619      	lsls	r1, r3, #24
 8002976:	bf4c      	ite	mi
 8002978:	f040 0010 	orrmi.w	r0, r0, #16
                else CZYSC_BIT(digitalInputs, i);
 800297c:	f000 00ef 	andpl.w	r0, r0, #239	@ 0xef
        for (uint8_t i = 0; i < 8; i++)
 8002980:	e7c2      	b.n	8002908 <_ZL13DigitalThreadPv+0x28>
                if(palReadPad(GPIOB, 6)) USTAW_BIT(digitalInputs, i);
 8002982:	f8d8 3008 	ldr.w	r3, [r8, #8]
        for (uint8_t i = 0; i < 8; i++)
 8002986:	3201      	adds	r2, #1
                if(palReadPad(GPIOB, 6)) USTAW_BIT(digitalInputs, i);
 8002988:	065b      	lsls	r3, r3, #25
 800298a:	bf4c      	ite	mi
 800298c:	f040 0008 	orrmi.w	r0, r0, #8
                else CZYSC_BIT(digitalInputs, i);
 8002990:	f000 00f7 	andpl.w	r0, r0, #247	@ 0xf7
        for (uint8_t i = 0; i < 8; i++)
 8002994:	e7b8      	b.n	8002908 <_ZL13DigitalThreadPv+0x28>
                if(palReadPad(GPIOB, 5)) USTAW_BIT(digitalInputs, i);
 8002996:	f8d8 3008 	ldr.w	r3, [r8, #8]
        for (uint8_t i = 0; i < 8; i++)
 800299a:	3201      	adds	r2, #1
                if(palReadPad(GPIOB, 5)) USTAW_BIT(digitalInputs, i);
 800299c:	0699      	lsls	r1, r3, #26
 800299e:	bf4c      	ite	mi
 80029a0:	f040 0004 	orrmi.w	r0, r0, #4
                else CZYSC_BIT(digitalInputs, i);
 80029a4:	f000 00fb 	andpl.w	r0, r0, #251	@ 0xfb
        for (uint8_t i = 0; i < 8; i++)
 80029a8:	e7ae      	b.n	8002908 <_ZL13DigitalThreadPv+0x28>
                if(palReadPad(GPIOB, 4)) USTAW_BIT(digitalInputs, i);
 80029aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
        for (uint8_t i = 0; i < 8; i++)
 80029ae:	3201      	adds	r2, #1
                if(palReadPad(GPIOB, 4)) USTAW_BIT(digitalInputs, i);
 80029b0:	06db      	lsls	r3, r3, #27
 80029b2:	bf4c      	ite	mi
 80029b4:	f040 0002 	orrmi.w	r0, r0, #2
                else CZYSC_BIT(digitalInputs, i);
 80029b8:	f000 00fd 	andpl.w	r0, r0, #253	@ 0xfd
        for (uint8_t i = 0; i < 8; i++)
 80029bc:	e7a4      	b.n	8002908 <_ZL13DigitalThreadPv+0x28>
                if(palReadPad(GPIOB, 3)) USTAW_BIT(digitalInputs, i);
 80029be:	4b0a      	ldr	r3, [pc, #40]	@ (80029e8 <_ZL13DigitalThreadPv+0x108>)
        for (uint8_t i = 0; i < 8; i++)
 80029c0:	3201      	adds	r2, #1
                if(palReadPad(GPIOB, 3)) USTAW_BIT(digitalInputs, i);
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	0719      	lsls	r1, r3, #28
 80029c6:	bf4c      	ite	mi
 80029c8:	f040 0001 	orrmi.w	r0, r0, #1
                else CZYSC_BIT(digitalInputs, i);
 80029cc:	f000 00fe 	andpl.w	r0, r0, #254	@ 0xfe
        for (uint8_t i = 0; i < 8; i++)
 80029d0:	e79a      	b.n	8002908 <_ZL13DigitalThreadPv+0x28>
 80029d2:	bf00      	nop
 80029d4:	20001428 	.word	0x20001428
 80029d8:	0800355c 	.word	0x0800355c
 80029dc:	2000094c 	.word	0x2000094c
 80029e0:	20000810 	.word	0x20000810
 80029e4:	40010800 	.word	0x40010800
 80029e8:	40010c00 	.word	0x40010c00
 80029ec:	00000000 	.word	0x00000000

080029f0 <_ZL9AdcThreadPv>:
 80029f0:	4d33      	ldr	r5, [pc, #204]	@ (8002ac0 <_ZL9AdcThreadPv+0xd0>)
          ADC_SQR3_SQ5_N(ADC_CHANNEL_IN4) | ADC_SQR3_SQ6_N(ADC_CHANNEL_IN5)
};

static THD_WORKING_AREA(waAdcThread, 128);
static THD_FUNCTION(AdcThread, p)
{
 80029f2:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 80029f6:	4a33      	ldr	r2, [pc, #204]	@ (8002ac4 <_ZL9AdcThreadPv+0xd4>)
 80029f8:	69ab      	ldr	r3, [r5, #24]
 80029fa:	4c33      	ldr	r4, [pc, #204]	@ (8002ac8 <_ZL9AdcThreadPv+0xd8>)
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 80029fc:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 8002acc <_ZL9AdcThreadPv+0xdc>
 8002a00:	619a      	str	r2, [r3, #24]
 8002a02:	2720      	movs	r7, #32
 8002a04:	f387 8811 	msr	BASEPRI, r7
 8002a08:	4831      	ldr	r0, [pc, #196]	@ (8002ad0 <_ZL9AdcThreadPv+0xe0>)
 8002a0a:	f7fe fb71 	bl	80010f0 <chMtxLockS>
 8002a0e:	2600      	movs	r6, #0
 8002a10:	f386 8811 	msr	BASEPRI, r6
 8002a14:	f387 8811 	msr	BASEPRI, r7
  osalDbgAssert((adcp->state == ADC_READY) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
 8002a18:	2201      	movs	r2, #1
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 8002a1a:	2003      	movs	r0, #3
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8002a1c:	f04f 0a0a 	mov.w	sl, #10
  adcp->adc->SQR1  = grpp->sqr1;
 8002a20:	f44f 0e10 	mov.w	lr, #9437184	@ 0x900000
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
 8002a24:	f44f 7180 	mov.w	r1, #256	@ 0x100
  adcp->adc->SQR2  = grpp->sqr2;
 8002a28:	f44f 7cf3 	mov.w	ip, #486	@ 0x1e6
  adcp->grpp     = grpp;
 8002a2c:	4b29      	ldr	r3, [pc, #164]	@ (8002ad4 <_ZL9AdcThreadPv+0xe4>)
  mode = adcp->dmamode;
 8002a2e:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 8002a32:	6123      	str	r3, [r4, #16]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8002a34:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  adcp->samples  = samples;
 8002a36:	f8c4 8008 	str.w	r8, [r4, #8]
 8002a3a:	f8d3 b004 	ldr.w	fp, [r3, #4]
  adcp->state    = ADC_ACTIVE;
 8002a3e:	7020      	strb	r0, [r4, #0]
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
 8002a40:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
  adcp->depth    = depth;
 8002a42:	60e2      	str	r2, [r4, #12]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8002a44:	f8cb 800c 	str.w	r8, [fp, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8002a48:	f8cb a004 	str.w	sl, [fp, #4]
  dmaStreamSetMode(adcp->dmastp, mode);
 8002a4c:	f8cb 9000 	str.w	r9, [fp]
  dmaStreamEnable(adcp->dmastp);
 8002a50:	f8db 9000 	ldr.w	r9, [fp]
  adcp->adc->SMPR2 = grpp->smpr2;
 8002a54:	f8df a080 	ldr.w	sl, [pc, #128]	@ 8002ad8 <_ZL9AdcThreadPv+0xe8>
  dmaStreamEnable(adcp->dmastp);
 8002a58:	ea49 0902 	orr.w	r9, r9, r2
 8002a5c:	f8cb 9000 	str.w	r9, [fp]
  adcp->adc->CR2   = grpp->cr2 | cr2;
 8002a60:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8002adc <_ZL9AdcThreadPv+0xec>
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
 8002a64:	6059      	str	r1, [r3, #4]
  return ch.rlist.current;
 8002a66:	69a9      	ldr	r1, [r5, #24]
  adcp->adc->CR2   = grpp->cr2 | cr2;
 8002a68:	f8c3 9008 	str.w	r9, [r3, #8]
  adcp->adc->SMPR1 = grpp->smpr1;
 8002a6c:	60de      	str	r6, [r3, #12]
  adcp->adc->SMPR2 = grpp->smpr2;
 8002a6e:	f8c3 a010 	str.w	sl, [r3, #16]
  adcp->adc->SQR1  = grpp->sqr1;
 8002a72:	f8c3 e02c 	str.w	lr, [r3, #44]	@ 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
 8002a76:	f8c3 c030 	str.w	ip, [r3, #48]	@ 0x30
  adcp->adc->SQR3  = grpp->sqr3;
 8002a7a:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8002ae0 <_ZL9AdcThreadPv+0xf0>
 8002a7e:	f8c3 c034 	str.w	ip, [r3, #52]	@ 0x34
  adcp->adc->CR2   = cr2;
 8002a82:	f8c3 9008 	str.w	r9, [r3, #8]
  otp->state = newstate;
 8002a86:	f881 0020 	strb.w	r0, [r1, #32]
  tp->u.wttrp = trp;
 8002a8a:	4b16      	ldr	r3, [pc, #88]	@ (8002ae4 <_ZL9AdcThreadPv+0xf4>)
  ch_priority_queue_t *p = pqp->next;
 8002a8c:	6828      	ldr	r0, [r5, #0]
 8002a8e:	624b      	str	r3, [r1, #36]	@ 0x24
  pqp->next       = p->next;
 8002a90:	6803      	ldr	r3, [r0, #0]
  *trp = tp;
 8002a92:	6161      	str	r1, [r4, #20]
  pqp->next->prev = pqp;
 8002a94:	605d      	str	r5, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8002a96:	f880 2020 	strb.w	r2, [r0, #32]
  pqp->next       = p->next;
 8002a9a:	602b      	str	r3, [r5, #0]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 8002a9c:	61a8      	str	r0, [r5, #24]
  chSysSwitch(currp, otp);
 8002a9e:	f7fd fbd7 	bl	8000250 <_port_switch>
 8002aa2:	f386 8811 	msr	BASEPRI, r6

    while (true)
    {   
        chMtxLock(&adcSampleMutex);
        adcConvert(&ADCD1, &adc1_cfg, adc1_samples, ADC1_BUF_DEPTH);
        chMtxUnlock(&adcSampleMutex);
 8002aa6:	480a      	ldr	r0, [pc, #40]	@ (8002ad0 <_ZL9AdcThreadPv+0xe0>)
 8002aa8:	f7ff fcfa 	bl	80024a0 <chMtxUnlock>
 8002aac:	f387 8811 	msr	BASEPRI, r7
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8002ab0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002ab4:	2008      	movs	r0, #8
 8002ab6:	f7fe f87b 	bl	8000bb0 <chSchGoSleepTimeoutS>
 8002aba:	f386 8811 	msr	BASEPRI, r6
    while (true)
 8002abe:	e7a0      	b.n	8002a02 <_ZL9AdcThreadPv+0x12>
 8002ac0:	20001428 	.word	0x20001428
 8002ac4:	0800356c 	.word	0x0800356c
 8002ac8:	20000b68 	.word	0x20000b68
 8002acc:	20000938 	.word	0x20000938
 8002ad0:	20000800 	.word	0x20000800
 8002ad4:	0800358c 	.word	0x0800358c
 8002ad8:	1b6db6db 	.word	0x1b6db6db
 8002adc:	00400103 	.word	0x00400103
 8002ae0:	0a418820 	.word	0x0a418820
 8002ae4:	20000b7c 	.word	0x20000b7c
	...

08002af0 <_Z24max6675_read_temperatureh>:
// Global variables to store the temperatures
uint16_t temperature1 = 0;
uint16_t temperature2 = 0;

// Function to read temperature from MAX6675
uint16_t max6675_read_temperature(uint8_t cs_pin) {
 8002af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002af4:	2620      	movs	r6, #32
 8002af6:	4604      	mov	r4, r0
 8002af8:	b083      	sub	sp, #12
 8002afa:	f386 8811 	msr	BASEPRI, r6
 8002afe:	4f4e      	ldr	r7, [pc, #312]	@ (8002c38 <_Z24max6675_read_temperatureh+0x148>)
 8002b00:	2500      	movs	r5, #0
 8002b02:	4638      	mov	r0, r7
 8002b04:	f7fe faf4 	bl	80010f0 <chMtxLockS>
 8002b08:	f385 8811 	msr	BASEPRI, r5
  uint16_t value = 0;

  spiAcquireBus(&SPID2);              // Acquire ownership of the bus
  spi2_cfg.ssport = GPIOB;            // Set port
 8002b0c:	4b4b      	ldr	r3, [pc, #300]	@ (8002c3c <_Z24max6675_read_temperatureh+0x14c>)
 8002b0e:	4a4c      	ldr	r2, [pc, #304]	@ (8002c40 <_Z24max6675_read_temperatureh+0x150>)
  spi2_cfg.sspad = cs_pin;            // Set CS pin
 8002b10:	60dc      	str	r4, [r3, #12]
  spi2_cfg.ssport = GPIOB;            // Set port
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	f386 8811 	msr	BASEPRI, r6
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 8002b18:	f847 3c08 	str.w	r3, [r7, #-8]
  spi_lld_start(spip);
 8002b1c:	f7fd ff70 	bl	8000a00 <spi_lld_start.constprop.0>
  spip->state = SPI_READY;
 8002b20:	f04f 0e02 	mov.w	lr, #2
  spip->config = config;
 8002b24:	f1a7 040c 	sub.w	r4, r7, #12
  spip->state = SPI_READY;
 8002b28:	f807 ec0c 	strb.w	lr, [r7, #-12]
 8002b2c:	f385 8811 	msr	BASEPRI, r5
 8002b30:	f386 8811 	msr	BASEPRI, r6

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiSelectI(spip);
 8002b34:	f04f 0801 	mov.w	r8, #1
 8002b38:	6862      	ldr	r2, [r4, #4]
 8002b3a:	68d3      	ldr	r3, [r2, #12]
 8002b3c:	6892      	ldr	r2, [r2, #8]
 8002b3e:	fa08 f303 	lsl.w	r3, r8, r3
 8002b42:	6153      	str	r3, [r2, #20]
 8002b44:	f385 8811 	msr	BASEPRI, r5
  spiStart(&SPID2, &spi2_cfg);        // Start the SPI configuration
  spiSelect(&SPID2);                  // Select the SPI device

  uint8_t rxbuf[2] = {0};
 8002b48:	f8ad 5004 	strh.w	r5, [sp, #4]
 8002b4c:	f386 8811 	msr	BASEPRI, r6
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartReceiveI(spip, n, rxbuf);
 8002b50:	f04f 0c03 	mov.w	ip, #3
 8002b54:	4620      	mov	r0, r4

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8002b56:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8002b58:	6a23      	ldr	r3, [r4, #32]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8002b5a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8002b5c:	6852      	ldr	r2, [r2, #4]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8002b5e:	685b      	ldr	r3, [r3, #4]
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8002b60:	f8d4 902c 	ldr.w	r9, [r4, #44]	@ 0x2c
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8002b64:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 8002c44 <_Z24max6675_read_temperatureh+0x154>
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8002b68:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8002b6c:	f10d 0b04 	add.w	fp, sp, #4
 8002b70:	f8c3 b00c 	str.w	fp, [r3, #12]
 8002b74:	f807 cc0c 	strb.w	ip, [r7, #-12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8002b78:	f8c3 e004 	str.w	lr, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8002b7c:	6019      	str	r1, [r3, #0]
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8002b7e:	f8c2 a00c 	str.w	sl, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8002b82:	f8c2 e004 	str.w	lr, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8002b86:	f8c2 9000 	str.w	r9, [r2]

  dmaStreamEnable(spip->dmarx);
 8002b8a:	6819      	ldr	r1, [r3, #0]
 8002b8c:	ea41 0108 	orr.w	r1, r1, r8
 8002b90:	6019      	str	r1, [r3, #0]
  dmaStreamEnable(spip->dmatx);
 8002b92:	6811      	ldr	r1, [r2, #0]
  return ch.rlist.current;
 8002b94:	4b2c      	ldr	r3, [pc, #176]	@ (8002c48 <_Z24max6675_read_temperatureh+0x158>)
 8002b96:	ea41 0108 	orr.w	r1, r1, r8
 8002b9a:	6011      	str	r1, [r2, #0]
 8002b9c:	6999      	ldr	r1, [r3, #24]
 8002b9e:	f840 1f08 	str.w	r1, [r0, #8]!
  tp->u.wttrp = trp;
 8002ba2:	6248      	str	r0, [r1, #36]	@ 0x24
  ch_priority_queue_t *p = pqp->next;
 8002ba4:	6818      	ldr	r0, [r3, #0]
  otp->state = newstate;
 8002ba6:	f881 c020 	strb.w	ip, [r1, #32]
  pqp->next       = p->next;
 8002baa:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 8002bac:	6053      	str	r3, [r2, #4]
  currp->state = CH_STATE_CURRENT;
 8002bae:	f880 8020 	strb.w	r8, [r0, #32]
  pqp->next       = p->next;
 8002bb2:	601a      	str	r2, [r3, #0]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 8002bb4:	6198      	str	r0, [r3, #24]
  chSysSwitch(currp, otp);
 8002bb6:	f7fd fb4b 	bl	8000250 <_port_switch>
 8002bba:	f385 8811 	msr	BASEPRI, r5
 8002bbe:	f386 8811 	msr	BASEPRI, r6
  spiUnselectI(spip);
 8002bc2:	6862      	ldr	r2, [r4, #4]
 8002bc4:	68d3      	ldr	r3, [r2, #12]
 8002bc6:	6892      	ldr	r2, [r2, #8]
 8002bc8:	fa08 f303 	lsl.w	r3, r8, r3
 8002bcc:	6113      	str	r3, [r2, #16]
 8002bce:	f385 8811 	msr	BASEPRI, r5
 8002bd2:	f386 8811 	msr	BASEPRI, r6
  if (spip->state == SPI_READY) {
 8002bd6:	f817 3c0c 	ldrb.w	r3, [r7, #-12]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d014      	beq.n	8002c08 <_Z24max6675_read_temperatureh+0x118>
  spip->config = NULL;
 8002bde:	2300      	movs	r3, #0
  spip->state  = SPI_STOP;
 8002be0:	2201      	movs	r2, #1
  spip->config = NULL;
 8002be2:	6063      	str	r3, [r4, #4]
  spip->state  = SPI_STOP;
 8002be4:	7022      	strb	r2, [r4, #0]
 8002be6:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8002bea:	4813      	ldr	r0, [pc, #76]	@ (8002c38 <_Z24max6675_read_temperatureh+0x148>)
 8002bec:	f7ff fc58 	bl	80024a0 <chMtxUnlock>
  spiReceive(&SPID2, 2, rxbuf);       // Read 2 bytes from MAX6675
  spiUnselect(&SPID2);                // Unselect the SPI device
  spiStop(&SPID2);
  spiReleaseBus(&SPID2);              // Release ownership of the bus

  value = (rxbuf[0] << 8) | rxbuf[1]; // Combine high and low byte
 8002bf0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002bf4:	ba5b      	rev16	r3, r3
 8002bf6:	b298      	uxth	r0, r3

  // Check if thermocouple is connected
  if (value & 0x4) {
 8002bf8:	075b      	lsls	r3, r3, #29
    return 0xFFFF; // Thermocouple not connected
 8002bfa:	bf4c      	ite	mi
 8002bfc:	f64f 70ff 	movwmi	r0, #65535	@ 0xffff
  }

  // Extract temperature data (12-bit resolution)
  value >>= 3;
 8002c00:	08c0      	lsrpl	r0, r0, #3

  return value;
}
 8002c02:	b003      	add	sp, #12
 8002c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dmaStreamFreeI(spip->dmarx);
 8002c08:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
    spip->spi->CR1 &= ~SPI_CR1_SPE;
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c12:	601a      	str	r2, [r3, #0]
    spip->spi->CR1  = 0;
 8002c14:	601d      	str	r5, [r3, #0]
    spip->spi->CR2  = 0;
 8002c16:	605d      	str	r5, [r3, #4]
    dmaStreamFreeI(spip->dmarx);
 8002c18:	f7fd fcba 	bl	8000590 <dmaStreamFreeI>
    dmaStreamFreeI(spip->dmatx);
 8002c1c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002c1e:	f7fd fcb7 	bl	8000590 <dmaStreamFreeI>
    spip->dmarx = NULL;
 8002c22:	2000      	movs	r0, #0
 8002c24:	2100      	movs	r1, #0
      rccDisableSPI2();
 8002c26:	4b09      	ldr	r3, [pc, #36]	@ (8002c4c <_Z24max6675_read_temperatureh+0x15c>)
 8002c28:	69da      	ldr	r2, [r3, #28]
 8002c2a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c2e:	61da      	str	r2, [r3, #28]
 8002c30:	69db      	ldr	r3, [r3, #28]
    spip->dmarx = NULL;
 8002c32:	e9c4 0108 	strd	r0, r1, [r4, #32]
      rccDisableSPI2();
 8002c36:	e7d2      	b.n	8002bde <_Z24max6675_read_temperatureh+0xee>
 8002c38:	20000cf4 	.word	0x20000cf4
 8002c3c:	20000840 	.word	0x20000840
 8002c40:	40010c00 	.word	0x40010c00
 8002c44:	0800358a 	.word	0x0800358a
 8002c48:	20001428 	.word	0x20001428
 8002c4c:	40021000 	.word	0x40021000

08002c50 <_ZL9SpiThreadPv>:
 8002c50:	2620      	movs	r6, #32
 8002c52:	2500      	movs	r5, #0
 8002c54:	4b13      	ldr	r3, [pc, #76]	@ (8002ca4 <_ZL9SpiThreadPv+0x54>)
 8002c56:	4a14      	ldr	r2, [pc, #80]	@ (8002ca8 <_ZL9SpiThreadPv+0x58>)
 8002c58:	699b      	ldr	r3, [r3, #24]

static THD_WORKING_AREA(waSpiThread, 128);
static THD_FUNCTION(SpiThread, p)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 8002cac <_ZL9SpiThreadPv+0x5c>
 8002c60:	4f13      	ldr	r7, [pc, #76]	@ (8002cb0 <_ZL9SpiThreadPv+0x60>)
 8002c62:	4c14      	ldr	r4, [pc, #80]	@ (8002cb4 <_ZL9SpiThreadPv+0x64>)
 8002c64:	619a      	str	r2, [r3, #24]
 8002c66:	f386 8811 	msr	BASEPRI, r6
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f7fe fa40 	bl	80010f0 <chMtxLockS>
 8002c70:	f385 8811 	msr	BASEPRI, r5
    chRegSetThreadName("Spi_Thread");

    while (true)
    {
        chMtxLock(&temperatureMutex);
        temperature1 = max6675_read_temperature(11); // Read temperature from sensor 1 (CS pin B12)
 8002c74:	200b      	movs	r0, #11
 8002c76:	f7ff ff3b 	bl	8002af0 <_Z24max6675_read_temperatureh>
 8002c7a:	4603      	mov	r3, r0
        temperature2 = max6675_read_temperature(12); // Read temperature from sensor 2 (CS pin B13)
 8002c7c:	200c      	movs	r0, #12
        temperature1 = max6675_read_temperature(11); // Read temperature from sensor 1 (CS pin B12)
 8002c7e:	f8a8 3000 	strh.w	r3, [r8]
        temperature2 = max6675_read_temperature(12); // Read temperature from sensor 2 (CS pin B13)
 8002c82:	f7ff ff35 	bl	8002af0 <_Z24max6675_read_temperatureh>
 8002c86:	4603      	mov	r3, r0
        chMtxUnlock(&temperatureMutex);
 8002c88:	4620      	mov	r0, r4
        temperature2 = max6675_read_temperature(12); // Read temperature from sensor 2 (CS pin B13)
 8002c8a:	803b      	strh	r3, [r7, #0]
        chMtxUnlock(&temperatureMutex);
 8002c8c:	f7ff fc08 	bl	80024a0 <chMtxUnlock>
 8002c90:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8002c94:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002c98:	2008      	movs	r0, #8
 8002c9a:	f7fd ff89 	bl	8000bb0 <chSchGoSleepTimeoutS>
 8002c9e:	f385 8811 	msr	BASEPRI, r5
    while (true)
 8002ca2:	e7e0      	b.n	8002c66 <_ZL9SpiThreadPv+0x16>
 8002ca4:	20001428 	.word	0x20001428
 8002ca8:	08003578 	.word	0x08003578
 8002cac:	20000950 	.word	0x20000950
 8002cb0:	2000094e 	.word	0x2000094e
 8002cb4:	20000820 	.word	0x20000820
	...

08002cc0 <chThdExit>:
 8002cc0:	2320      	movs	r3, #32
void chThdExit(msg_t msg) {
 8002cc2:	b570      	push	{r4, r5, r6, lr}
 8002cc4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = currp;
 8002cc8:	4e1a      	ldr	r6, [pc, #104]	@ (8002d34 <chThdExit+0x74>)
 8002cca:	69b1      	ldr	r1, [r6, #24]
  return (bool)(lp->next != lp);
 8002ccc:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
  while (ch_list_notempty(&tp->waiting)) {
 8002cce:	f101 0c28 	add.w	ip, r1, #40	@ 0x28
 8002cd2:	4565      	cmp	r5, ip
  tp->u.exitcode = msg;
 8002cd4:	6248      	str	r0, [r1, #36]	@ 0x24
  while (ch_list_notempty(&tp->waiting)) {
 8002cd6:	d013      	beq.n	8002d00 <chThdExit+0x40>
  tp->state = CH_STATE_READY;
 8002cd8:	f04f 0e00 	mov.w	lr, #0
  lp->next = p->next;
 8002cdc:	462c      	mov	r4, r5
 8002cde:	682d      	ldr	r5, [r5, #0]
  } while (pqp->prio >= p->prio);
 8002ce0:	4b14      	ldr	r3, [pc, #80]	@ (8002d34 <chThdExit+0x74>)
 8002ce2:	68a0      	ldr	r0, [r4, #8]
  lp->next = p->next;
 8002ce4:	628d      	str	r5, [r1, #40]	@ 0x28
 8002ce6:	f884 e020 	strb.w	lr, [r4, #32]
    pqp = pqp->next;
 8002cea:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	4282      	cmp	r2, r0
 8002cf0:	d2fb      	bcs.n	8002cea <chThdExit+0x2a>
  p->prev       = pqp->prev;
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	4565      	cmp	r5, ip
 8002cf6:	e9c4 3200 	strd	r3, r2, [r4]
  p->prev->next = p;
 8002cfa:	6014      	str	r4, [r2, #0]
  pqp->prev     = p;
 8002cfc:	605c      	str	r4, [r3, #4]
 8002cfe:	d1ed      	bne.n	8002cdc <chThdExit+0x1c>
  if ((tp->refs == (trefs_t)0) &&
 8002d00:	f891 3022 	ldrb.w	r3, [r1, #34]	@ 0x22
 8002d04:	b93b      	cbnz	r3, 8002d16 <chThdExit+0x56>
 8002d06:	f891 3021 	ldrb.w	r3, [r1, #33]	@ 0x21
 8002d0a:	079b      	lsls	r3, r3, #30
 8002d0c:	d103      	bne.n	8002d16 <chThdExit+0x56>
    REG_REMOVE(tp);
 8002d0e:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
 8002d12:	6113      	str	r3, [r2, #16]
 8002d14:	615a      	str	r2, [r3, #20]
  otp->state = newstate;
 8002d16:	230f      	movs	r3, #15
  currp->state = CH_STATE_CURRENT;
 8002d18:	2201      	movs	r2, #1
  ch_priority_queue_t *p = pqp->next;
 8002d1a:	6830      	ldr	r0, [r6, #0]
  otp->state = newstate;
 8002d1c:	f881 3020 	strb.w	r3, [r1, #32]
  pqp->next       = p->next;
 8002d20:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8002d22:	605e      	str	r6, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8002d24:	f880 2020 	strb.w	r2, [r0, #32]
  pqp->next       = p->next;
 8002d28:	6033      	str	r3, [r6, #0]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 8002d2a:	61b0      	str	r0, [r6, #24]
}
 8002d2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chSysSwitch(currp, otp);
 8002d30:	f7fd ba8e 	b.w	8000250 <_port_switch>
 8002d34:	20001428 	.word	0x20001428
	...

08002d40 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002d40:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8002d44:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002d46:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f383 8811 	msr	BASEPRI, r3
}
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
	...

08002d60 <main>:
  rccResetAPB1(0xFFFFFFFF);
 8002d60:	2100      	movs	r1, #0
 8002d62:	f04f 33ff 	mov.w	r3, #4294967295
#include "spi.h"
#include "Digital.h"

Can canVar;

int main(void) {
 8002d66:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002d6a:	4ac5      	ldr	r2, [pc, #788]	@ (8003080 <main+0x320>)
  dma.allocated_mask = 0U;
 8002d6c:	4dc5      	ldr	r5, [pc, #788]	@ (8003084 <main+0x324>)
 8002d6e:	6910      	ldr	r0, [r2, #16]
 8002d70:	b087      	sub	sp, #28
  dma.isr_mask       = 0U;
 8002d72:	6069      	str	r1, [r5, #4]
 8002d74:	6113      	str	r3, [r2, #16]
 8002d76:	6916      	ldr	r6, [r2, #16]
 8002d78:	6111      	str	r1, [r2, #16]
 8002d7a:	6916      	ldr	r6, [r2, #16]
  rccResetAPB2(0xFFFFFFFF);
 8002d7c:	68d6      	ldr	r6, [r2, #12]
 8002d7e:	60d3      	str	r3, [r2, #12]
 8002d80:	68d3      	ldr	r3, [r2, #12]
 8002d82:	60d1      	str	r1, [r2, #12]
 8002d84:	68d3      	ldr	r3, [r2, #12]
  rccEnablePWRInterface(true);
 8002d86:	69d6      	ldr	r6, [r2, #28]
  PWR->CR |= PWR_CR_DBP;
 8002d88:	4fbf      	ldr	r7, [pc, #764]	@ (8003088 <main+0x328>)
  rccEnablePWRInterface(true);
 8002d8a:	f046 5680 	orr.w	r6, r6, #268435456	@ 0x10000000
 8002d8e:	61d6      	str	r6, [r2, #28]
 8002d90:	69d6      	ldr	r6, [r2, #28]
  rccEnableBKPInterface(true);
 8002d92:	69d6      	ldr	r6, [r2, #28]
 8002d94:	460b      	mov	r3, r1
 8002d96:	f046 6600 	orr.w	r6, r6, #134217728	@ 0x8000000
 8002d9a:	61d6      	str	r6, [r2, #28]
 8002d9c:	69d2      	ldr	r2, [r2, #28]
  PWR->CR |= PWR_CR_DBP;
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	4cba      	ldr	r4, [pc, #744]	@ (800308c <main+0x32c>)
 8002da2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002da6:	603a      	str	r2, [r7, #0]
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8002da8:	460a      	mov	r2, r1
 8002daa:	f105 0008 	add.w	r0, r5, #8
  dma.allocated_mask = 0U;
 8002dae:	6029      	str	r1, [r5, #0]
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8002db0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8002db4:	600a      	str	r2, [r1, #0]
    dma.streams[i].func = NULL;
 8002db6:	f840 2013 	str.w	r2, [r0, r3, lsl #1]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8002dba:	3304      	adds	r3, #4
 8002dbc:	2b1c      	cmp	r3, #28
 8002dbe:	d1f7      	bne.n	8002db0 <main+0x50>
  DMA1->IFCR = 0xFFFFFFFFU;
 8002dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc4:	4bb2      	ldr	r3, [pc, #712]	@ (8003090 <main+0x330>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002dc6:	2060      	movs	r0, #96	@ 0x60
 8002dc8:	605a      	str	r2, [r3, #4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002dca:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8002dce:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8002dd2:	f04f 0c40 	mov.w	ip, #64	@ 0x40
 8002dd6:	2780      	movs	r7, #128	@ 0x80
 8002dd8:	f44f 7600 	mov.w	r6, #512	@ 0x200
 8002ddc:	f44f 6580 	mov.w	r5, #1024	@ 0x400
    _pal_init_event(i);
 8002de0:	2200      	movs	r2, #0
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002de2:	49ac      	ldr	r1, [pc, #688]	@ (8003094 <main+0x334>)
 8002de4:	f881 0306 	strb.w	r0, [r1, #774]	@ 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002de8:	f8c1 c180 	str.w	ip, [r1, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002dec:	f8c1 c000 	str.w	ip, [r1]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002df0:	f881 0307 	strb.w	r0, [r1, #775]	@ 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002df4:	f8c1 7180 	str.w	r7, [r1, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002df8:	600f      	str	r7, [r1, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002dfa:	f881 0308 	strb.w	r0, [r1, #776]	@ 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002dfe:	f8c1 4180 	str.w	r4, [r1, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002e02:	600c      	str	r4, [r1, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002e04:	f881 0309 	strb.w	r0, [r1, #777]	@ 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002e08:	f8c1 6180 	str.w	r6, [r1, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002e0c:	600e      	str	r6, [r1, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002e0e:	f881 030a 	strb.w	r0, [r1, #778]	@ 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002e12:	f8c1 5180 	str.w	r5, [r1, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002e16:	600d      	str	r5, [r1, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002e18:	f881 0317 	strb.w	r0, [r1, #791]	@ 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002e1c:	f8c1 3180 	str.w	r3, [r1, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002e20:	600b      	str	r3, [r1, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002e22:	4b9d      	ldr	r3, [pc, #628]	@ (8003098 <main+0x338>)
 8002e24:	f881 0328 	strb.w	r0, [r1, #808]	@ 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002e28:	f8c1 4184 	str.w	r4, [r1, #388]	@ 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002e2c:	604c      	str	r4, [r1, #4]
void _pal_lld_init(const PALConfig *config) {
 8002e2e:	1919      	adds	r1, r3, r4
  qp->prev = qp;
 8002e30:	e9c3 3300 	strd	r3, r3, [r3]
    _pal_init_event(i);
 8002e34:	e9c3 2202 	strd	r2, r2, [r3, #8]
  for (i = 0; i < 16; i++) {
 8002e38:	3310      	adds	r3, #16
 8002e3a:	4299      	cmp	r1, r3
 8002e3c:	d1f8      	bne.n	8002e30 <main+0xd0>
  rccEnableAPB2(APB2_EN_MASK, true);
 8002e3e:	4890      	ldr	r0, [pc, #576]	@ (8003080 <main+0x320>)
  GPIOA->CRH = config->PAData.crh;
 8002e40:	f04f 3388 	mov.w	r3, #2290649224	@ 0x88888888
  rccEnableAPB2(APB2_EN_MASK, true);
 8002e44:	6984      	ldr	r4, [r0, #24]
  GPIOA->ODR = config->PAData.odr;
 8002e46:	f04f 31ff 	mov.w	r1, #4294967295
  rccEnableAPB2(APB2_EN_MASK, true);
 8002e4a:	f044 047d 	orr.w	r4, r4, #125	@ 0x7d
 8002e4e:	6184      	str	r4, [r0, #24]
 8002e50:	6985      	ldr	r5, [r0, #24]
  ADCD1.dmamode = STM32_DMA_CR_PL(STM32_ADC_ADC1_DMA_PRIORITY) |
 8002e52:	f242 558a 	movw	r5, #9610	@ 0x258a
  adcp->state    = ADC_STOP;
 8002e56:	2701      	movs	r7, #1
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
 8002e58:	f04f 0c09 	mov.w	ip, #9
 8002e5c:	f8df 923c 	ldr.w	r9, [pc, #572]	@ 800309c <main+0x33c>
  GPIOA->ODR = config->PAData.odr;
 8002e60:	4c8f      	ldr	r4, [pc, #572]	@ (80030a0 <main+0x340>)
  GPIOC->ODR = config->PCData.odr;
 8002e62:	4e90      	ldr	r6, [pc, #576]	@ (80030a4 <main+0x344>)
  GPIOC->CRH = config->PCData.crh;
 8002e64:	f8df e240 	ldr.w	lr, [pc, #576]	@ 80030a8 <main+0x348>
  ADCD1.dmamode = STM32_DMA_CR_PL(STM32_ADC_ADC1_DMA_PRIORITY) |
 8002e68:	e9c9 250b 	strd	r2, r5, [r9, #44]	@ 0x2c
  adcp->grpp     = NULL;
 8002e6c:	e9c9 2203 	strd	r2, r2, [r9, #12]
  adcp->samples  = NULL;
 8002e70:	e9c9 2201 	strd	r2, r2, [r9, #4]
  adcp->thread   = NULL;
 8002e74:	f8c9 2014 	str.w	r2, [r9, #20]
  mp->owner = NULL;
 8002e78:	f8c9 2020 	str.w	r2, [r9, #32]
  GPIOD->ODR = config->PDData.odr;
 8002e7c:	4d8b      	ldr	r5, [pc, #556]	@ (80030ac <main+0x34c>)
  GPIOA->ODR = config->PAData.odr;
 8002e7e:	60e1      	str	r1, [r4, #12]
  GPIOA->CRH = config->PAData.crh;
 8002e80:	6063      	str	r3, [r4, #4]
  GPIOA->CRL = config->PAData.crl;
 8002e82:	6023      	str	r3, [r4, #0]
  GPIOB->ODR = config->PBData.odr;
 8002e84:	f8c4 140c 	str.w	r1, [r4, #1036]	@ 0x40c
  GPIOB->CRH = config->PBData.crh;
 8002e88:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
  GPIOB->CRL = config->PBData.crl;
 8002e8c:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
  GPIOC->ODR = config->PCData.odr;
 8002e90:	60f1      	str	r1, [r6, #12]
  GPIOC->CRH = config->PCData.crh;
 8002e92:	f8c6 e004 	str.w	lr, [r6, #4]
  GPIOC->CRL = config->PCData.crl;
 8002e96:	6033      	str	r3, [r6, #0]
  GPIOD->CRL = config->PDData.crl;
 8002e98:	4e85      	ldr	r6, [pc, #532]	@ (80030b0 <main+0x350>)
  GPIOB->ODR = config->PBData.odr;
 8002e9a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
  GPIOD->ODR = config->PDData.odr;
 8002e9e:	60e9      	str	r1, [r5, #12]
  GPIOD->CRH = config->PDData.crh;
 8002ea0:	606b      	str	r3, [r5, #4]
  GPIOD->CRL = config->PDData.crl;
 8002ea2:	602e      	str	r6, [r5, #0]
  GPIOE->ODR = config->PEData.odr;
 8002ea4:	f8c4 1c0c 	str.w	r1, [r4, #3084]	@ 0xc0c
  GPIOE->CRH = config->PEData.crh;
 8002ea8:	f8c4 3c04 	str.w	r3, [r4, #3076]	@ 0xc04
  GPIOE->CRL = config->PEData.crl;
 8002eac:	f8c4 3c00 	str.w	r3, [r4, #3072]	@ 0xc00
  adcp->state    = ADC_STOP;
 8002eb0:	f889 7000 	strb.w	r7, [r9]
  rccEnableADC1(true);
 8002eb4:	6983      	ldr	r3, [r0, #24]
  ADCD1.adc = ADC1;
 8002eb6:	497f      	ldr	r1, [pc, #508]	@ (80030b4 <main+0x354>)
  rccEnableADC1(true);
 8002eb8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ebc:	6183      	str	r3, [r0, #24]
  qp->next = qp;
 8002ebe:	f109 0318 	add.w	r3, r9, #24
  qp->prev = qp;
 8002ec2:	e9c9 3306 	strd	r3, r3, [r9, #24]
  ADCD1.adc = ADC1;
 8002ec6:	f8c9 1028 	str.w	r1, [r9, #40]	@ 0x28
  rccEnableADC1(true);
 8002eca:	6983      	ldr	r3, [r0, #24]
  ADC1->CR1 = 0;
 8002ecc:	604a      	str	r2, [r1, #4]
  ADC1->CR2 = ADC_CR2_ADON;
 8002ece:	608f      	str	r7, [r1, #8]
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
 8002ed0:	f8c1 c008 	str.w	ip, [r1, #8]
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
 8002ed4:	688b      	ldr	r3, [r1, #8]
 8002ed6:	071c      	lsls	r4, r3, #28
 8002ed8:	d4fc      	bmi.n	8002ed4 <main+0x174>
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
 8002eda:	2305      	movs	r3, #5
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
 8002edc:	4a75      	ldr	r2, [pc, #468]	@ (80030b4 <main+0x354>)
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
 8002ede:	608b      	str	r3, [r1, #8]
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
 8002ee0:	6893      	ldr	r3, [r2, #8]
 8002ee2:	f013 0304 	ands.w	r3, r3, #4
 8002ee6:	d1fb      	bne.n	8002ee0 <main+0x180>
  canp->state       = CAN_STOP;
 8002ee8:	461c      	mov	r4, r3
  rccDisableADC1();
 8002eea:	4e65      	ldr	r6, [pc, #404]	@ (8003080 <main+0x320>)
  ADC1->CR2 = 0;
 8002eec:	6094      	str	r4, [r2, #8]
  rccDisableADC1();
 8002eee:	69b2      	ldr	r2, [r6, #24]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002ef0:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8002ef4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ef8:	61b2      	str	r2, [r6, #24]
 8002efa:	69b2      	ldr	r2, [r6, #24]
 8002efc:	2301      	movs	r3, #1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002efe:	22b0      	movs	r2, #176	@ 0xb0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002f00:	f44f 1580 	mov.w	r5, #1048576	@ 0x100000
 8002f04:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002f08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002f0c:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8003094 <main+0x334>
 8002f10:	4f69      	ldr	r7, [pc, #420]	@ (80030b8 <main+0x358>)
  spip->state = SPI_STOP;
 8002f12:	f8df b1a8 	ldr.w	fp, [pc, #424]	@ 80030bc <main+0x35c>
 8002f16:	703b      	strb	r3, [r7, #0]
  canp->config      = NULL;
 8002f18:	607c      	str	r4, [r7, #4]
 8002f1a:	f88a 2313 	strb.w	r2, [sl, #787]	@ 0x313
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002f1e:	f8ca c180 	str.w	ip, [sl, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002f22:	f8ca c000 	str.w	ip, [sl]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002f26:	f88a 2314 	strb.w	r2, [sl, #788]	@ 0x314
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002f2a:	f8ca 5180 	str.w	r5, [sl, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002f2e:	f8ca 5000 	str.w	r5, [sl]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002f32:	f88a 2315 	strb.w	r2, [sl, #789]	@ 0x315
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002f36:	f8ca 0180 	str.w	r0, [sl, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002f3a:	f8ca 0000 	str.w	r0, [sl]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002f3e:	f88a 2316 	strb.w	r2, [sl, #790]	@ 0x316
  CAND1.can = CAN1;
 8002f42:	4a5f      	ldr	r2, [pc, #380]	@ (80030c0 <main+0x360>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002f44:	f8ca 1180 	str.w	r1, [sl, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002f48:	f8ca 1000 	str.w	r1, [sl]
 8002f4c:	627a      	str	r2, [r7, #36]	@ 0x24
  qp->next = qp;
 8002f4e:	f107 0208 	add.w	r2, r7, #8
  qp->prev = qp;
 8002f52:	e9c7 2202 	strd	r2, r2, [r7, #8]
  qp->next = qp;
 8002f56:	f107 0210 	add.w	r2, r7, #16
  qp->prev = qp;
 8002f5a:	e9c7 2204 	strd	r2, r2, [r7, #16]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8002f5e:	f107 0218 	add.w	r2, r7, #24
 8002f62:	61ba      	str	r2, [r7, #24]
 8002f64:	f107 021c 	add.w	r2, r7, #28
 8002f68:	61fa      	str	r2, [r7, #28]
 8002f6a:	f107 0220 	add.w	r2, r7, #32
  can_lld_set_filters(&CAND1, STM32_CAN_MAX_FILTERS, 0, NULL);
 8002f6e:	4621      	mov	r1, r4
 8002f70:	200e      	movs	r0, #14
 8002f72:	623a      	str	r2, [r7, #32]
 8002f74:	4622      	mov	r2, r4
 8002f76:	f7fd fd9b 	bl	8000ab0 <can_lld_set_filters.constprop.0>
  sdp->vmt = &vmt;
 8002f7a:	4d52      	ldr	r5, [pc, #328]	@ (80030c4 <main+0x364>)
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8002f7c:	f241 0e0a 	movw	lr, #4106	@ 0x100a
 8002f80:	4628      	mov	r0, r5
 8002f82:	f8cb e028 	str.w	lr, [fp, #40]	@ 0x28
 8002f86:	f8df e140 	ldr.w	lr, [pc, #320]	@ 80030c8 <main+0x368>
  sdp->state = SD_STOP;
 8002f8a:	2301      	movs	r3, #1
  sdp->vmt = &vmt;
 8002f8c:	f840 eb04 	str.w	lr, [r0], #4
 8002f90:	6068      	str	r0, [r5, #4]
  oqp->q_notify  = onfy;
 8002f92:	484e      	ldr	r0, [pc, #312]	@ (80030cc <main+0x36c>)
  oqp->q_counter = size;
 8002f94:	f04f 0810 	mov.w	r8, #16
  oqp->q_notify  = onfy;
 8002f98:	64e8      	str	r0, [r5, #76]	@ 0x4c
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
 8002f9a:	484d      	ldr	r0, [pc, #308]	@ (80030d0 <main+0x370>)
  iqp->q_counter = 0;
 8002f9c:	616c      	str	r4, [r5, #20]
 8002f9e:	6768      	str	r0, [r5, #116]	@ 0x74
  SPID2.spi       = SPI2;
 8002fa0:	f5a0 3080 	sub.w	r0, r0, #65536	@ 0x10000
 8002fa4:	f8cb 001c 	str.w	r0, [fp, #28]
  iqp->q_top     = bp + size;
 8002fa8:	f105 0064 	add.w	r0, r5, #100	@ 0x64
  oqp->q_wrptr   = bp;
 8002fac:	e9c5 0011 	strd	r0, r0, [r5, #68]	@ 0x44
  iqp->q_top     = bp + size;
 8002fb0:	61e8      	str	r0, [r5, #28]
  oqp->q_buffer  = bp;
 8002fb2:	63e8      	str	r0, [r5, #60]	@ 0x3c
  iqp->q_buffer  = bp;
 8002fb4:	f105 0054 	add.w	r0, r5, #84	@ 0x54
  iqp->q_wrptr   = bp;
 8002fb8:	e9c5 0008 	strd	r0, r0, [r5, #32]
  iqp->q_buffer  = bp;
 8002fbc:	61a8      	str	r0, [r5, #24]
  qp->next = qp;
 8002fbe:	f105 000c 	add.w	r0, r5, #12
  qp->prev = qp;
 8002fc2:	e9c5 0003 	strd	r0, r0, [r5, #12]
  qp->next = qp;
 8002fc6:	f105 0030 	add.w	r0, r5, #48	@ 0x30
  qp->prev = qp;
 8002fca:	e9c5 000c 	strd	r0, r0, [r5, #48]	@ 0x30
  qp->next = qp;
 8002fce:	f10b 000c 	add.w	r0, fp, #12
  qp->prev = qp;
 8002fd2:	e9cb 0003 	strd	r0, r0, [fp, #12]
  oqp->q_top     = bp + size;
 8002fd6:	f105 0074 	add.w	r0, r5, #116	@ 0x74
 8002fda:	6428      	str	r0, [r5, #64]	@ 0x40
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8002fdc:	f241 0018 	movw	r0, #4120	@ 0x1018
  oqp->q_counter = size;
 8002fe0:	f8c5 8038 	str.w	r8, [r5, #56]	@ 0x38
  sdp->state = SD_STOP;
 8002fe4:	722b      	strb	r3, [r5, #8]
 8002fe6:	f88b 3000 	strb.w	r3, [fp]
  spip->thread = NULL;
 8002fea:	e9cb 4401 	strd	r4, r4, [fp, #4]
  SPID2.dmatx     = NULL;
 8002fee:	e9cb 4408 	strd	r4, r4, [fp, #32]
  iqp->q_link    = link;
 8002ff2:	62ed      	str	r5, [r5, #44]	@ 0x2c
  oqp->q_link    = link;
 8002ff4:	652d      	str	r5, [r5, #80]	@ 0x50
  iqp->q_notify  = infy;
 8002ff6:	62ac      	str	r4, [r5, #40]	@ 0x28
 8002ff8:	f8cb 4014 	str.w	r4, [fp, #20]
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8002ffc:	f8cb 002c 	str.w	r0, [fp, #44]	@ 0x2c
  ST_ENABLE_CLOCK();
 8003000:	69f0      	ldr	r0, [r6, #28]
  ST_ENABLE_STOP();
 8003002:	f8df e0d0 	ldr.w	lr, [pc, #208]	@ 80030d4 <main+0x374>
  ST_ENABLE_CLOCK();
 8003006:	4318      	orrs	r0, r3
 8003008:	61f0      	str	r0, [r6, #28]
 800300a:	69f0      	ldr	r0, [r6, #28]
  dlhp->delta = (sysinterval_t)-1;
 800300c:	f04f 30ff 	mov.w	r0, #4294967295
  pqp->next = pqp;
 8003010:	4e31      	ldr	r6, [pc, #196]	@ (80030d8 <main+0x378>)
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003012:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  pqp->prio = (tprio_t)0;
 8003016:	e9c6 6401 	strd	r6, r4, [r6, #4]
 800301a:	6270      	str	r0, [r6, #36]	@ 0x24
  ST_ENABLE_STOP();
 800301c:	f8de 0004 	ldr.w	r0, [lr, #4]
  ch.vtlist.lasttime = (systime_t)0;
 8003020:	8534      	strh	r4, [r6, #40]	@ 0x28
 8003022:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
 8003026:	f8ce 0004 	str.w	r0, [lr, #4]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800302a:	f645 5ebf 	movw	lr, #23999	@ 0x5dbf
 800302e:	f8c2 e028 	str.w	lr, [r2, #40]	@ 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8003032:	f64f 7eff 	movw	lr, #65535	@ 0xffff
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003036:	f04f 5c80 	mov.w	ip, #268435456	@ 0x10000000
 800303a:	f8c2 e02c 	str.w	lr, [r2, #44]	@ 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 800303e:	6194      	str	r4, [r2, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8003040:	6354      	str	r4, [r2, #52]	@ 0x34
  STM32_ST_TIM->DIER   = 0;
 8003042:	60d4      	str	r4, [r2, #12]
  STM32_ST_TIM->CR2    = 0;
 8003044:	6054      	str	r4, [r2, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8003046:	6153      	str	r3, [r2, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8003048:	6013      	str	r3, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800304a:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
  ch_memcore.basemem = __heap_base__;
 800304e:	4823      	ldr	r0, [pc, #140]	@ (80030dc <main+0x37c>)
 8003050:	f88a 331c 	strb.w	r3, [sl, #796]	@ 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003054:	f8ca c180 	str.w	ip, [sl, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003058:	f8ca c000 	str.w	ip, [sl]
 800305c:	f8df c080 	ldr.w	ip, [pc, #128]	@ 80030e0 <main+0x380>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8003060:	4a20      	ldr	r2, [pc, #128]	@ (80030e4 <main+0x384>)
 8003062:	f8c0 c000 	str.w	ip, [r0]
  ch_memcore.topmem  = __heap_end__;
 8003066:	f8df c080 	ldr.w	ip, [pc, #128]	@ 80030e8 <main+0x388>
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
 800306a:	e9c2 4401 	strd	r4, r4, [r2, #4]
 800306e:	f8c0 c004 	str.w	ip, [r0, #4]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8003072:	481e      	ldr	r0, [pc, #120]	@ (80030ec <main+0x38c>)
 8003074:	6154      	str	r4, [r2, #20]
 8003076:	6010      	str	r0, [r2, #0]
  dlhp->next  = dlhp;
 8003078:	f106 001c 	add.w	r0, r6, #28
 800307c:	e038      	b.n	80030f0 <main+0x390>
 800307e:	bf00      	nop
 8003080:	40021000 	.word	0x40021000
 8003084:	200012bc 	.word	0x200012bc
 8003088:	40007000 	.word	0x40007000
 800308c:	08003614 	.word	0x08003614
 8003090:	40020000 	.word	0x40020000
 8003094:	e000e100 	.word	0xe000e100
 8003098:	20001324 	.word	0x20001324
 800309c:	20000b68 	.word	0x20000b68
 80030a0:	40010800 	.word	0x40010800
 80030a4:	40011000 	.word	0x40011000
 80030a8:	88388888 	.word	0x88388888
 80030ac:	40011400 	.word	0x40011400
 80030b0:	88888844 	.word	0x88888844
 80030b4:	40012400 	.word	0x40012400
 80030b8:	200012fc 	.word	0x200012fc
 80030bc:	20000ce8 	.word	0x20000ce8
 80030c0:	40006400 	.word	0x40006400
 80030c4:	20001240 	.word	0x20001240
 80030c8:	080035b4 	.word	0x080035b4
 80030cc:	08000821 	.word	0x08000821
 80030d0:	40013800 	.word	0x40013800
 80030d4:	e0042000 	.word	0xe0042000
 80030d8:	20001428 	.word	0x20001428
 80030dc:	20001238 	.word	0x20001238
 80030e0:	200014a0 	.word	0x200014a0
 80030e4:	200009b8 	.word	0x200009b8
 80030e8:	20005000 	.word	0x20005000
 80030ec:	080009a1 	.word	0x080009a1
  dlhp->prev  = dlhp;
 80030f0:	e9c6 0007 	strd	r0, r0, [r6, #28]
  qp->next = qp;
 80030f4:	f102 000c 	add.w	r0, r2, #12
  qp->prev = qp;
 80030f8:	e9c2 0003 	strd	r0, r0, [r2, #12]
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
 80030fc:	2214      	movs	r2, #20
  qp->next = qp;
 80030fe:	4bc2      	ldr	r3, [pc, #776]	@ (8003408 <main+0x6a8>)
  pqp->next = pqp;
 8003100:	6036      	str	r6, [r6, #0]
  qp->next = qp;
 8003102:	601b      	str	r3, [r3, #0]
  qp->prev = qp;
 8003104:	605b      	str	r3, [r3, #4]
 8003106:	619a      	str	r2, [r3, #24]
 8003108:	221c      	movs	r2, #28
  mp->align = align;
 800310a:	2104      	movs	r1, #4
  mp->object_size = size;
 800310c:	631a      	str	r2, [r3, #48]	@ 0x30
  mp->provider = provider;
 800310e:	4abf      	ldr	r2, [pc, #764]	@ (800340c <main+0x6ac>)
 8003110:	609c      	str	r4, [r3, #8]
 8003112:	621a      	str	r2, [r3, #32]
 8003114:	639a      	str	r2, [r3, #56]	@ 0x38
  } while ((c != (char)0) && (i > 0U));
}

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 8003116:	f103 0210 	add.w	r2, r3, #16
 800311a:	611a      	str	r2, [r3, #16]
 800311c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8003120:	625a      	str	r2, [r3, #36]	@ 0x24
 8003122:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8003126:	629a      	str	r2, [r3, #40]	@ 0x28
 8003128:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800312c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800312e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8003132:	641a      	str	r2, [r3, #64]	@ 0x40
 8003134:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8003138:	645a      	str	r2, [r3, #68]	@ 0x44
  mp->next = NULL;
 800313a:	615c      	str	r4, [r3, #20]
  tmp->cumulative = (rttime_t)0;
 800313c:	2200      	movs	r2, #0
  mp->align = align;
 800313e:	61d9      	str	r1, [r3, #28]
 8003140:	6359      	str	r1, [r3, #52]	@ 0x34
  mp->next = NULL;
 8003142:	62dc      	str	r4, [r3, #44]	@ 0x2c
 8003144:	2300      	movs	r3, #0
  tmp->best       = (rtcnt_t)-1;
 8003146:	f04f 30ff 	mov.w	r0, #4294967295
  tmp->cumulative = (rttime_t)0;
 800314a:	4688      	mov	r8, r1
 800314c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  tmp->best       = (rtcnt_t)-1;
 8003150:	9000      	str	r0, [sp, #0]
  ch.tm.offset = (rtcnt_t)0;
 8003152:	6774      	str	r4, [r6, #116]	@ 0x74
  tmp->worst      = (rtcnt_t)0;
 8003154:	9401      	str	r4, [sp, #4]
  tmp->n          = (ucnt_t)0;
 8003156:	9403      	str	r4, [sp, #12]
    chTMStartMeasurementX(&tm);
 8003158:	4668      	mov	r0, sp
 800315a:	f7fd fba9 	bl	80008b0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 800315e:	f7fd fbaf 	bl	80008c0 <chTMStopMeasurementX>
  } while (i > 0U);
 8003162:	f1b8 0801 	subs.w	r8, r8, #1
 8003166:	d1f7      	bne.n	8003158 <main+0x3f8>
  tp->hdr.pqueue.prio = prio;
 8003168:	2080      	movs	r0, #128	@ 0x80
  tp->refs            = (trefs_t)1;
 800316a:	2101      	movs	r1, #1
  ch.tm.offset = tm.best;
 800316c:	9a00      	ldr	r2, [sp, #0]
  REG_INSERT(tp);
 800316e:	4ba8      	ldr	r3, [pc, #672]	@ (8003410 <main+0x6b0>)
 8003170:	6772      	str	r2, [r6, #116]	@ 0x74
  tp->name            = name;
 8003172:	4aa8      	ldr	r2, [pc, #672]	@ (8003414 <main+0x6b4>)
  REG_INSERT(tp);
 8003174:	e9c6 3304 	strd	r3, r3, [r6, #16]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8003178:	61b3      	str	r3, [r6, #24]
  tp->name            = name;
 800317a:	64b2      	str	r2, [r6, #72]	@ 0x48
  qp->next = qp;
 800317c:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
  lp->next = lp;
 8003180:	3328      	adds	r3, #40	@ 0x28
  qp->next = qp;
 8003182:	e9c6 3216 	strd	r3, r2, [r6, #88]	@ 0x58
  qp->prev = qp;
 8003186:	6632      	str	r2, [r6, #96]	@ 0x60
  tp->epending        = (eventmask_t)0;
 8003188:	e9c6 8819 	strd	r8, r8, [r6, #100]	@ 0x64
 800318c:	2220      	movs	r2, #32
  REG_INSERT(tp);
 800318e:	e9c6 6610 	strd	r6, r6, [r6, #64]	@ 0x40
  currp->wabase = NULL;
 8003192:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
  tp->hdr.pqueue.prio = prio;
 8003196:	63b0      	str	r0, [r6, #56]	@ 0x38
  tp->realprio        = prio;
 8003198:	66f0      	str	r0, [r6, #108]	@ 0x6c
  tp->refs            = (trefs_t)1;
 800319a:	f886 1052 	strb.w	r1, [r6, #82]	@ 0x52
  currp->state = CH_STATE_CURRENT;
 800319e:	f8a6 1050 	strh.w	r1, [r6, #80]	@ 0x50
 80031a2:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("cpsie i" : : : "memory");
 80031a6:	b662      	cpsie	i
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031a8:	f64f 0eff 	movw	lr, #63743	@ 0xf8ff
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ac:	2410      	movs	r4, #16
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ae:	4b9a      	ldr	r3, [pc, #616]	@ (8003418 <main+0x6b8>)
  reg_value  =  (reg_value                                   |
 80031b0:	489a      	ldr	r0, [pc, #616]	@ (800341c <main+0x6bc>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b6:	ea0c 0c0e 	and.w	ip, ip, lr
  reg_value  =  (reg_value                                   |
 80031ba:	ea4c 0000 	orr.w	r0, ip, r0
  SCB->AIRCR =  reg_value;
 80031be:	60d8      	str	r0, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80031c0:	f8d3 00fc 	ldr.w	r0, [r3, #252]	@ 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80031c4:	f8df c258 	ldr.w	ip, [pc, #600]	@ 8003420 <main+0x6c0>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80031c8:	f040 7080 	orr.w	r0, r0, #16777216	@ 0x1000000
 80031cc:	f8c3 00fc 	str.w	r0, [r3, #252]	@ 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80031d0:	f8dc 0000 	ldr.w	r0, [ip]
 80031d4:	4308      	orrs	r0, r1
 80031d6:	f8cc 0000 	str.w	r0, [ip]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031da:	77dc      	strb	r4, [r3, #31]
 80031dc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80031e0:	f388 8811 	msr	BASEPRI, r8
  __ASM volatile ("cpsie i" : : : "memory");
 80031e4:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80031e6:	f382 8811 	msr	BASEPRI, r2
  tp->state           = CH_STATE_WTSTART;
 80031ea:	2202      	movs	r2, #2
  tp->wabase = tdp->wbase;
 80031ec:	4b8d      	ldr	r3, [pc, #564]	@ (8003424 <main+0x6c4>)
  tp->hdr.pqueue.prio = prio;
 80031ee:	f8c3 1098 	str.w	r1, [r3, #152]	@ 0x98
  tp->realprio        = prio;
 80031f2:	f8c3 10cc 	str.w	r1, [r3, #204]	@ 0xcc
  tp->refs            = (trefs_t)1;
 80031f6:	f883 10b2 	strb.w	r1, [r3, #178]	@ 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80031fa:	498b      	ldr	r1, [pc, #556]	@ (8003428 <main+0x6c8>)
  tp->state           = CH_STATE_WTSTART;
 80031fc:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8003200:	66d9      	str	r1, [r3, #108]	@ 0x6c
 8003202:	498a      	ldr	r1, [pc, #552]	@ (800342c <main+0x6cc>)
  REG_INSERT(tp);
 8003204:	6972      	ldr	r2, [r6, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8003206:	f8c3 108c 	str.w	r1, [r3, #140]	@ 0x8c
  tp->name            = name;
 800320a:	4989      	ldr	r1, [pc, #548]	@ (8003430 <main+0x6d0>)
  REG_INSERT(tp);
 800320c:	f103 0090 	add.w	r0, r3, #144	@ 0x90
  tp->name            = name;
 8003210:	f8c3 10a8 	str.w	r1, [r3, #168]	@ 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8003214:	f103 016c 	add.w	r1, r3, #108	@ 0x6c
  REG_INSERT(tp);
 8003218:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tp->epending        = (eventmask_t)0;
 800321c:	e9c3 8831 	strd	r8, r8, [r3, #196]	@ 0xc4
  tp->wabase = tdp->wbase;
 8003220:	f8c3 30ac 	str.w	r3, [r3, #172]	@ 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8003224:	f8c3 8070 	str.w	r8, [r3, #112]	@ 0x70
  REG_INSERT(tp);
 8003228:	f8c3 60a0 	str.w	r6, [r3, #160]	@ 0xa0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800322c:	f8c3 109c 	str.w	r1, [r3, #156]	@ 0x9c
  REG_INSERT(tp);
 8003230:	6110      	str	r0, [r2, #16]
  qp->next = qp;
 8003232:	f103 02bc 	add.w	r2, r3, #188	@ 0xbc
  qp->prev = qp;
 8003236:	e9c3 222f 	strd	r2, r2, [r3, #188]	@ 0xbc
  lp->next = lp;
 800323a:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 800323e:	6170      	str	r0, [r6, #20]
 8003240:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  chSchWakeupS(tp, MSG_OK);
 8003244:	f7fd ffc4 	bl	80011d0 <chSchWakeupS.constprop.0>
 8003248:	f388 8811 	msr	BASEPRI, r8
   *   RTOS is active.
   */
    halInit();
    chSysInit();

    palSetPadMode(GPIOB, 9, PAL_MODE_INPUT_PULLDOWN);
 800324c:	4879      	ldr	r0, [pc, #484]	@ (8003434 <main+0x6d4>)
 800324e:	2204      	movs	r2, #4
 8003250:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003254:	f7fd fa2c 	bl	80006b0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB, 8, PAL_MODE_INPUT_PULLDOWN);
 8003258:	2204      	movs	r2, #4
 800325a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800325e:	f7fd fa27 	bl	80006b0 <_pal_lld_setgroupmode>
    if (palReadPad(GPIOB, 9) && palReadPad(GPIOB, 8)) {
 8003262:	6883      	ldr	r3, [r0, #8]
 8003264:	059a      	lsls	r2, r3, #22
 8003266:	f140 8133 	bpl.w	80034d0 <main+0x770>
 800326a:	6883      	ldr	r3, [r0, #8]
 800326c:	05db      	lsls	r3, r3, #23
 800326e:	f140 812f 	bpl.w	80034d0 <main+0x770>
 8003272:	2320      	movs	r3, #32
 8003274:	f383 8811 	msr	BASEPRI, r3
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8003278:	7a2a      	ldrb	r2, [r5, #8]
 800327a:	2a01      	cmp	r2, #1
 800327c:	d10c      	bne.n	8003298 <main+0x538>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800327e:	24c0      	movs	r4, #192	@ 0xc0
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(true);
 8003280:	496d      	ldr	r1, [pc, #436]	@ (8003438 <main+0x6d8>)
 8003282:	4a6e      	ldr	r2, [pc, #440]	@ (800343c <main+0x6dc>)
 8003284:	6988      	ldr	r0, [r1, #24]
 8003286:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 800328a:	6188      	str	r0, [r1, #24]
 800328c:	6989      	ldr	r1, [r1, #24]
 800328e:	f882 4325 	strb.w	r4, [r2, #805]	@ 0x325
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003292:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003296:	6053      	str	r3, [r2, #4]
  u->BRR = fck;
 8003298:	f240 2271 	movw	r2, #625	@ 0x271
  USART_TypeDef *u = sdp->usart;
 800329c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
  u->SR = 0;
 800329e:	2400      	movs	r4, #0
  u->BRR = fck;
 80032a0:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80032a2:	2240      	movs	r2, #64	@ 0x40
 80032a4:	611a      	str	r2, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80032a6:	2201      	movs	r2, #1
 80032a8:	615a      	str	r2, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80032aa:	f242 122c 	movw	r2, #8492	@ 0x212c
    sdp->rxmask = 0xFF;
 80032ae:	21ff      	movs	r1, #255	@ 0xff
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80032b0:	60da      	str	r2, [r3, #12]
  sdp->state = SD_READY;
 80032b2:	2202      	movs	r2, #2
  u->SR = 0;
 80032b4:	601c      	str	r4, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 80032b6:	6818      	ldr	r0, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80032b8:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 80032ba:	f885 1078 	strb.w	r1, [r5, #120]	@ 0x78
 80032be:	722a      	strb	r2, [r5, #8]
 80032c0:	f384 8811 	msr	BASEPRI, r4
 80032c4:	2320      	movs	r3, #32
 80032c6:	f383 8811 	msr	BASEPRI, r3
  if (adcp->state == ADC_STOP) {
 80032ca:	f899 3000 	ldrb.w	r3, [r9]
  adcp->config = config;
 80032ce:	f8c9 4004 	str.w	r4, [r9, #4]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d114      	bne.n	8003300 <main+0x5a0>
  if (id < STM32_DMA_STREAMS) {
 80032d6:	2106      	movs	r1, #6
 80032d8:	4b59      	ldr	r3, [pc, #356]	@ (8003440 <main+0x6e0>)
 80032da:	4a5a      	ldr	r2, [pc, #360]	@ (8003444 <main+0x6e4>)
 80032dc:	4620      	mov	r0, r4
 80032de:	f7fd f98f 	bl	8000600 <dmaStreamAllocI.part.0>
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 80032e2:	4d59      	ldr	r5, [pc, #356]	@ (8003448 <main+0x6e8>)
 80032e4:	6842      	ldr	r2, [r0, #4]
      rccEnableADC1(true);
 80032e6:	4b54      	ldr	r3, [pc, #336]	@ (8003438 <main+0x6d8>)
    adcp->adc->CR1 = 0;
 80032e8:	f8d9 1028 	ldr.w	r1, [r9, #40]	@ 0x28
      adcp->dmastp = dmaStreamAllocI(STM32_DMA_STREAM_ID(1, 1),
 80032ec:	f8c9 002c 	str.w	r0, [r9, #44]	@ 0x2c
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 80032f0:	6095      	str	r5, [r2, #8]
      rccEnableADC1(true);
 80032f2:	699a      	ldr	r2, [r3, #24]
 80032f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f8:	619a      	str	r2, [r3, #24]
 80032fa:	699b      	ldr	r3, [r3, #24]
    adcp->adc->CR1 = 0;
 80032fc:	604c      	str	r4, [r1, #4]
    adcp->adc->CR2 = 0;
 80032fe:	608c      	str	r4, [r1, #8]
  adcp->state = ADC_READY;
 8003300:	2502      	movs	r5, #2
 8003302:	f04f 0800 	mov.w	r8, #0
 8003306:	f889 5000 	strb.w	r5, [r9]
 800330a:	f388 8811 	msr	BASEPRI, r8
}

void startAdcThread(void)
{
    adcStart(&ADCD1, NULL);
    chThdCreateStatic(waAdcThread, sizeof(waAdcThread), NORMALPRIO + 30, AdcThread, NULL);
 800330e:	219e      	movs	r1, #158	@ 0x9e
 8003310:	4a4e      	ldr	r2, [pc, #312]	@ (800344c <main+0x6ec>)
 8003312:	484f      	ldr	r0, [pc, #316]	@ (8003450 <main+0x6f0>)
 8003314:	f7fd ff8c 	bl	8001230 <chThdCreateStatic.constprop.0.isra.0>
 8003318:	2620      	movs	r6, #32
 800331a:	f386 8811 	msr	BASEPRI, r6
  spip->config = config;
 800331e:	4b4d      	ldr	r3, [pc, #308]	@ (8003454 <main+0x6f4>)
 8003320:	f8cb 3004 	str.w	r3, [fp, #4]
  spi_lld_start(spip);
 8003324:	f7fd fb6c 	bl	8000a00 <spi_lld_start.constprop.0>
  spip->state = SPI_READY;
 8003328:	f88b 5000 	strb.w	r5, [fp]
 800332c:	f388 8811 	msr	BASEPRI, r8
}

void startOutThread(void)
{
    palSetPadMode(GPIOD, 0, PAL_MODE_OUTPUT_PUSHPULL);
    palClearPad(GPIOD, 0);
 8003330:	2401      	movs	r4, #1
}

void startSpiThread(void)
{
    spiStart(&SPID2, &spi2_cfg);
    chThdCreateStatic(waSpiThread, sizeof(waSpiThread), NORMALPRIO, SpiThread, NULL);
 8003332:	2180      	movs	r1, #128	@ 0x80
 8003334:	4a48      	ldr	r2, [pc, #288]	@ (8003458 <main+0x6f8>)
 8003336:	4849      	ldr	r0, [pc, #292]	@ (800345c <main+0x6fc>)
 8003338:	f7fd ff7a 	bl	8001230 <chThdCreateStatic.constprop.0.isra.0>
    }
}

void startDigitalThread(void)
{
    palSetPadMode(GPIOB, 3, PAL_MODE_INPUT_PULLUP);
 800333c:	483d      	ldr	r0, [pc, #244]	@ (8003434 <main+0x6d4>)
 800333e:	2203      	movs	r2, #3
 8003340:	2108      	movs	r1, #8
 8003342:	f7fd f9b5 	bl	80006b0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB, 4, PAL_MODE_INPUT_PULLUP);
 8003346:	2203      	movs	r2, #3
 8003348:	2110      	movs	r1, #16
 800334a:	f7fd f9b1 	bl	80006b0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB, 5, PAL_MODE_INPUT_PULLUP);
 800334e:	4631      	mov	r1, r6
 8003350:	2203      	movs	r2, #3
 8003352:	f7fd f9ad 	bl	80006b0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB, 6, PAL_MODE_INPUT_PULLUP);
 8003356:	2203      	movs	r2, #3
 8003358:	2140      	movs	r1, #64	@ 0x40
 800335a:	f7fd f9a9 	bl	80006b0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB, 7, PAL_MODE_INPUT_PULLUP);
 800335e:	2203      	movs	r2, #3
 8003360:	2180      	movs	r1, #128	@ 0x80
 8003362:	f7fd f9a5 	bl	80006b0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB, 15, PAL_MODE_INPUT_PULLUP);
 8003366:	2203      	movs	r2, #3
 8003368:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800336c:	f7fd f9a0 	bl	80006b0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, 15, PAL_MODE_INPUT_PULLUP);
 8003370:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
 8003374:	2203      	movs	r2, #3
 8003376:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800337a:	f7fd f999 	bl	80006b0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, 8, PAL_MODE_INPUT_PULLUP);
 800337e:	2203      	movs	r2, #3
 8003380:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003384:	f7fd f994 	bl	80006b0 <_pal_lld_setgroupmode>
    chThdCreateStatic(waDigitalThread, sizeof(waDigitalThread), NORMALPRIO + 2, DigitalThread, NULL);
 8003388:	2182      	movs	r1, #130	@ 0x82
 800338a:	4a35      	ldr	r2, [pc, #212]	@ (8003460 <main+0x700>)
 800338c:	4835      	ldr	r0, [pc, #212]	@ (8003464 <main+0x704>)
 800338e:	f7fd ff4f 	bl	8001230 <chThdCreateStatic.constprop.0.isra.0>
    palSetPadMode(GPIOD, 0, PAL_MODE_OUTPUT_PUSHPULL);
 8003392:	4835      	ldr	r0, [pc, #212]	@ (8003468 <main+0x708>)
 8003394:	2206      	movs	r2, #6
 8003396:	2101      	movs	r1, #1
 8003398:	f7fd f98a 	bl	80006b0 <_pal_lld_setgroupmode>
    palClearPad(GPIOD, 0);
 800339c:	6144      	str	r4, [r0, #20]
    palSetPadMode(GPIOC, 13, PAL_MODE_OUTPUT_PUSHPULL);
 800339e:	2206      	movs	r2, #6
 80033a0:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
 80033a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80033a8:	f7fd f982 	bl	80006b0 <_pal_lld_setgroupmode>
    palClearPad(GPIOC, 13);
 80033ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    palSetPadMode(GPIOC, 14, PAL_MODE_OUTPUT_PUSHPULL);
 80033b0:	2206      	movs	r2, #6
    palClearPad(GPIOC, 13);
 80033b2:	6143      	str	r3, [r0, #20]
    palSetPadMode(GPIOC, 14, PAL_MODE_OUTPUT_PUSHPULL);
 80033b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80033b8:	f7fd f97a 	bl	80006b0 <_pal_lld_setgroupmode>
    palClearPad(GPIOC, 14);
 80033bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    palSetPadMode(GPIOC, 15, PAL_MODE_OUTPUT_PUSHPULL);
 80033c0:	2206      	movs	r2, #6
    palClearPad(GPIOC, 14);
 80033c2:	6143      	str	r3, [r0, #20]
    palSetPadMode(GPIOC, 15, PAL_MODE_OUTPUT_PUSHPULL);
 80033c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033c8:	f7fd f972 	bl	80006b0 <_pal_lld_setgroupmode>
    palClearPad(GPIOC, 15);
 80033cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
    chThdCreateStatic(waOutThread, sizeof(waOutThread), NORMALPRIO, OutThread, NULL);
 80033d0:	2180      	movs	r1, #128	@ 0x80
    palClearPad(GPIOC, 15);
 80033d2:	6143      	str	r3, [r0, #20]
    chThdCreateStatic(waOutThread, sizeof(waOutThread), NORMALPRIO, OutThread, NULL);
 80033d4:	4a25      	ldr	r2, [pc, #148]	@ (800346c <main+0x70c>)
 80033d6:	4826      	ldr	r0, [pc, #152]	@ (8003470 <main+0x710>)
 80033d8:	f7fd ff2a 	bl	8001230 <chThdCreateStatic.constprop.0.isra.0>
  osalDbgAssert(CAND3.state == CAN_STOP, "invalid state");
#endif

#if STM32_CAN_USE_CAN1
  if (canp == &CAND1) {
    can_lld_set_filters(canp, can2sb, num, cfp);
 80033dc:	4640      	mov	r0, r8
 80033de:	4621      	mov	r1, r4
 80033e0:	4a24      	ldr	r2, [pc, #144]	@ (8003474 <main+0x714>)
 80033e2:	f7fd fb65 	bl	8000ab0 <can_lld_set_filters.constprop.0>
 80033e6:	f386 8811 	msr	BASEPRI, r6
    rccEnableCAN1(true);
 80033ea:	4a13      	ldr	r2, [pc, #76]	@ (8003438 <main+0x6d8>)
  canp->state = CAN_STARTING;
 80033ec:	703d      	strb	r5, [r7, #0]
 80033ee:	69d1      	ldr	r1, [r2, #28]
  canp->config = config;
 80033f0:	4821      	ldr	r0, [pc, #132]	@ (8003478 <main+0x718>)
  canp->can->MCR = CAN_MCR_INRQ;
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    rccEnableCAN1(true);
 80033f4:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	61d1      	str	r1, [r2, #28]
 80033fc:	69d2      	ldr	r2, [r2, #28]
  canp->can->MCR = CAN_MCR_INRQ;
 80033fe:	601c      	str	r4, [r3, #0]
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	07d1      	lsls	r1, r2, #31
 8003404:	d442      	bmi.n	800348c <main+0x72c>
 8003406:	e039      	b.n	800347c <main+0x71c>
 8003408:	200009d4 	.word	0x200009d4
 800340c:	080009e1 	.word	0x080009e1
 8003410:	20001458 	.word	0x20001458
 8003414:	080035dc 	.word	0x080035dc
 8003418:	e000ed00 	.word	0xe000ed00
 800341c:	05fa0300 	.word	0x05fa0300
 8003420:	e0001000 	.word	0xe0001000
 8003424:	20000860 	.word	0x20000860
 8003428:	08000831 	.word	0x08000831
 800342c:	08000261 	.word	0x08000261
 8003430:	08003584 	.word	0x08003584
 8003434:	40010c00 	.word	0x40010c00
 8003438:	40021000 	.word	0x40021000
 800343c:	e000e100 	.word	0xe000e100
 8003440:	20000b68 	.word	0x20000b68
 8003444:	08000421 	.word	0x08000421
 8003448:	4001244c 	.word	0x4001244c
 800344c:	080029f1 	.word	0x080029f1
 8003450:	20000a20 	.word	0x20000a20
 8003454:	20000840 	.word	0x20000840
 8003458:	08002c51 	.word	0x08002c51
 800345c:	20000ba0 	.word	0x20000ba0
 8003460:	080028e1 	.word	0x080028e1
 8003464:	20000d18 	.word	0x20000d18
 8003468:	40011400 	.word	0x40011400
 800346c:	08002831 	.word	0x08002831
 8003470:	20000e60 	.word	0x20000e60
 8003474:	20000854 	.word	0x20000854
 8003478:	080035f4 	.word	0x080035f4
 800347c:	2101      	movs	r1, #1
 800347e:	2008      	movs	r0, #8
 8003480:	f7fd fb96 	bl	8000bb0 <chSchGoSleepTimeoutS>
 8003484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	07d2      	lsls	r2, r2, #31
 800348a:	d5f7      	bpl.n	800347c <main+0x71c>
  canp->state = CAN_READY;
 800348c:	2104      	movs	r1, #4
  canp->can->BTR = canp->config->btr;
 800348e:	687a      	ldr	r2, [r7, #4]
  canp->can->MCR = canp->config->mcr;
 8003490:	e9d2 0400 	ldrd	r0, r4, [r2]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 8003494:	4a15      	ldr	r2, [pc, #84]	@ (80034ec <main+0x78c>)
  canp->can->BTR = canp->config->btr;
 8003496:	61dc      	str	r4, [r3, #28]
  canp->can->MCR = canp->config->mcr;
 8003498:	6018      	str	r0, [r3, #0]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 800349a:	615a      	str	r2, [r3, #20]
 800349c:	7039      	strb	r1, [r7, #0]
 800349e:	2300      	movs	r3, #0
 80034a0:	f383 8811 	msr	BASEPRI, r3

void startCanThread(void)
{
    canSTM32SetFilters(&CAND1, 0, 1, &filters[0]);
    canStart(&CAND1, &cancfg);
    chThdCreateStatic(waCanRxThread, sizeof(waCanRxThread), NORMALPRIO + 32, CanRxThread, NULL);
 80034a4:	21a0      	movs	r1, #160	@ 0xa0
 80034a6:	4a12      	ldr	r2, [pc, #72]	@ (80034f0 <main+0x790>)
 80034a8:	4812      	ldr	r0, [pc, #72]	@ (80034f4 <main+0x794>)
 80034aa:	f7fd fec1 	bl	8001230 <chThdCreateStatic.constprop.0.isra.0>
    chThdCreateStatic(waCanTxThread, sizeof(waCanTxThread), NORMALPRIO + 32, CanTxThread, NULL);
 80034ae:	21a0      	movs	r1, #160	@ 0xa0
 80034b0:	4a11      	ldr	r2, [pc, #68]	@ (80034f8 <main+0x798>)
 80034b2:	4812      	ldr	r0, [pc, #72]	@ (80034fc <main+0x79c>)
 80034b4:	f7fd febc 	bl	8001230 <chThdCreateStatic.constprop.0.isra.0>
 80034b8:	2420      	movs	r4, #32
 80034ba:	f384 8811 	msr	BASEPRI, r4
 80034be:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80034c2:	2008      	movs	r0, #8
 80034c4:	f7fd fb74 	bl	8000bb0 <chSchGoSleepTimeoutS>
 80034c8:	2300      	movs	r3, #0
 80034ca:	f383 8811 	msr	BASEPRI, r3
    startSpiThread();
    startDigitalThread();
    startOutThread();
    startCanThread();

    while (true) {
 80034ce:	e7f4      	b.n	80034ba <main+0x75a>
    else if(!palReadPad(GPIOB, 9) && palReadPad(GPIOB, 8)) {
 80034d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003500 <main+0x7a0>)
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	0596      	lsls	r6, r2, #22
 80034d6:	d403      	bmi.n	80034e0 <main+0x780>
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	05dc      	lsls	r4, r3, #23
 80034dc:	f53f aec9 	bmi.w	8003272 <main+0x512>
    else if(palReadPad(GPIOB, 9) && !palReadPad(GPIOB, 8))  {
 80034e0:	4b07      	ldr	r3, [pc, #28]	@ (8003500 <main+0x7a0>)
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	0590      	lsls	r0, r2, #22
 80034e6:	bf48      	it	mi
 80034e8:	689b      	ldrmi	r3, [r3, #8]
        canVar.txID4 = 0x404;
 80034ea:	e6c2      	b.n	8003272 <main+0x512>
 80034ec:	0001875b 	.word	0x0001875b
 80034f0:	08002531 	.word	0x08002531
 80034f4:	200010f0 	.word	0x200010f0
 80034f8:	080026e1 	.word	0x080026e1
 80034fc:	20000fa8 	.word	0x20000fa8
 8003500:	40010c00 	.word	0x40010c00
	...

08003510 <_GLOBAL__sub_I_canVr>:
};
 8003510:	2200      	movs	r2, #0
 8003512:	4b01      	ldr	r3, [pc, #4]	@ (8003518 <_GLOBAL__sub_I_canVr+0x8>)
 8003514:	605a      	str	r2, [r3, #4]
 8003516:	4770      	bx	lr
 8003518:	20000854 	.word	0x20000854
