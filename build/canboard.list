
build/canboard.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000239 	.word	0x08000239
 8000008:	0800023b 	.word	0x0800023b
 800000c:	0800023b 	.word	0x0800023b
 8000010:	0800023b 	.word	0x0800023b
 8000014:	0800023b 	.word	0x0800023b
 8000018:	0800023b 	.word	0x0800023b
 800001c:	0800023b 	.word	0x0800023b
 8000020:	0800023b 	.word	0x0800023b
 8000024:	0800023b 	.word	0x0800023b
 8000028:	0800023b 	.word	0x0800023b
 800002c:	080022f1 	.word	0x080022f1
 8000030:	0800023b 	.word	0x0800023b
 8000034:	0800023b 	.word	0x0800023b
 8000038:	0800023b 	.word	0x0800023b
 800003c:	0800023b 	.word	0x0800023b
 8000040:	0800023b 	.word	0x0800023b
 8000044:	0800023b 	.word	0x0800023b
 8000048:	0800023b 	.word	0x0800023b
 800004c:	0800023b 	.word	0x0800023b
 8000050:	0800023b 	.word	0x0800023b
 8000054:	0800023b 	.word	0x0800023b
 8000058:	080011d1 	.word	0x080011d1
 800005c:	08001241 	.word	0x08001241
 8000060:	080012c1 	.word	0x080012c1
 8000064:	08001341 	.word	0x08001341
 8000068:	080013c1 	.word	0x080013c1
 800006c:	08001b01 	.word	0x08001b01
 8000070:	08001b71 	.word	0x08001b71
 8000074:	08001bf1 	.word	0x08001bf1
 8000078:	08001c71 	.word	0x08001c71
 800007c:	08001cf1 	.word	0x08001cf1
 8000080:	08001d71 	.word	0x08001d71
 8000084:	08001df1 	.word	0x08001df1
 8000088:	0800023b 	.word	0x0800023b
 800008c:	08001871 	.word	0x08001871
 8000090:	08001921 	.word	0x08001921
 8000094:	080019d1 	.word	0x080019d1
 8000098:	08001a81 	.word	0x08001a81
 800009c:	08001441 	.word	0x08001441
 80000a0:	0800023b 	.word	0x0800023b
 80000a4:	0800023b 	.word	0x0800023b
 80000a8:	0800023b 	.word	0x0800023b
 80000ac:	0800023b 	.word	0x0800023b
 80000b0:	08001e71 	.word	0x08001e71
 80000b4:	0800023b 	.word	0x0800023b
 80000b8:	0800023b 	.word	0x0800023b
 80000bc:	0800023b 	.word	0x0800023b
 80000c0:	0800023b 	.word	0x0800023b
 80000c4:	0800023b 	.word	0x0800023b
 80000c8:	0800023b 	.word	0x0800023b
 80000cc:	0800023b 	.word	0x0800023b
 80000d0:	0800023b 	.word	0x0800023b
 80000d4:	08001f61 	.word	0x08001f61
 80000d8:	0800023b 	.word	0x0800023b
 80000dc:	0800023b 	.word	0x0800023b
 80000e0:	08001621 	.word	0x08001621
 80000e4:	0800023b 	.word	0x0800023b
 80000e8:	0800023b 	.word	0x0800023b
 80000ec:	0800023b 	.word	0x0800023b
 80000f0:	0800023b 	.word	0x0800023b
 80000f4:	0800023b 	.word	0x0800023b
 80000f8:	0800023b 	.word	0x0800023b
 80000fc:	0800023b 	.word	0x0800023b
 8000100:	0800023b 	.word	0x0800023b
 8000104:	0800023b 	.word	0x0800023b
 8000108:	0800023b 	.word	0x0800023b
 800010c:	0800023b 	.word	0x0800023b
 8000110:	0800023b 	.word	0x0800023b
 8000114:	0800023b 	.word	0x0800023b
 8000118:	0800023b 	.word	0x0800023b
 800011c:	0800023b 	.word	0x0800023b
 8000120:	0800023b 	.word	0x0800023b
 8000124:	0800023b 	.word	0x0800023b
 8000128:	0800023b 	.word	0x0800023b
 800012c:	0800023b 	.word	0x0800023b
 8000130:	0800023b 	.word	0x0800023b
 8000134:	0800023b 	.word	0x0800023b
 8000138:	0800023b 	.word	0x0800023b
 800013c:	0800023b 	.word	0x0800023b
 8000140:	0800023b 	.word	0x0800023b
 8000144:	0800023b 	.word	0x0800023b
 8000148:	0800023b 	.word	0x0800023b
 800014c:	0800023b 	.word	0x0800023b
 8000150:	0800023b 	.word	0x0800023b
 8000154:	0800023b 	.word	0x0800023b
 8000158:	0800023b 	.word	0x0800023b
 800015c:	0800023b 	.word	0x0800023b

Disassembly of section .text:

08000160 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000160:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000162:	4827      	ldr	r0, [pc, #156]	@ (8000200 <endfiniloop+0x4>)
                msr     MSP, r0
 8000164:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000168:	4826      	ldr	r0, [pc, #152]	@ (8000204 <endfiniloop+0x8>)
                msr     PSP, r0
 800016a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800016e:	4826      	ldr	r0, [pc, #152]	@ (8000208 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000170:	f64e 5108 	movw	r1, #60680	@ 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000174:	f2ce 0100 	movt	r1, #57344	@ 0xe000
                str     r0, [r1]
 8000178:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800017a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800017c:	f380 8814 	msr	CONTROL, r0
                isb
 8000180:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000184:	f000 ffdc 	bl	8001140 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000188:	f002 f812 	bl	80021b0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800018c:	f04f 3055 	mov.w	r0, #1431655765	@ 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000190:	491e      	ldr	r1, [pc, #120]	@ (800020c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000192:	4a1b      	ldr	r2, [pc, #108]	@ (8000200 <endfiniloop+0x4>)

08000194 <msloop>:
msloop:
                cmp     r1, r2
 8000194:	4291      	cmp	r1, r2
                itt     lo
 8000196:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000198:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800019c:	e7fa      	bcc.n	8000194 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800019e:	491c      	ldr	r1, [pc, #112]	@ (8000210 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80001a0:	4a18      	ldr	r2, [pc, #96]	@ (8000204 <endfiniloop+0x8>)

080001a2 <psloop>:
psloop:
                cmp     r1, r2
 80001a2:	4291      	cmp	r1, r2
                itt     lo
 80001a4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001a6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001aa:	e7fa      	bcc.n	80001a2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 80001ac:	4919      	ldr	r1, [pc, #100]	@ (8000214 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 80001ae:	4a1a      	ldr	r2, [pc, #104]	@ (8000218 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 80001b0:	4b1a      	ldr	r3, [pc, #104]	@ (800021c <endfiniloop+0x20>)

080001b2 <dloop>:
dloop:
                cmp     r2, r3
 80001b2:	429a      	cmp	r2, r3
                ittt    lo
 80001b4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001b6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001ba:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001be:	e7f8      	bcc.n	80001b2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 80001c0:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 80001c2:	4917      	ldr	r1, [pc, #92]	@ (8000220 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 80001c4:	4a17      	ldr	r2, [pc, #92]	@ (8000224 <endfiniloop+0x28>)

080001c6 <bloop>:
bloop:
                cmp     r1, r2
 80001c6:	4291      	cmp	r1, r2
                itt     lo
 80001c8:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001ca:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 80001ce:	e7fa      	bcc.n	80001c6 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 80001d0:	f000 ffce 	bl	8001170 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80001d4:	f000 ffbc 	bl	8001150 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 80001d8:	4c13      	ldr	r4, [pc, #76]	@ (8000228 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 80001da:	4d14      	ldr	r5, [pc, #80]	@ (800022c <endfiniloop+0x30>)

080001dc <initloop>:
initloop:
                cmp     r4, r5
 80001dc:	42ac      	cmp	r4, r5
                bge     endinitloop
 80001de:	da03      	bge.n	80001e8 <endinitloop>
                ldr     r1, [r4], #4
 80001e0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001e4:	4788      	blx	r1
                b       initloop
 80001e6:	e7f9      	b.n	80001dc <initloop>

080001e8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80001e8:	f002 f892 	bl	8002310 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80001ec:	4c10      	ldr	r4, [pc, #64]	@ (8000230 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 80001ee:	4d11      	ldr	r5, [pc, #68]	@ (8000234 <endfiniloop+0x38>)

080001f0 <finiloop>:
finiloop:
                cmp     r4, r5
 80001f0:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80001f2:	da03      	bge.n	80001fc <endfiniloop>
                ldr     r1, [r4], #4
 80001f4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001f8:	4788      	blx	r1
                b       finiloop
 80001fa:	e7f9      	b.n	80001f0 <finiloop>

080001fc <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80001fc:	f000 bfb0 	b.w	8001160 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000200:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000204:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000208:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800020c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000210:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000214:	08002b1c 	.word	0x08002b1c
                ldr     r2, =__data_base__
 8000218:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800021c:	20000800 	.word	0x20000800
                ldr     r1, =__bss_base__
 8000220:	20000800 	.word	0x20000800
                ldr     r2, =__bss_end__
 8000224:	20001288 	.word	0x20001288
                ldr     r4, =__init_array_base__
 8000228:	08000160 	.word	0x08000160
                ldr     r5, =__init_array_end__
 800022c:	08000160 	.word	0x08000160
                ldr     r4, =__fini_array_base__
 8000230:	08000160 	.word	0x08000160
                ldr     r5, =__fini_array_end__
 8000234:	08000160 	.word	0x08000160

08000238 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000238:	e792      	b.n	8000160 <_crt0_entry>

0800023a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800023a:	f000 f800 	bl	800023e <_unhandled_exception>

0800023e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800023e:	e7fe      	b.n	800023e <_unhandled_exception>

08000240 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000244:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000248:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800024a:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800024c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000250 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000250:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000252:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000256:	4628      	mov	r0, r5
                blx     r4
 8000258:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800025a:	2000      	movs	r0, #0
                bl      chThdExit
 800025c:	f002 f808 	bl	8002270 <chThdExit>

08000260 <_zombies>:
_zombies:       b       _zombies
 8000260:	e7fe      	b.n	8000260 <_zombies>

08000262 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000262:	f001 ffdd 	bl	8002220 <chSchDoReschedule>

08000266 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000266:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000268:	e7fe      	b.n	8000268 <_port_exit_from_isr+0x2>
	...

0800026c <memset>:
 800026c:	b570      	push	{r4, r5, r6, lr}
 800026e:	0786      	lsls	r6, r0, #30
 8000270:	d047      	beq.n	8000302 <memset+0x96>
 8000272:	1e54      	subs	r4, r2, #1
 8000274:	2a00      	cmp	r2, #0
 8000276:	d03e      	beq.n	80002f6 <memset+0x8a>
 8000278:	4603      	mov	r3, r0
 800027a:	b2ca      	uxtb	r2, r1
 800027c:	e001      	b.n	8000282 <memset+0x16>
 800027e:	3c01      	subs	r4, #1
 8000280:	d339      	bcc.n	80002f6 <memset+0x8a>
 8000282:	f803 2b01 	strb.w	r2, [r3], #1
 8000286:	079d      	lsls	r5, r3, #30
 8000288:	d1f9      	bne.n	800027e <memset+0x12>
 800028a:	2c03      	cmp	r4, #3
 800028c:	d92c      	bls.n	80002e8 <memset+0x7c>
 800028e:	b2cd      	uxtb	r5, r1
 8000290:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 8000294:	2c0f      	cmp	r4, #15
 8000296:	461a      	mov	r2, r3
 8000298:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 800029c:	d934      	bls.n	8000308 <memset+0x9c>
 800029e:	f1a4 0c10 	sub.w	ip, r4, #16
 80002a2:	f02c 060f 	bic.w	r6, ip, #15
 80002a6:	f103 0e10 	add.w	lr, r3, #16
 80002aa:	44b6      	add	lr, r6
 80002ac:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 80002b0:	6015      	str	r5, [r2, #0]
 80002b2:	6055      	str	r5, [r2, #4]
 80002b4:	6095      	str	r5, [r2, #8]
 80002b6:	60d5      	str	r5, [r2, #12]
 80002b8:	3210      	adds	r2, #16
 80002ba:	4572      	cmp	r2, lr
 80002bc:	d1f8      	bne.n	80002b0 <memset+0x44>
 80002be:	f10c 0201 	add.w	r2, ip, #1
 80002c2:	f014 0f0c 	tst.w	r4, #12
 80002c6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80002ca:	f004 0c0f 	and.w	ip, r4, #15
 80002ce:	d013      	beq.n	80002f8 <memset+0x8c>
 80002d0:	f1ac 0304 	sub.w	r3, ip, #4
 80002d4:	f023 0303 	bic.w	r3, r3, #3
 80002d8:	3304      	adds	r3, #4
 80002da:	4413      	add	r3, r2
 80002dc:	f842 5b04 	str.w	r5, [r2], #4
 80002e0:	429a      	cmp	r2, r3
 80002e2:	d1fb      	bne.n	80002dc <memset+0x70>
 80002e4:	f00c 0403 	and.w	r4, ip, #3
 80002e8:	b12c      	cbz	r4, 80002f6 <memset+0x8a>
 80002ea:	b2c9      	uxtb	r1, r1
 80002ec:	441c      	add	r4, r3
 80002ee:	f803 1b01 	strb.w	r1, [r3], #1
 80002f2:	429c      	cmp	r4, r3
 80002f4:	d1fb      	bne.n	80002ee <memset+0x82>
 80002f6:	bd70      	pop	{r4, r5, r6, pc}
 80002f8:	4664      	mov	r4, ip
 80002fa:	4613      	mov	r3, r2
 80002fc:	2c00      	cmp	r4, #0
 80002fe:	d1f4      	bne.n	80002ea <memset+0x7e>
 8000300:	e7f9      	b.n	80002f6 <memset+0x8a>
 8000302:	4603      	mov	r3, r0
 8000304:	4614      	mov	r4, r2
 8000306:	e7c0      	b.n	800028a <memset+0x1e>
 8000308:	46a4      	mov	ip, r4
 800030a:	e7e1      	b.n	80002d0 <memset+0x64>

0800030c <memcpy>:
 800030c:	4684      	mov	ip, r0
 800030e:	ea41 0300 	orr.w	r3, r1, r0
 8000312:	f013 0303 	ands.w	r3, r3, #3
 8000316:	d149      	bne.n	80003ac <memcpy+0xa0>
 8000318:	3a40      	subs	r2, #64	@ 0x40
 800031a:	d323      	bcc.n	8000364 <memcpy+0x58>
 800031c:	680b      	ldr	r3, [r1, #0]
 800031e:	6003      	str	r3, [r0, #0]
 8000320:	684b      	ldr	r3, [r1, #4]
 8000322:	6043      	str	r3, [r0, #4]
 8000324:	688b      	ldr	r3, [r1, #8]
 8000326:	6083      	str	r3, [r0, #8]
 8000328:	68cb      	ldr	r3, [r1, #12]
 800032a:	60c3      	str	r3, [r0, #12]
 800032c:	690b      	ldr	r3, [r1, #16]
 800032e:	6103      	str	r3, [r0, #16]
 8000330:	694b      	ldr	r3, [r1, #20]
 8000332:	6143      	str	r3, [r0, #20]
 8000334:	698b      	ldr	r3, [r1, #24]
 8000336:	6183      	str	r3, [r0, #24]
 8000338:	69cb      	ldr	r3, [r1, #28]
 800033a:	61c3      	str	r3, [r0, #28]
 800033c:	6a0b      	ldr	r3, [r1, #32]
 800033e:	6203      	str	r3, [r0, #32]
 8000340:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8000342:	6243      	str	r3, [r0, #36]	@ 0x24
 8000344:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8000346:	6283      	str	r3, [r0, #40]	@ 0x28
 8000348:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800034a:	62c3      	str	r3, [r0, #44]	@ 0x2c
 800034c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800034e:	6303      	str	r3, [r0, #48]	@ 0x30
 8000350:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8000352:	6343      	str	r3, [r0, #52]	@ 0x34
 8000354:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8000356:	6383      	str	r3, [r0, #56]	@ 0x38
 8000358:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800035a:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800035c:	3040      	adds	r0, #64	@ 0x40
 800035e:	3140      	adds	r1, #64	@ 0x40
 8000360:	3a40      	subs	r2, #64	@ 0x40
 8000362:	d2db      	bcs.n	800031c <memcpy+0x10>
 8000364:	3230      	adds	r2, #48	@ 0x30
 8000366:	d30b      	bcc.n	8000380 <memcpy+0x74>
 8000368:	680b      	ldr	r3, [r1, #0]
 800036a:	6003      	str	r3, [r0, #0]
 800036c:	684b      	ldr	r3, [r1, #4]
 800036e:	6043      	str	r3, [r0, #4]
 8000370:	688b      	ldr	r3, [r1, #8]
 8000372:	6083      	str	r3, [r0, #8]
 8000374:	68cb      	ldr	r3, [r1, #12]
 8000376:	60c3      	str	r3, [r0, #12]
 8000378:	3010      	adds	r0, #16
 800037a:	3110      	adds	r1, #16
 800037c:	3a10      	subs	r2, #16
 800037e:	d2f3      	bcs.n	8000368 <memcpy+0x5c>
 8000380:	320c      	adds	r2, #12
 8000382:	d305      	bcc.n	8000390 <memcpy+0x84>
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	3a04      	subs	r2, #4
 800038e:	d2f9      	bcs.n	8000384 <memcpy+0x78>
 8000390:	3204      	adds	r2, #4
 8000392:	d008      	beq.n	80003a6 <memcpy+0x9a>
 8000394:	07d2      	lsls	r2, r2, #31
 8000396:	bf1c      	itt	ne
 8000398:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800039c:	f800 3b01 	strbne.w	r3, [r0], #1
 80003a0:	d301      	bcc.n	80003a6 <memcpy+0x9a>
 80003a2:	880b      	ldrh	r3, [r1, #0]
 80003a4:	8003      	strh	r3, [r0, #0]
 80003a6:	4660      	mov	r0, ip
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	2a08      	cmp	r2, #8
 80003ae:	d313      	bcc.n	80003d8 <memcpy+0xcc>
 80003b0:	078b      	lsls	r3, r1, #30
 80003b2:	d0b1      	beq.n	8000318 <memcpy+0xc>
 80003b4:	f010 0303 	ands.w	r3, r0, #3
 80003b8:	d0ae      	beq.n	8000318 <memcpy+0xc>
 80003ba:	f1c3 0304 	rsb	r3, r3, #4
 80003be:	1ad2      	subs	r2, r2, r3
 80003c0:	07db      	lsls	r3, r3, #31
 80003c2:	bf1c      	itt	ne
 80003c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003c8:	f800 3b01 	strbne.w	r3, [r0], #1
 80003cc:	d3a4      	bcc.n	8000318 <memcpy+0xc>
 80003ce:	f831 3b02 	ldrh.w	r3, [r1], #2
 80003d2:	f820 3b02 	strh.w	r3, [r0], #2
 80003d6:	e79f      	b.n	8000318 <memcpy+0xc>
 80003d8:	3a04      	subs	r2, #4
 80003da:	d3d9      	bcc.n	8000390 <memcpy+0x84>
 80003dc:	3a01      	subs	r2, #1
 80003de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003e2:	f800 3b01 	strb.w	r3, [r0], #1
 80003e6:	d2f9      	bcs.n	80003dc <memcpy+0xd0>
 80003e8:	780b      	ldrb	r3, [r1, #0]
 80003ea:	7003      	strb	r3, [r0, #0]
 80003ec:	784b      	ldrb	r3, [r1, #1]
 80003ee:	7043      	strb	r3, [r0, #1]
 80003f0:	788b      	ldrb	r3, [r1, #2]
 80003f2:	7083      	strb	r3, [r0, #2]
 80003f4:	4660      	mov	r0, ip
 80003f6:	4770      	bx	lr
	...

08000400 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8000400:	2000      	movs	r0, #0
 8000402:	4770      	bx	lr
	...

08000410 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000410:	2320      	movs	r3, #32
 8000412:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000416:	4b0d      	ldr	r3, [pc, #52]	@ (800044c <_port_irq_epilogue+0x3c>)
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 800041e:	d102      	bne.n	8000426 <_port_irq_epilogue+0x16>
 8000420:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000424:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000426:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800042a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 800042e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8000430:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000432:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8000436:	4a06      	ldr	r2, [pc, #24]	@ (8000450 <_port_irq_epilogue+0x40>)
 8000438:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 800043a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 800043c:	6889      	ldr	r1, [r1, #8]
 800043e:	6892      	ldr	r2, [r2, #8]
 8000440:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8000442:	bf8c      	ite	hi
 8000444:	4a03      	ldrhi	r2, [pc, #12]	@ (8000454 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8000446:	4a04      	ldrls	r2, [pc, #16]	@ (8000458 <_port_irq_epilogue+0x48>)
 8000448:	619a      	str	r2, [r3, #24]
 800044a:	4770      	bx	lr
 800044c:	e000ed00 	.word	0xe000ed00
 8000450:	20001210 	.word	0x20001210
 8000454:	08000263 	.word	0x08000263
 8000458:	08000266 	.word	0x08000266
 800045c:	00000000 	.word	0x00000000

08000460 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000460:	4a02      	ldr	r2, [pc, #8]	@ (800046c <notify1+0xc>)
 8000462:	68d3      	ldr	r3, [r2, #12]
 8000464:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000468:	60d3      	str	r3, [r2, #12]
}
 800046a:	4770      	bx	lr
 800046c:	40013800 	.word	0x40013800

08000470 <_idle_thread>:
 */
static void _idle_thread(void *p) {

  (void)p;

  while (true) {
 8000470:	e7fe      	b.n	8000470 <_idle_thread>
 8000472:	bf00      	nop
	...

08000480 <chVTDoResetI>:
 *
 * @notapi
 */
static inline bool vt_is_first(delta_list_t *dlhp, delta_list_t *dlp) {

  return (bool)(dlhp->next == dlp);
 8000480:	4929      	ldr	r1, [pc, #164]	@ (8000528 <chVTDoResetI+0xa8>)
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8000482:	b430      	push	{r4, r5}
  return (bool)(dlhp->next == dlp);
 8000484:	69cb      	ldr	r3, [r1, #28]
  systime_t now;
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!vt_is_first(&vtlp->dlist, &vtp->dlist)) {
 8000486:	4298      	cmp	r0, r3
 8000488:	d00f      	beq.n	80004aa <chVTDoResetI+0x2a>
  dlp->prev->next = dlp->next;
 800048a:	e9d0 3200 	ldrd	r3, r2, [r0]

    /* Removing the element from the delta list and marking it as not armed.*/
    (void) vt_dequeue(&vtp->dlist);
    vtp->func = NULL;
 800048e:	2500      	movs	r5, #0
    vtp->dlist.next->delta += vtp->dlist.delta;

    /* Special case when the removed element from the last position in the list,
       the value in the header must be restored, just doing it is faster than
       checking then doing.*/
    vtlp->dlist.delta = (sysinterval_t)-1;
 8000490:	f04f 34ff 	mov.w	r4, #4294967295
  dlp->prev->next = dlp->next;
 8000494:	6013      	str	r3, [r2, #0]
    vtp->dlist.next->delta += vtp->dlist.delta;
 8000496:	f8d0 c008 	ldr.w	ip, [r0, #8]
  dlp->next->prev = dlp->prev;
 800049a:	605a      	str	r2, [r3, #4]
    vtp->dlist.next->delta += vtp->dlist.delta;
 800049c:	689a      	ldr	r2, [r3, #8]
    vtp->func = NULL;
 800049e:	60c5      	str	r5, [r0, #12]
    vtp->dlist.next->delta += vtp->dlist.delta;
 80004a0:	4462      	add	r2, ip
 80004a2:	609a      	str	r2, [r3, #8]
    vtlp->dlist.delta = (sysinterval_t)-1;
 80004a4:	624c      	str	r4, [r1, #36]	@ 0x24
  delta = vtlp->dlist.next->delta - nowdelta;

  /* Setting up the alarm.*/
  vt_set_alarm(now, delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80004a6:	bc30      	pop	{r4, r5}
 80004a8:	4770      	bx	lr
  dlhp->next       = dlp->next;
 80004aa:	460b      	mov	r3, r1
  vtp->func = NULL;
 80004ac:	2400      	movs	r4, #0
  dlhp->next       = dlp->next;
 80004ae:	6802      	ldr	r2, [r0, #0]
 80004b0:	f843 2f1c 	str.w	r2, [r3, #28]!
  if (vt_is_empty(&vtlp->dlist)) {
 80004b4:	429a      	cmp	r2, r3
  dlhp->next->prev = dlhp;
 80004b6:	6053      	str	r3, [r2, #4]
  vtp->func = NULL;
 80004b8:	60c4      	str	r4, [r0, #12]
  if (vt_is_empty(&vtlp->dlist)) {
 80004ba:	d031      	beq.n	8000520 <chVTDoResetI+0xa0>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80004bc:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
  vtlp->dlist.next->delta += vtp->dlist.delta;
 80004c0:	6893      	ldr	r3, [r2, #8]
 80004c2:	6884      	ldr	r4, [r0, #8]
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 80004c4:	8d08      	ldrh	r0, [r1, #40]	@ 0x28
 80004c6:	4423      	add	r3, r4
 80004c8:	6093      	str	r3, [r2, #8]
 80004ca:	f8dc 1024 	ldr.w	r1, [ip, #36]	@ 0x24
 80004ce:	b289      	uxth	r1, r1
 80004d0:	1a0a      	subs	r2, r1, r0
 80004d2:	b292      	uxth	r2, r2
  if (nowdelta >= vtlp->dlist.next->delta) {
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d9e6      	bls.n	80004a6 <chVTDoResetI+0x26>
  else if (delay > (sysinterval_t)TIME_MAX_SYSTIME) {
 80004d8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
  delta = vtlp->dlist.next->delta - nowdelta;
 80004dc:	1a9a      	subs	r2, r3, r2
  else if (delay > (sysinterval_t)TIME_MAX_SYSTIME) {
 80004de:	4282      	cmp	r2, r0
 80004e0:	bf28      	it	cs
 80004e2:	4602      	movcs	r2, r0
 80004e4:	2a02      	cmp	r2, #2
 80004e6:	bf38      	it	cc
 80004e8:	2202      	movcc	r2, #2
  return systime + (systime_t)interval;
 80004ea:	188b      	adds	r3, r1, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	f8cc 3034 	str.w	r3, [ip, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80004f2:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 80004f6:	b29b      	uxth	r3, r3
  return (sysinterval_t)((systime_t)(end - start));
 80004f8:	1a59      	subs	r1, r3, r1
 80004fa:	b289      	uxth	r1, r1
    if (nowdelta < delay) {
 80004fc:	428a      	cmp	r2, r1
 80004fe:	d8d2      	bhi.n	80004a6 <chVTDoResetI+0x26>
 8000500:	2102      	movs	r1, #2
    currdelta += (sysinterval_t)1;
 8000502:	461a      	mov	r2, r3
 8000504:	3101      	adds	r1, #1
  return systime + (systime_t)interval;
 8000506:	440b      	add	r3, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000508:	b29b      	uxth	r3, r3
 800050a:	f8cc 3034 	str.w	r3, [ip, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800050e:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 8000512:	b29b      	uxth	r3, r3
  return (sysinterval_t)((systime_t)(end - start));
 8000514:	1a9a      	subs	r2, r3, r2
 8000516:	b292      	uxth	r2, r2
    if (nowdelta < delay) {
 8000518:	428a      	cmp	r2, r1
 800051a:	d2f2      	bcs.n	8000502 <chVTDoResetI+0x82>
}
 800051c:	bc30      	pop	{r4, r5}
 800051e:	4770      	bx	lr
  STM32_ST_TIM->DIER = 0U;
 8000520:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000524:	60dc      	str	r4, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 8000526:	e7be      	b.n	80004a6 <chVTDoResetI+0x26>
 8000528:	20001210 	.word	0x20001210
 800052c:	00000000 	.word	0x00000000

08000530 <wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000530:	2320      	movs	r3, #32
 8000532:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8000536:	f890 3020 	ldrb.w	r3, [r0, #32]
 800053a:	2b07      	cmp	r3, #7
 800053c:	d80d      	bhi.n	800055a <wakeup+0x2a>
 800053e:	e8df f003 	tbb	[pc, r3]
 8000542:	0c27      	.short	0x0c27
 8000544:	0408230c 	.word	0x0408230c
 8000548:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 800054a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800054c:	6893      	ldr	r3, [r2, #8]
 800054e:	3301      	adds	r3, #1
 8000550:	6093      	str	r3, [r2, #8]
 *
 * @notapi
 */
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {

  p->prev->next = p->next;
 8000552:	e9d0 3200 	ldrd	r3, r2, [r0]
 8000556:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 8000558:	605a      	str	r2, [r3, #4]
static void wakeup(void *p) {
 800055a:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 800055c:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 800055e:	f04f 34ff 	mov.w	r4, #4294967295
                                                           ch_priority_queue_t *p) {

  /* Scanning priority queue.*/
  do {
    pqp = pqp->next;
  } while (pqp->prio >= p->prio);
 8000562:	6881      	ldr	r1, [r0, #8]
 8000564:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <wakeup+0x68>)
 8000566:	6244      	str	r4, [r0, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8000568:	f880 2020 	strb.w	r2, [r0, #32]
    pqp = pqp->next;
 800056c:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 800056e:	689a      	ldr	r2, [r3, #8]
 8000570:	428a      	cmp	r2, r1
 8000572:	d2fb      	bcs.n	800056c <wakeup+0x3c>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 8000574:	685a      	ldr	r2, [r3, #4]
 8000576:	2100      	movs	r1, #0
 8000578:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800057c:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 800057e:	6058      	str	r0, [r3, #4]
 8000580:	f381 8811 	msr	BASEPRI, r1
}
 8000584:	bc10      	pop	{r4}
 8000586:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8000588:	2200      	movs	r2, #0
 800058a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800058c:	601a      	str	r2, [r3, #0]
    break;
 800058e:	e7e4      	b.n	800055a <wakeup+0x2a>
 8000590:	2300      	movs	r3, #0
 8000592:	f383 8811 	msr	BASEPRI, r3
    return;
 8000596:	4770      	bx	lr
 8000598:	20001210 	.word	0x20001210
 800059c:	00000000 	.word	0x00000000

080005a0 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80005a0:	4b01      	ldr	r3, [pc, #4]	@ (80005a8 <chTMStartMeasurementX+0x8>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80005a4:	6083      	str	r3, [r0, #8]
}
 80005a6:	4770      	bx	lr
 80005a8:	e0001000 	.word	0xe0001000
 80005ac:	00000000 	.word	0x00000000

080005b0 <chTMStopMeasurementX>:
 80005b0:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80005b2:	4a0f      	ldr	r2, [pc, #60]	@ (80005f0 <chTMStopMeasurementX+0x40>)
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
  tmp->last = (now - tmp->last) - offset;
 80005b8:	6881      	ldr	r1, [r0, #8]
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	1a5b      	subs	r3, r3, r1
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80005be:	b410      	push	{r4}
  tmp->n++;
 80005c0:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 80005c4:	18d2      	adds	r2, r2, r3
 80005c6:	6941      	ldr	r1, [r0, #20]
 80005c8:	6102      	str	r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 80005ca:	6842      	ldr	r2, [r0, #4]
  tmp->cumulative += (rttime_t)tmp->last;
 80005cc:	f141 0100 	adc.w	r1, r1, #0
  if (tmp->last > tmp->worst) {
 80005d0:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 80005d2:	6802      	ldr	r2, [r0, #0]
  tmp->n++;
 80005d4:	f104 0401 	add.w	r4, r4, #1
    tmp->worst = tmp->last;
 80005d8:	bf88      	it	hi
 80005da:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 80005dc:	4293      	cmp	r3, r2
  tmp->last = (now - tmp->last) - offset;
 80005de:	e9c0 3402 	strd	r3, r4, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80005e2:	6141      	str	r1, [r0, #20]
}
 80005e4:	bc10      	pop	{r4}
    tmp->best = tmp->last;
 80005e6:	bf38      	it	cc
 80005e8:	6003      	strcc	r3, [r0, #0]
}
 80005ea:	4770      	bx	lr
 80005ec:	e0001000 	.word	0xe0001000
 80005f0:	20001210 	.word	0x20001210
	...

08000600 <chEvtBroadcastFlagsI>:
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000600:	6803      	ldr	r3, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000602:	4298      	cmp	r0, r3
 8000604:	d03c      	beq.n	8000680 <chEvtBroadcastFlagsI+0x80>
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000606:	b4f0      	push	{r4, r5, r6, r7}
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8000608:	2600      	movs	r6, #0
 800060a:	e00d      	b.n	8000628 <chEvtBroadcastFlagsI+0x28>
  tp->epending |= events;
 800060c:	e9d3 4201 	ldrd	r4, r2, [r3, #4]
 8000610:	6b67      	ldr	r7, [r4, #52]	@ 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000612:	f894 5020 	ldrb.w	r5, [r4, #32]
  tp->epending |= events;
 8000616:	433a      	orrs	r2, r7
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000618:	2d0a      	cmp	r5, #10
  tp->epending |= events;
 800061a:	6362      	str	r2, [r4, #52]	@ 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800061c:	d016      	beq.n	800064c <chEvtBroadcastFlagsI+0x4c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800061e:	2d0b      	cmp	r5, #11
 8000620:	d02a      	beq.n	8000678 <chEvtBroadcastFlagsI+0x78>
    elp = elp->next;
 8000622:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8000624:	4298      	cmp	r0, r3
 8000626:	d025      	beq.n	8000674 <chEvtBroadcastFlagsI+0x74>
    elp->flags |= flags;
 8000628:	68da      	ldr	r2, [r3, #12]
 800062a:	430a      	orrs	r2, r1
 800062c:	60da      	str	r2, [r3, #12]
    if ((flags == (eventflags_t)0) ||
 800062e:	2900      	cmp	r1, #0
 8000630:	d0ec      	beq.n	800060c <chEvtBroadcastFlagsI+0xc>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8000632:	691a      	ldr	r2, [r3, #16]
    if ((flags == (eventflags_t)0) ||
 8000634:	4211      	tst	r1, r2
 8000636:	d1e9      	bne.n	800060c <chEvtBroadcastFlagsI+0xc>
    elp = elp->next;
 8000638:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 800063a:	4298      	cmp	r0, r3
 800063c:	d01a      	beq.n	8000674 <chEvtBroadcastFlagsI+0x74>
    elp->flags |= flags;
 800063e:	68da      	ldr	r2, [r3, #12]
 8000640:	430a      	orrs	r2, r1
 8000642:	60da      	str	r2, [r3, #12]
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8000644:	691a      	ldr	r2, [r3, #16]
    if ((flags == (eventflags_t)0) ||
 8000646:	4211      	tst	r1, r2
 8000648:	d1e0      	bne.n	800060c <chEvtBroadcastFlagsI+0xc>
 800064a:	e7f5      	b.n	8000638 <chEvtBroadcastFlagsI+0x38>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800064c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 800064e:	422a      	tst	r2, r5
 8000650:	d0e7      	beq.n	8000622 <chEvtBroadcastFlagsI+0x22>
  } while (pqp->prio >= p->prio);
 8000652:	68a5      	ldr	r5, [r4, #8]
 8000654:	4a0b      	ldr	r2, [pc, #44]	@ (8000684 <chEvtBroadcastFlagsI+0x84>)
    tp->u.rdymsg = MSG_OK;
 8000656:	6266      	str	r6, [r4, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8000658:	f884 6020 	strb.w	r6, [r4, #32]
    pqp = pqp->next;
 800065c:	6812      	ldr	r2, [r2, #0]
  } while (pqp->prio >= p->prio);
 800065e:	6897      	ldr	r7, [r2, #8]
 8000660:	42af      	cmp	r7, r5
 8000662:	d2fb      	bcs.n	800065c <chEvtBroadcastFlagsI+0x5c>
    elp = elp->next;
 8000664:	681b      	ldr	r3, [r3, #0]
  p->prev       = pqp->prev;
 8000666:	6855      	ldr	r5, [r2, #4]
  while (elp != (event_listener_t *)esp) {
 8000668:	4298      	cmp	r0, r3
 800066a:	e9c4 2500 	strd	r2, r5, [r4]
  p->prev->next = p;
 800066e:	602c      	str	r4, [r5, #0]
  pqp->prev     = p;
 8000670:	6054      	str	r4, [r2, #4]
 8000672:	d1d9      	bne.n	8000628 <chEvtBroadcastFlagsI+0x28>
}
 8000674:	bcf0      	pop	{r4, r5, r6, r7}
 8000676:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000678:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 800067a:	4395      	bics	r5, r2
 800067c:	d1d1      	bne.n	8000622 <chEvtBroadcastFlagsI+0x22>
 800067e:	e7e8      	b.n	8000652 <chEvtBroadcastFlagsI+0x52>
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20001210 	.word	0x20001210
	...

08000690 <chCoreAllocFromTop>:
 8000690:	2320      	movs	r3, #32
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000692:	b410      	push	{r4}
 8000694:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000698:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <chCoreAllocFromTop+0x38>)
 800069a:	4249      	negs	r1, r1
 800069c:	685c      	ldr	r4, [r3, #4]
 800069e:	1a20      	subs	r0, r4, r0
 80006a0:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80006a2:	6819      	ldr	r1, [r3, #0]
  prev = p - offset;
 80006a4:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80006a6:	428a      	cmp	r2, r1
 80006a8:	d307      	bcc.n	80006ba <chCoreAllocFromTop+0x2a>
 80006aa:	4294      	cmp	r4, r2
 80006ac:	d305      	bcc.n	80006ba <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	2300      	movs	r3, #0
 80006b2:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 80006b6:	bc10      	pop	{r4}
 80006b8:	4770      	bx	lr
    return NULL;
 80006ba:	2000      	movs	r0, #0
 80006bc:	2300      	movs	r3, #0
 80006be:	f383 8811 	msr	BASEPRI, r3
}
 80006c2:	bc10      	pop	{r4}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20001020 	.word	0x20001020
 80006cc:	00000000 	.word	0x00000000

080006d0 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <chCoreAllocAlignedI+0x1c>)
 80006d2:	4249      	negs	r1, r1
 80006d4:	685a      	ldr	r2, [r3, #4]
 80006d6:	1a10      	subs	r0, r2, r0
 80006d8:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80006da:	6819      	ldr	r1, [r3, #0]
 80006dc:	4288      	cmp	r0, r1
 80006de:	d303      	bcc.n	80006e8 <chCoreAllocAlignedI+0x18>
 80006e0:	4282      	cmp	r2, r0
 80006e2:	d301      	bcc.n	80006e8 <chCoreAllocAlignedI+0x18>
  ch_memcore.topmem = prev;
 80006e4:	6058      	str	r0, [r3, #4]
  return p;
 80006e6:	4770      	bx	lr
    return NULL;
 80006e8:	2000      	movs	r0, #0
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 80006ea:	4770      	bx	lr
 80006ec:	20001020 	.word	0x20001020

080006f0 <vt_enqueue.constprop.0>:
static void vt_enqueue(virtual_timers_list_t *vtlp,
 80006f0:	b530      	push	{r4, r5, lr}
  return (systime_t)STM32_ST_TIM->CNT;
 80006f2:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
  return (bool)(dlhp == dlhp->next);
 80006f6:	4d40      	ldr	r5, [pc, #256]	@ (80007f8 <vt_enqueue.constprop.0+0x108>)
 80006f8:	f8dc 2024 	ldr.w	r2, [ip, #36]	@ 0x24
 80006fc:	462b      	mov	r3, r5
 80006fe:	fa1f fe82 	uxth.w	lr, r2
 8000702:	f853 2f1c 	ldr.w	r2, [r3, #28]!
    if (vt_is_empty(&vtlp->dlist)) {
 8000706:	429a      	cmp	r2, r3
 8000708:	d043      	beq.n	8000792 <vt_enqueue.constprop.0+0xa2>
 800070a:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
    if (delta < vtlp->dlist.next->delta) {
 800070c:	6894      	ldr	r4, [r2, #8]
 800070e:	ebae 0303 	sub.w	r3, lr, r3
 8000712:	b29b      	uxth	r3, r3
      delta = delay;
 8000714:	18cb      	adds	r3, r1, r3
 8000716:	bf28      	it	cs
 8000718:	460b      	movcs	r3, r1
    if (delta < vtlp->dlist.next->delta) {
 800071a:	429c      	cmp	r4, r3
 800071c:	d812      	bhi.n	8000744 <vt_enqueue.constprop.0+0x54>
  while (dlp->delta < delta) {
 800071e:	d204      	bcs.n	800072a <vt_enqueue.constprop.0+0x3a>
    dlp = dlp->next;
 8000720:	6812      	ldr	r2, [r2, #0]
    delta -= dlp->delta;
 8000722:	1b1b      	subs	r3, r3, r4
  while (dlp->delta < delta) {
 8000724:	6894      	ldr	r4, [r2, #8]
 8000726:	429c      	cmp	r4, r3
 8000728:	d3fa      	bcc.n	8000720 <vt_enqueue.constprop.0+0x30>
  dlp->prev       = dlp->next->prev;
 800072a:	6851      	ldr	r1, [r2, #4]
  dlp->delta      = delta;
 800072c:	6083      	str	r3, [r0, #8]
  dlp->prev       = dlp->next->prev;
 800072e:	e9c0 2100 	strd	r2, r1, [r0]
  dlp->prev->next = dlp;
 8000732:	6008      	str	r0, [r1, #0]
  dlp->delta -= delta;
 8000734:	6891      	ldr	r1, [r2, #8]
  dlhp->prev      = dlp;
 8000736:	6050      	str	r0, [r2, #4]
  dlp->delta -= delta;
 8000738:	1ac9      	subs	r1, r1, r3
  dlhp->delta = (sysinterval_t)-1;
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
  dlp->delta -= delta;
 800073e:	6091      	str	r1, [r2, #8]
  dlhp->delta = (sysinterval_t)-1;
 8000740:	626b      	str	r3, [r5, #36]	@ 0x24
}
 8000742:	bd30      	pop	{r4, r5, pc}
  else if (delay > (sysinterval_t)TIME_MAX_SYSTIME) {
 8000744:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8000748:	428c      	cmp	r4, r1
 800074a:	bf28      	it	cs
 800074c:	460c      	movcs	r4, r1
 800074e:	2c02      	cmp	r4, #2
 8000750:	bf38      	it	cc
 8000752:	2402      	movcc	r4, #2
  return systime + (systime_t)interval;
 8000754:	eb0e 0104 	add.w	r1, lr, r4
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000758:	b289      	uxth	r1, r1
 800075a:	f8cc 1034 	str.w	r1, [ip, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800075e:	f8dc 1024 	ldr.w	r1, [ip, #36]	@ 0x24
 8000762:	b289      	uxth	r1, r1
  return (sysinterval_t)((systime_t)(end - start));
 8000764:	eba1 0e0e 	sub.w	lr, r1, lr
 8000768:	fa1f fe8e 	uxth.w	lr, lr
    if (nowdelta < delay) {
 800076c:	4574      	cmp	r4, lr
 800076e:	d8dc      	bhi.n	800072a <vt_enqueue.constprop.0+0x3a>
 8000770:	f04f 0e02 	mov.w	lr, #2
 8000774:	460c      	mov	r4, r1
    currdelta += (sysinterval_t)1;
 8000776:	f10e 0e01 	add.w	lr, lr, #1
  return systime + (systime_t)interval;
 800077a:	4471      	add	r1, lr
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800077c:	b289      	uxth	r1, r1
 800077e:	f8cc 1034 	str.w	r1, [ip, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8000782:	f8dc 1024 	ldr.w	r1, [ip, #36]	@ 0x24
 8000786:	b289      	uxth	r1, r1
  return (sysinterval_t)((systime_t)(end - start));
 8000788:	1b0c      	subs	r4, r1, r4
 800078a:	b2a4      	uxth	r4, r4
    if (nowdelta < delay) {
 800078c:	4574      	cmp	r4, lr
 800078e:	d2f1      	bcs.n	8000774 <vt_enqueue.constprop.0+0x84>
 8000790:	e7cb      	b.n	800072a <vt_enqueue.constprop.0+0x3a>
  else if (delay > (sysinterval_t)TIME_MAX_SYSTIME) {
 8000792:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000796:	4299      	cmp	r1, r3
  vtlp->lasttime = now;
 8000798:	f8a5 e028 	strh.w	lr, [r5, #40]	@ 0x28
  dlp->delta      = delta;
 800079c:	6081      	str	r1, [r0, #8]
  dlp->next       = dlp->prev->next;
 800079e:	e9c0 2200 	strd	r2, r2, [r0]
  else if (delay > (sysinterval_t)TIME_MAX_SYSTIME) {
 80007a2:	bf28      	it	cs
 80007a4:	4619      	movcs	r1, r3
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80007a6:	2202      	movs	r2, #2
 80007a8:	4291      	cmp	r1, r2
 80007aa:	bf38      	it	cc
 80007ac:	4611      	movcc	r1, r2
  dlhp->next      = dlp;
 80007ae:	e9c5 0007 	strd	r0, r0, [r5, #28]
  STM32_ST_TIM->SR     = 0;
 80007b2:	2000      	movs	r0, #0
  return systime + (systime_t)interval;
 80007b4:	eb0e 0301 	add.w	r3, lr, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	f8cc 3034 	str.w	r3, [ip, #52]	@ 0x34
  STM32_ST_TIM->SR     = 0;
 80007be:	f8cc 0010 	str.w	r0, [ip, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80007c2:	f8cc 200c 	str.w	r2, [ip, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 80007c6:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 80007ca:	b29b      	uxth	r3, r3
  return (sysinterval_t)((systime_t)(end - start));
 80007cc:	eba3 000e 	sub.w	r0, r3, lr
 80007d0:	b280      	uxth	r0, r0
    if (chTimeDiffX(now, newnow) < delay) {
 80007d2:	4281      	cmp	r1, r0
 80007d4:	d8b5      	bhi.n	8000742 <vt_enqueue.constprop.0+0x52>
    currdelta += (sysinterval_t)1;
 80007d6:	3201      	adds	r2, #1
  return systime + (systime_t)interval;
 80007d8:	eb0e 0102 	add.w	r1, lr, r2
 80007dc:	469e      	mov	lr, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80007de:	b289      	uxth	r1, r1
 80007e0:	f8cc 1034 	str.w	r1, [ip, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80007e4:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 80007e8:	b29b      	uxth	r3, r3
  return (sysinterval_t)((systime_t)(end - start));
 80007ea:	eba3 010e 	sub.w	r1, r3, lr
 80007ee:	b289      	uxth	r1, r1
    if (chTimeDiffX(now, newnow) < delay) {
 80007f0:	4291      	cmp	r1, r2
 80007f2:	d2f0      	bcs.n	80007d6 <vt_enqueue.constprop.0+0xe6>
}
 80007f4:	bd30      	pop	{r4, r5, pc}
 80007f6:	bf00      	nop
 80007f8:	20001210 	.word	0x20001210
 80007fc:	00000000 	.word	0x00000000

08000800 <can_lld_set_filters.constprop.0>:
#endif

  /* Temporarily enabling CAN clock.*/
#if STM32_CAN_USE_CAN1
  if (canp == &CAND1) {
    rccEnableCAN1(true);
 8000800:	4b3a      	ldr	r3, [pc, #232]	@ (80008ec <can_lld_set_filters.constprop.0+0xec>)
static void can_lld_set_filters(CANDriver* canp,
 8000802:	b430      	push	{r4, r5}
    rccEnableCAN1(true);
 8000804:	69dc      	ldr	r4, [r3, #28]
    /* Filters initialization.*/
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8000806:	4d3a      	ldr	r5, [pc, #232]	@ (80008f0 <can_lld_set_filters.constprop.0+0xf0>)
    rccEnableCAN1(true);
 8000808:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 800080c:	61dc      	str	r4, [r3, #28]
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 800080e:	4c39      	ldr	r4, [pc, #228]	@ (80008f4 <can_lld_set_filters.constprop.0+0xf4>)
    rccEnableCAN1(true);
 8000810:	69db      	ldr	r3, [r3, #28]
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8000812:	6a63      	ldr	r3, [r4, #36]	@ 0x24
static void can_lld_set_filters(CANDriver* canp,
 8000814:	4694      	mov	ip, r2
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8000816:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 800081a:	402c      	ands	r4, r5
 800081c:	f044 0401 	orr.w	r4, r4, #1
 8000820:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 8000824:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000828:	402a      	ands	r2, r5
 800082a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800082e:	f042 0201 	orr.w	r2, r2, #1
 8000832:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    /* Filters initialization.*/
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
  }
#endif

  if (num > 0) {
 8000836:	2900      	cmp	r1, #0
 8000838:	d03d      	beq.n	80008b6 <can_lld_set_filters.constprop.0+0xb6>
    uint32_t i, fmask;

    /* All filters cleared.*/
    canp->can->FA1R = 0;
 800083a:	2100      	movs	r1, #0
    canp->can->FS1R = 0;
    canp->can->FFA1R = 0;

#if STM32_CAN_USE_CAN1
    if (canp == &CAND1) {
      for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800083c:	460a      	mov	r2, r1
        canp->can->sFilterRegister[i].FR1 = 0;
 800083e:	4608      	mov	r0, r1
    canp->can->FA1R = 0;
 8000840:	f8c3 121c 	str.w	r1, [r3, #540]	@ 0x21c
    canp->can->FM1R = 0;
 8000844:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
    canp->can->FS1R = 0;
 8000848:	f8c3 120c 	str.w	r1, [r3, #524]	@ 0x20c
    canp->can->FFA1R = 0;
 800084c:	f8c3 1214 	str.w	r1, [r3, #532]	@ 0x214
 8000850:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
      for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 8000854:	3201      	adds	r2, #1
 8000856:	2a0e      	cmp	r2, #14
        canp->can->sFilterRegister[i].FR1 = 0;
 8000858:	f8c1 0240 	str.w	r0, [r1, #576]	@ 0x240
        canp->can->sFilterRegister[i].FR2 = 0;
 800085c:	f8c1 0244 	str.w	r0, [r1, #580]	@ 0x244
      for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 8000860:	d1f6      	bne.n	8000850 <can_lld_set_filters.constprop.0+0x50>
    }
#endif

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
      fmask = 1 << cfp->filter;
 8000862:	2101      	movs	r1, #1
      if (cfp->mode)
 8000864:	f89c 0002 	ldrb.w	r0, [ip, #2]
      fmask = 1 << cfp->filter;
 8000868:	f8bc 2000 	ldrh.w	r2, [ip]
      if (cfp->mode)
 800086c:	07c5      	lsls	r5, r0, #31
      fmask = 1 << cfp->filter;
 800086e:	fa01 f102 	lsl.w	r1, r1, r2
      if (cfp->mode)
 8000872:	d504      	bpl.n	800087e <can_lld_set_filters.constprop.0+0x7e>
        canp->can->FM1R |= fmask;
 8000874:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 8000878:	430c      	orrs	r4, r1
 800087a:	f8c3 4204 	str.w	r4, [r3, #516]	@ 0x204
      if (cfp->scale)
 800087e:	0784      	lsls	r4, r0, #30
 8000880:	d504      	bpl.n	800088c <can_lld_set_filters.constprop.0+0x8c>
        canp->can->FS1R |= fmask;
 8000882:	f8d3 420c 	ldr.w	r4, [r3, #524]	@ 0x20c
 8000886:	430c      	orrs	r4, r1
 8000888:	f8c3 420c 	str.w	r4, [r3, #524]	@ 0x20c
      if (cfp->assignment)
 800088c:	0740      	lsls	r0, r0, #29
 800088e:	d504      	bpl.n	800089a <can_lld_set_filters.constprop.0+0x9a>
        canp->can->FFA1R |= fmask;
 8000890:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 8000894:	4308      	orrs	r0, r1
 8000896:	f8c3 0214 	str.w	r0, [r3, #532]	@ 0x214
 800089a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
      canp->can->sFilterRegister[cfp->filter].FR1 = cfp->register1;
      canp->can->sFilterRegister[cfp->filter].FR2 = cfp->register2;
 800089e:	e9dc 4001 	ldrd	r4, r0, [ip, #4]
      canp->can->sFilterRegister[cfp->filter].FR1 = cfp->register1;
 80008a2:	f8c2 4240 	str.w	r4, [r2, #576]	@ 0x240
      canp->can->sFilterRegister[cfp->filter].FR2 = cfp->register2;
 80008a6:	f8c2 0244 	str.w	r0, [r2, #580]	@ 0x244
      canp->can->FA1R |= fmask;
 80008aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80008ae:	4311      	orrs	r1, r2
 80008b0:	f8c3 121c 	str.w	r1, [r3, #540]	@ 0x21c
 80008b4:	e00c      	b.n	80008d0 <can_lld_set_filters.constprop.0+0xd0>
      canp->can->sFilterRegister[can2sb].FR2 = 0;
    }
#endif
    canp->can->FM1R = 0;
    canp->can->FFA1R = 0;
    canp->can->FS1R = 1;
 80008b6:	2201      	movs	r2, #1
    canp->can->sFilterRegister[0].FR1 = 0;
 80008b8:	f8c3 1240 	str.w	r1, [r3, #576]	@ 0x240
    canp->can->sFilterRegister[0].FR2 = 0;
 80008bc:	f8c3 1244 	str.w	r1, [r3, #580]	@ 0x244
    canp->can->FM1R = 0;
 80008c0:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
    canp->can->FFA1R = 0;
 80008c4:	f8c3 1214 	str.w	r1, [r3, #532]	@ 0x214
    canp->can->FS1R = 1;
 80008c8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
    canp->can->FA1R = 1;
 80008cc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
      canp->can->FS1R |= 1 << can2sb;
      canp->can->FA1R |= 1 << can2sb;
    }
#endif
  }
  canp->can->FMR &= ~CAN_FMR_FINIT;
 80008d0:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  /* Temporarily enabling CAN clock.*/
#if STM32_CAN_USE_CAN1
  if (canp == &CAND1) {
    rccDisableCAN1();
 80008d4:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <can_lld_set_filters.constprop.0+0xec>)
  canp->can->FMR &= ~CAN_FMR_FINIT;
 80008d6:	f021 0101 	bic.w	r1, r1, #1
 80008da:	f8c3 1200 	str.w	r1, [r3, #512]	@ 0x200
    rccDisableCAN1();
 80008de:	69d3      	ldr	r3, [r2, #28]
#if STM32_CAN_USE_CAN3
  if (canp == &CAND3) {
    rccDisableCAN3();
  }
#endif
}
 80008e0:	bc30      	pop	{r4, r5}
    rccDisableCAN1();
 80008e2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80008e6:	61d3      	str	r3, [r2, #28]
 80008e8:	69d3      	ldr	r3, [r2, #28]
}
 80008ea:	4770      	bx	lr
 80008ec:	40021000 	.word	0x40021000
 80008f0:	ffff0000 	.word	0xffff0000
 80008f4:	200010e4 	.word	0x200010e4
	...

08000900 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000900:	b570      	push	{r4, r5, r6, lr}
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8000902:	4c19      	ldr	r4, [pc, #100]	@ (8000968 <chSchGoSleepTimeoutS+0x68>)
  if (TIME_INFINITE != timeout) {
 8000904:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000906:	4605      	mov	r5, r0
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8000908:	69a6      	ldr	r6, [r4, #24]
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 800090a:	b086      	sub	sp, #24
  if (TIME_INFINITE != timeout) {
 800090c:	d01b      	beq.n	8000946 <chSchGoSleepTimeoutS+0x46>
  vtp->func    = vtfunc;
 800090e:	4b17      	ldr	r3, [pc, #92]	@ (800096c <chSchGoSleepTimeoutS+0x6c>)
  vt_enqueue(vtlp, vtp, delay);
 8000910:	a801      	add	r0, sp, #4
  vtp->func    = vtfunc;
 8000912:	e9cd 3604 	strd	r3, r6, [sp, #16]
  vt_enqueue(vtlp, vtp, delay);
 8000916:	f7ff feeb 	bl	80006f0 <vt_enqueue.constprop.0>
  currp->state = CH_STATE_CURRENT;
 800091a:	2201      	movs	r2, #1
  ch_priority_queue_t *p = pqp->next;
 800091c:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 800091e:	f886 5020 	strb.w	r5, [r6, #32]
  pqp->next       = p->next;
 8000922:	6803      	ldr	r3, [r0, #0]
  chSysSwitch(currp, otp);
 8000924:	4631      	mov	r1, r6
  pqp->next->prev = pqp;
 8000926:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8000928:	f880 2020 	strb.w	r2, [r0, #32]
  pqp->next       = p->next;
 800092c:	6023      	str	r3, [r4, #0]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 800092e:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 8000930:	f7ff fc86 	bl	8000240 <_port_switch>
    if (chVTIsArmedI(&vt)) {
 8000934:	9b04      	ldr	r3, [sp, #16]
 8000936:	b113      	cbz	r3, 800093e <chSchGoSleepTimeoutS+0x3e>
      chVTDoResetI(&vt);
 8000938:	a801      	add	r0, sp, #4
 800093a:	f7ff fda1 	bl	8000480 <chVTDoResetI>
  return currp->u.rdymsg;
 800093e:	69a3      	ldr	r3, [r4, #24]
}
 8000940:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000942:	b006      	add	sp, #24
 8000944:	bd70      	pop	{r4, r5, r6, pc}
  currp->state = CH_STATE_CURRENT;
 8000946:	2201      	movs	r2, #1
  ch_priority_queue_t *p = pqp->next;
 8000948:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 800094a:	f886 5020 	strb.w	r5, [r6, #32]
  pqp->next       = p->next;
 800094e:	6803      	ldr	r3, [r0, #0]
  chSysSwitch(currp, otp);
 8000950:	4631      	mov	r1, r6
  pqp->next->prev = pqp;
 8000952:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8000954:	f880 2020 	strb.w	r2, [r0, #32]
  pqp->next       = p->next;
 8000958:	6023      	str	r3, [r4, #0]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 800095a:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 800095c:	f7ff fc70 	bl	8000240 <_port_switch>
  return currp->u.rdymsg;
 8000960:	69a3      	ldr	r3, [r4, #24]
}
 8000962:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000964:	b006      	add	sp, #24
 8000966:	bd70      	pop	{r4, r5, r6, pc}
 8000968:	20001210 	.word	0x20001210
 800096c:	08000531 	.word	0x08000531

08000970 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 8000970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000974:	b085      	sub	sp, #20
 8000976:	f04f 0920 	mov.w	r9, #32
 800097a:	4616      	mov	r6, r2
  qnotify_t nfy = iqp->q_notify;
 800097c:	f8d0 801c 	ldr.w	r8, [r0, #28]
                     size_t n, sysinterval_t timeout) {
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8000986:	2a00      	cmp	r2, #0
 8000988:	d032      	beq.n	80009f0 <iqReadTimeout+0x80>

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 800098a:	4646      	mov	r6, r8
 800098c:	4604      	mov	r4, r0
 800098e:	4692      	mov	sl, r2
 8000990:	f04f 0b00 	mov.w	fp, #0
 8000994:	4688      	mov	r8, r1
 8000996:	9203      	str	r2, [sp, #12]
  if (n > iqGetFullI(iqp)) {
 8000998:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800099a:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 800099c:	4552      	cmp	r2, sl
    n = iqGetFullI(iqp);
 800099e:	bf28      	it	cs
 80009a0:	4655      	movcs	r5, sl
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80009a2:	6927      	ldr	r7, [r4, #16]
    n = iqGetFullI(iqp);
 80009a4:	bf38      	it	cc
 80009a6:	68a5      	ldrcc	r5, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80009a8:	1a7f      	subs	r7, r7, r1
  if (n < s1) {
 80009aa:	42af      	cmp	r7, r5
 80009ac:	d84a      	bhi.n	8000a44 <iqReadTimeout+0xd4>
  else if (n > s1) {
 80009ae:	d226      	bcs.n	80009fe <iqReadTimeout+0x8e>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80009b0:	463a      	mov	r2, r7
 80009b2:	4640      	mov	r0, r8
 80009b4:	f7ff fcaa 	bl	800030c <memcpy>
    s2 = n - s1;
 80009b8:	1bea      	subs	r2, r5, r7
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 80009ba:	68e1      	ldr	r1, [r4, #12]
 80009bc:	eb08 0007 	add.w	r0, r8, r7
 80009c0:	9202      	str	r2, [sp, #8]
 80009c2:	f7ff fca3 	bl	800030c <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 80009c6:	9a02      	ldr	r2, [sp, #8]
 80009c8:	68e1      	ldr	r1, [r4, #12]
 80009ca:	4411      	add	r1, r2
  iqp->q_counter -= n;
 80009cc:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 80009ce:	61a1      	str	r1, [r4, #24]
  iqp->q_counter -= n;
 80009d0:	1b52      	subs	r2, r2, r5
 80009d2:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 80009d4:	b10e      	cbz	r6, 80009da <iqReadTimeout+0x6a>
        nfy(iqp);
 80009d6:	4620      	mov	r0, r4
 80009d8:	47b0      	blx	r6
 80009da:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 80009de:	ebaa 0a05 	sub.w	sl, sl, r5
      bp += done;
 80009e2:	44a8      	add	r8, r5
 80009e4:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80009e8:	f1ba 0f00 	cmp.w	sl, #0
 80009ec:	d1d4      	bne.n	8000998 <iqReadTimeout+0x28>
 80009ee:	9e03      	ldr	r6, [sp, #12]
 80009f0:	4630      	mov	r0, r6
 80009f2:	2300      	movs	r3, #0
 80009f4:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 80009f8:	b005      	add	sp, #20
 80009fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80009fe:	462a      	mov	r2, r5
 8000a00:	4640      	mov	r0, r8
 8000a02:	f7ff fc83 	bl	800030c <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8000a06:	68e1      	ldr	r1, [r4, #12]
  iqp->q_counter -= n;
 8000a08:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr += n;
 8000a0a:	61a1      	str	r1, [r4, #24]
  iqp->q_counter -= n;
 8000a0c:	1b52      	subs	r2, r2, r5
 8000a0e:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8000a10:	2d00      	cmp	r5, #0
 8000a12:	d1df      	bne.n	80009d4 <iqReadTimeout+0x64>
  if (TIME_IMMEDIATE == timeout) {
 8000a14:	9b01      	ldr	r3, [sp, #4]
 8000a16:	b163      	cbz	r3, 8000a32 <iqReadTimeout+0xc2>
  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <iqReadTimeout+0xe4>)
  p->prev       = qp->prev;
 8000a1a:	6860      	ldr	r0, [r4, #4]
 8000a1c:	699a      	ldr	r2, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000a1e:	9901      	ldr	r1, [sp, #4]
 8000a20:	e9c2 4000 	strd	r4, r0, [r2]
  p->prev->next = p;
 8000a24:	6002      	str	r2, [r0, #0]
 8000a26:	2004      	movs	r0, #4
  qp->prev      = p;
 8000a28:	6062      	str	r2, [r4, #4]
 8000a2a:	f7ff ff69 	bl	8000900 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	d0b2      	beq.n	8000998 <iqReadTimeout+0x28>
  return max - n;
 8000a32:	9e03      	ldr	r6, [sp, #12]
 8000a34:	2300      	movs	r3, #0
 8000a36:	eba6 000a 	sub.w	r0, r6, sl
 8000a3a:	f383 8811 	msr	BASEPRI, r3
}
 8000a3e:	b005      	add	sp, #20
 8000a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8000a44:	462a      	mov	r2, r5
 8000a46:	4640      	mov	r0, r8
 8000a48:	f7ff fc60 	bl	800030c <memcpy>
    iqp->q_rdptr += n;
 8000a4c:	69a1      	ldr	r1, [r4, #24]
 8000a4e:	4429      	add	r1, r5
 8000a50:	e7da      	b.n	8000a08 <iqReadTimeout+0x98>
 8000a52:	bf00      	nop
 8000a54:	20001210 	.word	0x20001210
	...

08000a60 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8000a60:	f04f 33ff 	mov.w	r3, #4294967295
 8000a64:	300c      	adds	r0, #12
 8000a66:	f7ff bf83 	b.w	8000970 <iqReadTimeout>
 8000a6a:	bf00      	nop
 8000a6c:	0000      	movs	r0, r0
	...

08000a70 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8000a70:	300c      	adds	r0, #12
 8000a72:	f7ff bf7d 	b.w	8000970 <iqReadTimeout>
 8000a76:	bf00      	nop
	...

08000a80 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	2320      	movs	r3, #32
 8000a84:	4604      	mov	r4, r0
 8000a86:	f383 8811 	msr	BASEPRI, r3
  while (iqIsEmptyI(iqp)) {
 8000a8a:	6883      	ldr	r3, [r0, #8]
 8000a8c:	b98b      	cbnz	r3, 8000ab2 <iqGetTimeout+0x32>
  if (TIME_IMMEDIATE == timeout) {
 8000a8e:	460d      	mov	r5, r1
 8000a90:	b329      	cbz	r1, 8000ade <iqGetTimeout+0x5e>
 8000a92:	4e16      	ldr	r6, [pc, #88]	@ (8000aec <iqGetTimeout+0x6c>)
  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 8000a94:	69b3      	ldr	r3, [r6, #24]
  p->prev       = qp->prev;
 8000a96:	6862      	ldr	r2, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000a98:	4629      	mov	r1, r5
 8000a9a:	e9c3 4200 	strd	r4, r2, [r3]
 8000a9e:	2004      	movs	r0, #4
  p->prev->next = p;
 8000aa0:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8000aa2:	6063      	str	r3, [r4, #4]
 8000aa4:	f7ff ff2c 	bl	8000900 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8000aa8:	2800      	cmp	r0, #0
 8000aaa:	db1a      	blt.n	8000ae2 <iqGetTimeout+0x62>
  while (iqIsEmptyI(iqp)) {
 8000aac:	68a3      	ldr	r3, [r4, #8]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d0f0      	beq.n	8000a94 <iqGetTimeout+0x14>
  iqp->q_counter--;
 8000ab2:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8000ab4:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	60a3      	str	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8000aba:	6923      	ldr	r3, [r4, #16]
  b = *iqp->q_rdptr++;
 8000abc:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8000abe:	429a      	cmp	r2, r3
    iqp->q_rdptr = iqp->q_buffer;
 8000ac0:	bf28      	it	cs
 8000ac2:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8000ac4:	61a2      	str	r2, [r4, #24]
 8000ac6:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8000ac8:	bf28      	it	cs
 8000aca:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 8000acc:	69e3      	ldr	r3, [r4, #28]
 8000ace:	b10b      	cbz	r3, 8000ad4 <iqGetTimeout+0x54>
    iqp->q_notify(iqp);
 8000ad0:	4620      	mov	r0, r4
 8000ad2:	4798      	blx	r3
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8000ada:	4628      	mov	r0, r5
}
 8000adc:	bd70      	pop	{r4, r5, r6, pc}
    return MSG_TIMEOUT;
 8000ade:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f383 8811 	msr	BASEPRI, r3
 8000ae8:	bd70      	pop	{r4, r5, r6, pc}
 8000aea:	bf00      	nop
 8000aec:	20001210 	.word	0x20001210

08000af0 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295
 8000af4:	300c      	adds	r0, #12
 8000af6:	f7ff bfc3 	b.w	8000a80 <iqGetTimeout>
 8000afa:	bf00      	nop
 8000afc:	0000      	movs	r0, r0
	...

08000b00 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8000b00:	300c      	adds	r0, #12
 8000b02:	f7ff bfbd 	b.w	8000a80 <iqGetTimeout>
 8000b06:	bf00      	nop
	...

08000b10 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8000b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b12:	2320      	movs	r3, #32
 8000b14:	4604      	mov	r4, r0
 8000b16:	460f      	mov	r7, r1
 8000b18:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 8000b1c:	6883      	ldr	r3, [r0, #8]
 8000b1e:	b98b      	cbnz	r3, 8000b44 <oqPutTimeout+0x34>
  if (TIME_IMMEDIATE == timeout) {
 8000b20:	4615      	mov	r5, r2
 8000b22:	b322      	cbz	r2, 8000b6e <oqPutTimeout+0x5e>
 8000b24:	4e15      	ldr	r6, [pc, #84]	@ (8000b7c <oqPutTimeout+0x6c>)
  p->prev       = qp->prev;
 8000b26:	6860      	ldr	r0, [r4, #4]
  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 8000b28:	69b3      	ldr	r3, [r6, #24]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000b2a:	4629      	mov	r1, r5
 8000b2c:	e9c3 4000 	strd	r4, r0, [r3]
  p->prev->next = p;
 8000b30:	6003      	str	r3, [r0, #0]
 8000b32:	2004      	movs	r0, #4
  qp->prev      = p;
 8000b34:	6063      	str	r3, [r4, #4]
 8000b36:	f7ff fee3 	bl	8000900 <chSchGoSleepTimeoutS>
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	db19      	blt.n	8000b72 <oqPutTimeout+0x62>
  while (oqIsFullI(oqp)) {
 8000b3e:	68a3      	ldr	r3, [r4, #8]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d0f0      	beq.n	8000b26 <oqPutTimeout+0x16>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8000b44:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8000b46:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000b48:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8000b4a:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8000b4c:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8000b4e:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000b50:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000b52:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8000b56:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8000b58:	bf24      	itt	cs
 8000b5a:	68e3      	ldrcs	r3, [r4, #12]
 8000b5c:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8000b5e:	69e3      	ldr	r3, [r4, #28]
 8000b60:	b10b      	cbz	r3, 8000b66 <oqPutTimeout+0x56>
    oqp->q_notify(oqp);
 8000b62:	4620      	mov	r0, r4
 8000b64:	4798      	blx	r3
 8000b66:	2000      	movs	r0, #0
 8000b68:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 8000b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return MSG_TIMEOUT;
 8000b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b72:	2300      	movs	r3, #0
 8000b74:	f383 8811 	msr	BASEPRI, r3
 8000b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20001210 	.word	0x20001210

08000b80 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295
 8000b84:	3030      	adds	r0, #48	@ 0x30
 8000b86:	f7ff bfc3 	b.w	8000b10 <oqPutTimeout>
 8000b8a:	bf00      	nop
 8000b8c:	0000      	movs	r0, r0
	...

08000b90 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8000b90:	3030      	adds	r0, #48	@ 0x30
 8000b92:	f7ff bfbd 	b.w	8000b10 <oqPutTimeout>
 8000b96:	bf00      	nop
	...

08000ba0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8000ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba4:	b085      	sub	sp, #20
 8000ba6:	f04f 0920 	mov.w	r9, #32
 8000baa:	4616      	mov	r6, r2
  qnotify_t nfy = oqp->q_notify;
 8000bac:	f8d0 801c 	ldr.w	r8, [r0, #28]
                      size_t n, sysinterval_t timeout) {
 8000bb0:	9301      	str	r3, [sp, #4]
 8000bb2:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8000bb6:	b38a      	cbz	r2, 8000c1c <oqWriteTimeout+0x7c>
  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 8000bb8:	4646      	mov	r6, r8
 8000bba:	4604      	mov	r4, r0
 8000bbc:	4692      	mov	sl, r2
 8000bbe:	f04f 0b00 	mov.w	fp, #0
 8000bc2:	4688      	mov	r8, r1
 8000bc4:	9203      	str	r2, [sp, #12]
  if (n > oqGetEmptyI(oqp)) {
 8000bc6:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8000bc8:	e9d4 7004 	ldrd	r7, r0, [r4, #16]
  if (n > oqGetEmptyI(oqp)) {
 8000bcc:	4552      	cmp	r2, sl
    n = oqGetEmptyI(oqp);
 8000bce:	bf2c      	ite	cs
 8000bd0:	4655      	movcs	r5, sl
 8000bd2:	68a5      	ldrcc	r5, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8000bd4:	1a3f      	subs	r7, r7, r0
  if (n < s1) {
 8000bd6:	42af      	cmp	r7, r5
 8000bd8:	d84a      	bhi.n	8000c70 <oqWriteTimeout+0xd0>
  else if (n > s1) {
 8000bda:	d226      	bcs.n	8000c2a <oqWriteTimeout+0x8a>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8000bdc:	463a      	mov	r2, r7
 8000bde:	4641      	mov	r1, r8
 8000be0:	f7ff fb94 	bl	800030c <memcpy>
    s2 = n - s1;
 8000be4:	1bea      	subs	r2, r5, r7
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8000be6:	eb08 0107 	add.w	r1, r8, r7
 8000bea:	68e0      	ldr	r0, [r4, #12]
 8000bec:	9202      	str	r2, [sp, #8]
 8000bee:	f7ff fb8d 	bl	800030c <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8000bf2:	9a02      	ldr	r2, [sp, #8]
 8000bf4:	68e1      	ldr	r1, [r4, #12]
 8000bf6:	4411      	add	r1, r2
  oqp->q_counter -= n;
 8000bf8:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 8000bfa:	6161      	str	r1, [r4, #20]
  oqp->q_counter -= n;
 8000bfc:	1b52      	subs	r2, r2, r5
 8000bfe:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8000c00:	b10e      	cbz	r6, 8000c06 <oqWriteTimeout+0x66>
        nfy(oqp);
 8000c02:	4620      	mov	r0, r4
 8000c04:	47b0      	blx	r6
 8000c06:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8000c0a:	ebaa 0a05 	sub.w	sl, sl, r5
      bp += done;
 8000c0e:	44a8      	add	r8, r5
 8000c10:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8000c14:	f1ba 0f00 	cmp.w	sl, #0
 8000c18:	d1d5      	bne.n	8000bc6 <oqWriteTimeout+0x26>
 8000c1a:	9e03      	ldr	r6, [sp, #12]
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8000c24:	b005      	add	sp, #20
 8000c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000c2a:	4641      	mov	r1, r8
 8000c2c:	462a      	mov	r2, r5
 8000c2e:	f7ff fb6d 	bl	800030c <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8000c32:	68e1      	ldr	r1, [r4, #12]
  oqp->q_counter -= n;
 8000c34:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr += n;
 8000c36:	6161      	str	r1, [r4, #20]
  oqp->q_counter -= n;
 8000c38:	1b52      	subs	r2, r2, r5
 8000c3a:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8000c3c:	2d00      	cmp	r5, #0
 8000c3e:	d1df      	bne.n	8000c00 <oqWriteTimeout+0x60>
  if (TIME_IMMEDIATE == timeout) {
 8000c40:	9b01      	ldr	r3, [sp, #4]
 8000c42:	b163      	cbz	r3, 8000c5e <oqWriteTimeout+0xbe>
  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 8000c44:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <oqWriteTimeout+0xe0>)
  p->prev       = qp->prev;
 8000c46:	6860      	ldr	r0, [r4, #4]
 8000c48:	699a      	ldr	r2, [r3, #24]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000c4a:	9901      	ldr	r1, [sp, #4]
 8000c4c:	e9c2 4000 	strd	r4, r0, [r2]
  p->prev->next = p;
 8000c50:	6002      	str	r2, [r0, #0]
 8000c52:	2004      	movs	r0, #4
  qp->prev      = p;
 8000c54:	6062      	str	r2, [r4, #4]
 8000c56:	f7ff fe53 	bl	8000900 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	d0b3      	beq.n	8000bc6 <oqWriteTimeout+0x26>
  return max - n;
 8000c5e:	9e03      	ldr	r6, [sp, #12]
 8000c60:	2300      	movs	r3, #0
 8000c62:	eba6 000a 	sub.w	r0, r6, sl
 8000c66:	f383 8811 	msr	BASEPRI, r3
}
 8000c6a:	b005      	add	sp, #20
 8000c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000c70:	4641      	mov	r1, r8
 8000c72:	462a      	mov	r2, r5
 8000c74:	f7ff fb4a 	bl	800030c <memcpy>
    oqp->q_wrptr += n;
 8000c78:	6961      	ldr	r1, [r4, #20]
 8000c7a:	4429      	add	r1, r5
 8000c7c:	e7da      	b.n	8000c34 <oqWriteTimeout+0x94>
 8000c7e:	bf00      	nop
 8000c80:	20001210 	.word	0x20001210
	...

08000c90 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295
 8000c94:	3030      	adds	r0, #48	@ 0x30
 8000c96:	f7ff bf83 	b.w	8000ba0 <oqWriteTimeout>
 8000c9a:	bf00      	nop
 8000c9c:	0000      	movs	r0, r0
	...

08000ca0 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8000ca0:	3030      	adds	r0, #48	@ 0x30
 8000ca2:	f7ff bf7d 	b.w	8000ba0 <oqWriteTimeout>
 8000ca6:	bf00      	nop
	...

08000cb0 <chSchWakeupS.constprop.0>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000cb0:	b470      	push	{r4, r5, r6}
  ntp->u.rdymsg = msg;
 8000cb2:	2600      	movs	r6, #0
  thread_t *otp = currp;
 8000cb4:	4a13      	ldr	r2, [pc, #76]	@ (8000d04 <chSchWakeupS.constprop.0+0x54>)
  if (ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio) {
 8000cb6:	6885      	ldr	r5, [r0, #8]
  thread_t *otp = currp;
 8000cb8:	6991      	ldr	r1, [r2, #24]
  if (ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio) {
 8000cba:	688c      	ldr	r4, [r1, #8]
  ntp->u.rdymsg = msg;
 8000cbc:	6246      	str	r6, [r0, #36]	@ 0x24
  if (ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio) {
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	d912      	bls.n	8000ce8 <chSchWakeupS.constprop.0+0x38>
  return (thread_t *)ch_pqueue_insert_ahead(&ch.rlist.pqueue,
 8000cc2:	4613      	mov	r3, r2
  tp->state = CH_STATE_READY;
 8000cc4:	f881 6020 	strb.w	r6, [r1, #32]
static inline ch_priority_queue_t *ch_pqueue_insert_ahead(ch_priority_queue_t *pqp,
                                                          ch_priority_queue_t *p) {

  /* Scanning priority queue.*/
  do {
    pqp = pqp->next;
 8000cc8:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio > p->prio);
 8000cca:	689d      	ldr	r5, [r3, #8]
 8000ccc:	42ac      	cmp	r4, r5
 8000cce:	d3fb      	bcc.n	8000cc8 <chSchWakeupS.constprop.0+0x18>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 8000cd0:	685c      	ldr	r4, [r3, #4]
 8000cd2:	e9c1 3400 	strd	r3, r4, [r1]
  p->prev->next = p;
 8000cd6:	6021      	str	r1, [r4, #0]
    ntp->state = CH_STATE_CURRENT;
 8000cd8:	2401      	movs	r4, #1
  pqp->prev     = p;
 8000cda:	6059      	str	r1, [r3, #4]
 8000cdc:	f880 4020 	strb.w	r4, [r0, #32]
}
 8000ce0:	bc70      	pop	{r4, r5, r6}
    currp = ntp;
 8000ce2:	6190      	str	r0, [r2, #24]
    chSysSwitch(ntp, otp);
 8000ce4:	f7ff baac 	b.w	8000240 <_port_switch>
  return (thread_t *)ch_pqueue_insert_behind(&ch.rlist.pqueue,
 8000ce8:	4613      	mov	r3, r2
  tp->state = CH_STATE_READY;
 8000cea:	f880 6020 	strb.w	r6, [r0, #32]
    pqp = pqp->next;
 8000cee:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	4295      	cmp	r5, r2
 8000cf4:	d9fb      	bls.n	8000cee <chSchWakeupS.constprop.0+0x3e>
}
 8000cf6:	bc70      	pop	{r4, r5, r6}
  p->prev       = pqp->prev;
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8000cfe:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8000d00:	6058      	str	r0, [r3, #4]
 8000d02:	4770      	bx	lr
 8000d04:	20001210 	.word	0x20001210
	...

08000d10 <chThdCreateStatic.constprop.0.isra.0>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8000d10:	b538      	push	{r3, r4, r5, lr}
 8000d12:	2420      	movs	r4, #32
 8000d14:	4603      	mov	r3, r0
 8000d16:	f384 8811 	msr	BASEPRI, r4
  tp->name            = name;
 8000d1a:	4d1a      	ldr	r5, [pc, #104]	@ (8000d84 <chThdCreateStatic.constprop.0.isra.0+0x74>)
  tp->hdr.pqueue.prio = prio;
 8000d1c:	f8c3 1108 	str.w	r1, [r3, #264]	@ 0x108
  tp->realprio        = prio;
 8000d20:	f8c3 113c 	str.w	r1, [r3, #316]	@ 0x13c
  tp->name            = name;
 8000d24:	f8c3 5118 	str.w	r5, [r3, #280]	@ 0x118
  tp->refs            = (trefs_t)1;
 8000d28:	2101      	movs	r1, #1
  tp->state           = CH_STATE_WTSTART;
 8000d2a:	2502      	movs	r5, #2
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8000d2c:	f103 04dc 	add.w	r4, r3, #220	@ 0xdc
 8000d30:	f8c3 410c 	str.w	r4, [r3, #268]	@ 0x10c
 8000d34:	2400      	movs	r4, #0
 8000d36:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  REG_INSERT(tp);
 8000d3a:	4a13      	ldr	r2, [pc, #76]	@ (8000d88 <chThdCreateStatic.constprop.0.isra.0+0x78>)
  tp->state           = CH_STATE_WTSTART;
 8000d3c:	f8a3 5120 	strh.w	r5, [r3, #288]	@ 0x120
  tp->refs            = (trefs_t)1;
 8000d40:	f883 1122 	strb.w	r1, [r3, #290]	@ 0x122
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8000d44:	4d11      	ldr	r5, [pc, #68]	@ (8000d8c <chThdCreateStatic.constprop.0.isra.0+0x7c>)
  REG_INSERT(tp);
 8000d46:	6951      	ldr	r1, [r2, #20]
  tp = threadref(((uint8_t *)wsp + size -
 8000d48:	f500 7080 	add.w	r0, r0, #256	@ 0x100
  REG_INSERT(tp);
 8000d4c:	f8c3 1114 	str.w	r1, [r3, #276]	@ 0x114
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8000d50:	f8c3 50fc 	str.w	r5, [r3, #252]	@ 0xfc
  tp->epending        = (eventmask_t)0;
 8000d54:	e9c3 444d 	strd	r4, r4, [r3, #308]	@ 0x134
  tp->wabase = (stkalign_t *)wsp;
 8000d58:	f8c3 311c 	str.w	r3, [r3, #284]	@ 0x11c
  REG_INSERT(tp);
 8000d5c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8000d60:	f8c3 40e0 	str.w	r4, [r3, #224]	@ 0xe0
  ch_list_init(&tp->waiting);
 8000d64:	f503 7594 	add.w	r5, r3, #296	@ 0x128
  REG_INSERT(tp);
 8000d68:	6108      	str	r0, [r1, #16]
  ch_queue_init(&tp->msgqueue);
 8000d6a:	f503 7196 	add.w	r1, r3, #300	@ 0x12c
  qp->next = qp;
 8000d6e:	e9c3 514a 	strd	r5, r1, [r3, #296]	@ 0x128
  qp->prev = qp;
 8000d72:	f8c3 1130 	str.w	r1, [r3, #304]	@ 0x130
  REG_INSERT(tp);
 8000d76:	6150      	str	r0, [r2, #20]
  chSchWakeupS(tp, MSG_OK);
 8000d78:	f7ff ff9a 	bl	8000cb0 <chSchWakeupS.constprop.0>
 8000d7c:	f384 8811 	msr	BASEPRI, r4
}
 8000d80:	bd38      	pop	{r3, r4, r5, pc}
 8000d82:	bf00      	nop
 8000d84:	08002978 	.word	0x08002978
 8000d88:	20001210 	.word	0x20001210
 8000d8c:	08000251 	.word	0x08000251

08000d90 <_ZL11CanRxThreadPv>:
    },
};

static THD_WORKING_AREA(waCanRxThread, 128);
static THD_FUNCTION(CanRxThread, p)
{
 8000d90:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8000d94:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8000f00 <_ZL11CanRxThreadPv+0x170>
 8000d98:	4a5a      	ldr	r2, [pc, #360]	@ (8000f04 <_ZL11CanRxThreadPv+0x174>)
 8000d9a:	f8db 3018 	ldr.w	r3, [fp, #24]
 8000d9e:	4d5a      	ldr	r5, [pc, #360]	@ (8000f08 <_ZL11CanRxThreadPv+0x178>)
 8000da0:	b089      	sub	sp, #36	@ 0x24
 8000da2:	f04f 0820 	mov.w	r8, #32
  otp->state = newstate;
 8000da6:	2604      	movs	r6, #4
  currp->state = CH_STATE_CURRENT;
 8000da8:	2401      	movs	r4, #1
 8000daa:	f04f 0900 	mov.w	r9, #0
 8000dae:	4f57      	ldr	r7, [pc, #348]	@ (8000f0c <_ZL11CanRxThreadPv+0x17c>)
 8000db0:	619a      	str	r2, [r3, #24]
 8000db2:	f1a5 0a10 	sub.w	sl, r5, #16
#else
  (void)name;
#endif
}
 8000db6:	e061      	b.n	8000e7c <_ZL11CanRxThreadPv+0xec>
 */
bool can_lld_is_rx_nonempty(CANDriver *canp, canmbx_t mailbox) {

  switch (mailbox) {
  case CAN_ANY_MAILBOX:
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
 8000db8:	f8da 2024 	ldr.w	r2, [sl, #36]	@ 0x24
 8000dbc:	68d1      	ldr	r1, [r2, #12]
 8000dbe:	0789      	lsls	r1, r1, #30
 8000dc0:	d102      	bne.n	8000dc8 <_ZL11CanRxThreadPv+0x38>
            (canp->can->RF1R & CAN_RF1R_FMP1) != 0);
 8000dc2:	6911      	ldr	r1, [r2, #16]
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
 8000dc4:	0788      	lsls	r0, r1, #30
 8000dc6:	d05f      	beq.n	8000e88 <_ZL11CanRxThreadPv+0xf8>
                     canmbx_t mailbox,
                     CANRxFrame *crfp) {
  uint32_t rir, rdtr;

  if (mailbox == CAN_ANY_MAILBOX) {
    if ((canp->can->RF0R & CAN_RF0R_FMP0) != 0)
 8000dc8:	68d1      	ldr	r1, [r2, #12]
 8000dca:	078b      	lsls	r3, r1, #30
 8000dcc:	d07a      	beq.n	8000ec4 <_ZL11CanRxThreadPv+0x134>
    }
  }
  switch (mailbox) {
  case 1:
    /* Fetches the message.*/
    rir  = canp->can->sFIFOMailBox[0].RIR;
 8000dce:	f8d2 01b0 	ldr.w	r0, [r2, #432]	@ 0x1b0
    rdtr = canp->can->sFIFOMailBox[0].RDTR;
 8000dd2:	f8d2 11b4 	ldr.w	r1, [r2, #436]	@ 0x1b4
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
 8000dd6:	f8d2 31b8 	ldr.w	r3, [r2, #440]	@ 0x1b8
 8000dda:	613b      	str	r3, [r7, #16]
    crfp->data32[1] = canp->can->sFIFOMailBox[0].RDHR;
 8000ddc:	f8d2 31bc 	ldr.w	r3, [r2, #444]	@ 0x1bc
 8000de0:	617b      	str	r3, [r7, #20]

    /* Releases the mailbox.*/
    canp->can->RF0R = CAN_RF0R_RFOM0;
 8000de2:	f8c2 800c 	str.w	r8, [r2, #12]

    /* If the queue is empty re-enables the interrupt in order to generate
       events again.*/
    if ((canp->can->RF0R & CAN_RF0R_FMP0) == 0)
 8000de6:	68d3      	ldr	r3, [r2, #12]
 8000de8:	079b      	lsls	r3, r3, #30
 8000dea:	d103      	bne.n	8000df4 <_ZL11CanRxThreadPv+0x64>
      canp->can->IER |= CAN_IER_FMPIE0;
 8000dec:	6953      	ldr	r3, [r2, #20]
 8000dee:	f043 0302 	orr.w	r3, r3, #2
 8000df2:	6153      	str	r3, [r2, #20]
    /* Should not happen, do nothing.*/
    return;
  }

  /* Decodes the various fields in the RX frame.*/
  crfp->RTR = (rir & CAN_RI0R_RTR) >> 1;
 8000df4:	f897 c004 	ldrb.w	ip, [r7, #4]
 8000df8:	f3c0 0240 	ubfx	r2, r0, #1, #1
 8000dfc:	f3c0 0e80 	ubfx	lr, r0, #2, #1
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	f02c 0c30 	bic.w	ip, ip, #48	@ 0x30
 8000e06:	ea42 124e 	orr.w	r2, r2, lr, lsl #5
 8000e0a:	ea42 020c 	orr.w	r2, r2, ip
  crfp->IDE = (rir & CAN_RI0R_IDE) >> 2;
  if (crfp->IDE)
 8000e0e:	0693      	lsls	r3, r2, #26
  crfp->RTR = (rir & CAN_RI0R_RTR) >> 1;
 8000e10:	713a      	strb	r2, [r7, #4]
  if (crfp->IDE)
 8000e12:	d56e      	bpl.n	8000ef2 <_ZL11CanRxThreadPv+0x162>
    crfp->EID = rir >> 3;
 8000e14:	68ba      	ldr	r2, [r7, #8]
 8000e16:	08c0      	lsrs	r0, r0, #3
 8000e18:	f360 021c 	bfi	r2, r0, #0, #29
 8000e1c:	60ba      	str	r2, [r7, #8]
  else
    crfp->SID = rir >> 21;
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 8000e1e:	793a      	ldrb	r2, [r7, #4]
  crfp->FMI = (uint8_t)(rdtr >> 8);
 8000e20:	0a08      	lsrs	r0, r1, #8
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 8000e22:	f361 0203 	bfi	r2, r1, #0, #4
  crfp->TIME = (uint16_t)(rdtr >> 16);
 8000e26:	0c09      	lsrs	r1, r1, #16
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 8000e28:	713a      	strb	r2, [r7, #4]
  crfp->FMI = (uint8_t)(rdtr >> 8);
 8000e2a:	7038      	strb	r0, [r7, #0]
  crfp->TIME = (uint16_t)(rdtr >> 16);
 8000e2c:	8079      	strh	r1, [r7, #2]
 8000e2e:	f389 8811 	msr	BASEPRI, r9
 8000e32:	f388 8811 	msr	BASEPRI, r8
  vtp->func    = vtfunc;
 8000e36:	4b36      	ldr	r3, [pc, #216]	@ (8000f10 <_ZL11CanRxThreadPv+0x180>)
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8000e38:	f8db 2018 	ldr.w	r2, [fp, #24]
  vt_enqueue(vtlp, vtp, delay);
 8000e3c:	2114      	movs	r1, #20
 8000e3e:	a803      	add	r0, sp, #12
  vtp->par     = par;
 8000e40:	9207      	str	r2, [sp, #28]
 8000e42:	9201      	str	r2, [sp, #4]
  vtp->func    = vtfunc;
 8000e44:	9306      	str	r3, [sp, #24]
  vt_enqueue(vtlp, vtp, delay);
 8000e46:	f7ff fc53 	bl	80006f0 <vt_enqueue.constprop.0>
  otp->state = newstate;
 8000e4a:	2108      	movs	r1, #8
 8000e4c:	9a01      	ldr	r2, [sp, #4]
  ch_priority_queue_t *p = pqp->next;
 8000e4e:	f8db 0000 	ldr.w	r0, [fp]
 8000e52:	f882 1020 	strb.w	r1, [r2, #32]
  chSysSwitch(currp, otp);
 8000e56:	4611      	mov	r1, r2
  pqp->next       = p->next;
 8000e58:	6802      	ldr	r2, [r0, #0]
  pqp->next->prev = pqp;
 8000e5a:	f8c2 b004 	str.w	fp, [r2, #4]
  currp->state = CH_STATE_CURRENT;
 8000e5e:	f880 4020 	strb.w	r4, [r0, #32]
  pqp->next       = p->next;
 8000e62:	f8cb 2000 	str.w	r2, [fp]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 8000e66:	f8cb 0018 	str.w	r0, [fp, #24]
  chSysSwitch(currp, otp);
 8000e6a:	f7ff f9e9 	bl	8000240 <_port_switch>
    if (chVTIsArmedI(&vt)) {
 8000e6e:	9a06      	ldr	r2, [sp, #24]
 8000e70:	b112      	cbz	r2, 8000e78 <_ZL11CanRxThreadPv+0xe8>
      chVTDoResetI(&vt);
 8000e72:	a803      	add	r0, sp, #12
 8000e74:	f7ff fb04 	bl	8000480 <chVTDoResetI>
 8000e78:	f389 8811 	msr	BASEPRI, r9
 8000e7c:	f388 8811 	msr	BASEPRI, r8
  osalSysLock();
  osalDbgAssert((canp->state == CAN_READY) || (canp->state == CAN_SLEEP),
                "invalid state");

  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_rx_nonempty(canp, mailbox)) {
 8000e80:	f89a 2000 	ldrb.w	r2, [sl]
 8000e84:	2a05      	cmp	r2, #5
 8000e86:	d197      	bne.n	8000db8 <_ZL11CanRxThreadPv+0x28>
  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 8000e88:	f8db 1018 	ldr.w	r1, [fp, #24]
  p->prev       = qp->prev;
 8000e8c:	f8da 2014 	ldr.w	r2, [sl, #20]
  ch_priority_queue_t *p = pqp->next;
 8000e90:	f8db 0000 	ldr.w	r0, [fp]
  p->prev       = qp->prev;
 8000e94:	e9c1 5200 	strd	r5, r2, [r1]
  p->prev->next = p;
 8000e98:	6011      	str	r1, [r2, #0]
  otp->state = newstate;
 8000e9a:	f881 6020 	strb.w	r6, [r1, #32]
  pqp->next       = p->next;
 8000e9e:	6802      	ldr	r2, [r0, #0]
  qp->prev      = p;
 8000ea0:	f8ca 1014 	str.w	r1, [sl, #20]
  pqp->next->prev = pqp;
 8000ea4:	f8c2 b004 	str.w	fp, [r2, #4]
  currp->state = CH_STATE_CURRENT;
 8000ea8:	f880 4020 	strb.w	r4, [r0, #32]
  pqp->next       = p->next;
 8000eac:	f8cb 2000 	str.w	r2, [fp]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 8000eb0:	f8cb 0018 	str.w	r0, [fp, #24]
  chSysSwitch(currp, otp);
 8000eb4:	f7ff f9c4 	bl	8000240 <_port_switch>
  return currp->u.rdymsg;
 8000eb8:	f8db 2018 	ldr.w	r2, [fp, #24]
  /*lint -restore*/
    msg_t msg = osalThreadEnqueueTimeoutS(&canp->rxqueue, timeout);
    if (msg != MSG_OK) {
 8000ebc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8000ebe:	2a00      	cmp	r2, #0
 8000ec0:	d0de      	beq.n	8000e80 <_ZL11CanRxThreadPv+0xf0>
 8000ec2:	e7d9      	b.n	8000e78 <_ZL11CanRxThreadPv+0xe8>
    else if ((canp->can->RF1R & CAN_RF1R_FMP1) != 0)
 8000ec4:	6911      	ldr	r1, [r2, #16]
 8000ec6:	0789      	lsls	r1, r1, #30
 8000ec8:	d0b1      	beq.n	8000e2e <_ZL11CanRxThreadPv+0x9e>
    rir  = canp->can->sFIFOMailBox[1].RIR;
 8000eca:	f8d2 01c0 	ldr.w	r0, [r2, #448]	@ 0x1c0
    rdtr = canp->can->sFIFOMailBox[1].RDTR;
 8000ece:	f8d2 11c4 	ldr.w	r1, [r2, #452]	@ 0x1c4
    crfp->data32[0] = canp->can->sFIFOMailBox[1].RDLR;
 8000ed2:	f8d2 31c8 	ldr.w	r3, [r2, #456]	@ 0x1c8
 8000ed6:	613b      	str	r3, [r7, #16]
    crfp->data32[1] = canp->can->sFIFOMailBox[1].RDHR;
 8000ed8:	f8d2 31cc 	ldr.w	r3, [r2, #460]	@ 0x1cc
 8000edc:	617b      	str	r3, [r7, #20]
    canp->can->RF1R = CAN_RF1R_RFOM1;
 8000ede:	f8c2 8010 	str.w	r8, [r2, #16]
    if ((canp->can->RF1R & CAN_RF1R_FMP1) == 0)
 8000ee2:	6913      	ldr	r3, [r2, #16]
 8000ee4:	079b      	lsls	r3, r3, #30
 8000ee6:	d185      	bne.n	8000df4 <_ZL11CanRxThreadPv+0x64>
      canp->can->IER |= CAN_IER_FMPIE1;
 8000ee8:	6953      	ldr	r3, [r2, #20]
 8000eea:	f043 0310 	orr.w	r3, r3, #16
 8000eee:	6153      	str	r3, [r2, #20]
 8000ef0:	e780      	b.n	8000df4 <_ZL11CanRxThreadPv+0x64>
    crfp->SID = rir >> 21;
 8000ef2:	893a      	ldrh	r2, [r7, #8]
 8000ef4:	0d40      	lsrs	r0, r0, #21
 8000ef6:	f360 020a 	bfi	r2, r0, #0, #11
 8000efa:	813a      	strh	r2, [r7, #8]
 8000efc:	e78f      	b.n	8000e1e <_ZL11CanRxThreadPv+0x8e>
 8000efe:	bf00      	nop
 8000f00:	20001210 	.word	0x20001210
 8000f04:	08002980 	.word	0x08002980
 8000f08:	200010f4 	.word	0x200010f4
 8000f0c:	200008d8 	.word	0x200008d8
 8000f10:	08000531 	.word	0x08000531
	...

08000f20 <_ZL11CanTxThreadPv>:
 8000f20:	f04f 0a20 	mov.w	sl, #32
  currp->state = CH_STATE_CURRENT;
 8000f24:	2601      	movs	r6, #1
    }
}

static THD_WORKING_AREA(waCanTxThread, 128);
static THD_FUNCTION(CanTxThread, p)
{
 8000f26:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  ch.rlist.current->name = name;
 8000f2a:	4d37      	ldr	r5, [pc, #220]	@ (8001008 <_ZL11CanTxThreadPv+0xe8>)
 8000f2c:	4a37      	ldr	r2, [pc, #220]	@ (800100c <_ZL11CanTxThreadPv+0xec>)
 8000f2e:	69ab      	ldr	r3, [r5, #24]
 8000f30:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8001010 <_ZL11CanTxThreadPv+0xf0>
 8000f34:	4f37      	ldr	r7, [pc, #220]	@ (8001014 <_ZL11CanTxThreadPv+0xf4>)
 8000f36:	b087      	sub	sp, #28
 8000f38:	f1a9 0b08 	sub.w	fp, r9, #8
 8000f3c:	619a      	str	r2, [r3, #24]
 8000f3e:	f38a 8811 	msr	BASEPRI, sl
  otp->state = newstate;
 8000f42:	f04f 0804 	mov.w	r8, #4
  while ((canp->state == CAN_SLEEP) || !can_lld_is_tx_empty(canp, mailbox)) {
 8000f46:	f89b 3000 	ldrb.w	r3, [fp]
 8000f4a:	2b05      	cmp	r3, #5
 8000f4c:	d005      	beq.n	8000f5a <_ZL11CanTxThreadPv+0x3a>
    return (canp->can->TSR & CAN_TSR_TME) != 0;
 8000f4e:	f8db 3024 	ldr.w	r3, [fp, #36]	@ 0x24
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	f012 5fe0 	tst.w	r2, #469762048	@ 0x1c000000
 8000f58:	d144      	bne.n	8000fe4 <_ZL11CanTxThreadPv+0xc4>
 8000f5a:	69ac      	ldr	r4, [r5, #24]
  p->prev       = qp->prev;
 8000f5c:	f8db 300c 	ldr.w	r3, [fp, #12]
 8000f60:	21c8      	movs	r1, #200	@ 0xc8
 8000f62:	e9c4 9300 	strd	r9, r3, [r4]
 8000f66:	a801      	add	r0, sp, #4
  p->prev->next = p;
 8000f68:	601c      	str	r4, [r3, #0]
  vtp->func    = vtfunc;
 8000f6a:	e9cd 7404 	strd	r7, r4, [sp, #16]
  qp->prev      = p;
 8000f6e:	f8cb 400c 	str.w	r4, [fp, #12]
  vt_enqueue(vtlp, vtp, delay);
 8000f72:	f7ff fbbd 	bl	80006f0 <vt_enqueue.constprop.0>
  ch_priority_queue_t *p = pqp->next;
 8000f76:	6828      	ldr	r0, [r5, #0]
 8000f78:	f884 8020 	strb.w	r8, [r4, #32]
  pqp->next       = p->next;
 8000f7c:	6803      	ldr	r3, [r0, #0]
  chSysSwitch(currp, otp);
 8000f7e:	4621      	mov	r1, r4
  pqp->next->prev = pqp;
 8000f80:	605d      	str	r5, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8000f82:	f880 6020 	strb.w	r6, [r0, #32]
  pqp->next       = p->next;
 8000f86:	602b      	str	r3, [r5, #0]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 8000f88:	61a8      	str	r0, [r5, #24]
  chSysSwitch(currp, otp);
 8000f8a:	f7ff f959 	bl	8000240 <_port_switch>
    if (chVTIsArmedI(&vt)) {
 8000f8e:	9b04      	ldr	r3, [sp, #16]
 8000f90:	b113      	cbz	r3, 8000f98 <_ZL11CanTxThreadPv+0x78>
      chVTDoResetI(&vt);
 8000f92:	a801      	add	r0, sp, #4
 8000f94:	f7ff fa74 	bl	8000480 <chVTDoResetI>
  return currp->u.rdymsg;
 8000f98:	69ab      	ldr	r3, [r5, #24]
    if (msg != MSG_OK) {
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d0d2      	beq.n	8000f46 <_ZL11CanTxThreadPv+0x26>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f383 8811 	msr	BASEPRI, r3
 8000fa6:	f38a 8811 	msr	BASEPRI, sl
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8000faa:	69ac      	ldr	r4, [r5, #24]
 8000fac:	2114      	movs	r1, #20
 8000fae:	a801      	add	r0, sp, #4
  vtp->func    = vtfunc;
 8000fb0:	e9cd 7404 	strd	r7, r4, [sp, #16]
  vt_enqueue(vtlp, vtp, delay);
 8000fb4:	f7ff fb9c 	bl	80006f0 <vt_enqueue.constprop.0>
  otp->state = newstate;
 8000fb8:	2308      	movs	r3, #8
  ch_priority_queue_t *p = pqp->next;
 8000fba:	6828      	ldr	r0, [r5, #0]
 8000fbc:	f884 3020 	strb.w	r3, [r4, #32]
  pqp->next       = p->next;
 8000fc0:	6803      	ldr	r3, [r0, #0]
  chSysSwitch(currp, otp);
 8000fc2:	4621      	mov	r1, r4
  pqp->next->prev = pqp;
 8000fc4:	605d      	str	r5, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8000fc6:	f880 6020 	strb.w	r6, [r0, #32]
  pqp->next       = p->next;
 8000fca:	602b      	str	r3, [r5, #0]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 8000fcc:	61a8      	str	r0, [r5, #24]
  chSysSwitch(currp, otp);
 8000fce:	f7ff f937 	bl	8000240 <_port_switch>
    if (chVTIsArmedI(&vt)) {
 8000fd2:	9b04      	ldr	r3, [sp, #16]
 8000fd4:	b113      	cbz	r3, 8000fdc <_ZL11CanTxThreadPv+0xbc>
      chVTDoResetI(&vt);
 8000fd6:	a801      	add	r0, sp, #4
 8000fd8:	f7ff fa52 	bl	8000480 <chVTDoResetI>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f383 8811 	msr	BASEPRI, r3
}
 8000fe2:	e7ac      	b.n	8000f3e <_ZL11CanTxThreadPv+0x1e>
  tmbp->TDTR = ctfp->DLC;
 8000fe4:	2200      	movs	r2, #0
    tmbp = &canp->can->sTxMailBox[(canp->can->TSR & CAN_TSR_CODE) >> 24];
 8000fe6:	6899      	ldr	r1, [r3, #8]
 8000fe8:	f3c1 6101 	ubfx	r1, r1, #24, #2
 8000fec:	eb03 1301 	add.w	r3, r3, r1, lsl #4
  tmbp->TDTR = ctfp->DLC;
 8000ff0:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
  tmbp->TDLR = ctfp->data32[0];
 8000ff4:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
  tmbp->TDHR = ctfp->data32[1];
 8000ff8:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
  tmbp->TIR  = tir | CAN_TI0R_TXRQ;
 8000ffc:	f8c3 6180 	str.w	r6, [r3, #384]	@ 0x180
 8001000:	f382 8811 	msr	BASEPRI, r2
  return MSG_OK;
 8001004:	e7cf      	b.n	8000fa6 <_ZL11CanTxThreadPv+0x86>
 8001006:	bf00      	nop
 8001008:	20001210 	.word	0x20001210
 800100c:	08002990 	.word	0x08002990
 8001010:	200010ec 	.word	0x200010ec
 8001014:	08000531 	.word	0x08000531
	...

08001020 <_ZL9AdcThreadPv>:
#include "hal.h"
#include "adc.h"

static THD_WORKING_AREA(waAdcThread, 128);
static THD_FUNCTION(AdcThread, p)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	f04f 0820 	mov.w	r8, #32
  otp->state = newstate;
 8001026:	2708      	movs	r7, #8
 8001028:	4c12      	ldr	r4, [pc, #72]	@ (8001074 <_ZL9AdcThreadPv+0x54>)
 800102a:	4a13      	ldr	r2, [pc, #76]	@ (8001078 <_ZL9AdcThreadPv+0x58>)
 800102c:	69a3      	ldr	r3, [r4, #24]
 800102e:	4e13      	ldr	r6, [pc, #76]	@ (800107c <_ZL9AdcThreadPv+0x5c>)
 8001030:	b086      	sub	sp, #24
 8001032:	619a      	str	r2, [r3, #24]
 8001034:	f388 8811 	msr	BASEPRI, r8
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8001038:	69a5      	ldr	r5, [r4, #24]
 800103a:	2114      	movs	r1, #20
 800103c:	a801      	add	r0, sp, #4
  vtp->func    = vtfunc;
 800103e:	e9cd 6504 	strd	r6, r5, [sp, #16]
  vt_enqueue(vtlp, vtp, delay);
 8001042:	f7ff fb55 	bl	80006f0 <vt_enqueue.constprop.0>
  currp->state = CH_STATE_CURRENT;
 8001046:	2201      	movs	r2, #1
  ch_priority_queue_t *p = pqp->next;
 8001048:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 800104a:	f885 7020 	strb.w	r7, [r5, #32]
  pqp->next       = p->next;
 800104e:	6803      	ldr	r3, [r0, #0]
  chSysSwitch(currp, otp);
 8001050:	4629      	mov	r1, r5
  pqp->next->prev = pqp;
 8001052:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8001054:	f880 2020 	strb.w	r2, [r0, #32]
  pqp->next       = p->next;
 8001058:	6023      	str	r3, [r4, #0]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 800105a:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 800105c:	f7ff f8f0 	bl	8000240 <_port_switch>
    if (chVTIsArmedI(&vt)) {
 8001060:	9b04      	ldr	r3, [sp, #16]
 8001062:	b113      	cbz	r3, 800106a <_ZL9AdcThreadPv+0x4a>
      chVTDoResetI(&vt);
 8001064:	a801      	add	r0, sp, #4
 8001066:	f7ff fa0b 	bl	8000480 <chVTDoResetI>
 800106a:	2300      	movs	r3, #0
 800106c:	f383 8811 	msr	BASEPRI, r3
 8001070:	e7e0      	b.n	8001034 <_ZL9AdcThreadPv+0x14>
 8001072:	bf00      	nop
 8001074:	20001210 	.word	0x20001210
 8001078:	080029a0 	.word	0x080029a0
 800107c:	08000531 	.word	0x08000531

08001080 <_ZL9OutThreadPv>:
#include "hal.h"
#include "adc.h"

static THD_WORKING_AREA(waOutThread, 128);
static THD_FUNCTION(OutThread, p)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	f04f 0820 	mov.w	r8, #32
  otp->state = newstate;
 8001086:	2708      	movs	r7, #8
 8001088:	4c12      	ldr	r4, [pc, #72]	@ (80010d4 <_ZL9OutThreadPv+0x54>)
 800108a:	4a13      	ldr	r2, [pc, #76]	@ (80010d8 <_ZL9OutThreadPv+0x58>)
 800108c:	69a3      	ldr	r3, [r4, #24]
 800108e:	4e13      	ldr	r6, [pc, #76]	@ (80010dc <_ZL9OutThreadPv+0x5c>)
 8001090:	b086      	sub	sp, #24
 8001092:	619a      	str	r2, [r3, #24]
 8001094:	f388 8811 	msr	BASEPRI, r8
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8001098:	69a5      	ldr	r5, [r4, #24]
 800109a:	2114      	movs	r1, #20
 800109c:	a801      	add	r0, sp, #4
  vtp->func    = vtfunc;
 800109e:	e9cd 6504 	strd	r6, r5, [sp, #16]
  vt_enqueue(vtlp, vtp, delay);
 80010a2:	f7ff fb25 	bl	80006f0 <vt_enqueue.constprop.0>
  currp->state = CH_STATE_CURRENT;
 80010a6:	2201      	movs	r2, #1
  ch_priority_queue_t *p = pqp->next;
 80010a8:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 80010aa:	f885 7020 	strb.w	r7, [r5, #32]
  pqp->next       = p->next;
 80010ae:	6803      	ldr	r3, [r0, #0]
  chSysSwitch(currp, otp);
 80010b0:	4629      	mov	r1, r5
  pqp->next->prev = pqp;
 80010b2:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 80010b4:	f880 2020 	strb.w	r2, [r0, #32]
  pqp->next       = p->next;
 80010b8:	6023      	str	r3, [r4, #0]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 80010ba:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 80010bc:	f7ff f8c0 	bl	8000240 <_port_switch>
    if (chVTIsArmedI(&vt)) {
 80010c0:	9b04      	ldr	r3, [sp, #16]
 80010c2:	b113      	cbz	r3, 80010ca <_ZL9OutThreadPv+0x4a>
      chVTDoResetI(&vt);
 80010c4:	a801      	add	r0, sp, #4
 80010c6:	f7ff f9db 	bl	8000480 <chVTDoResetI>
 80010ca:	2300      	movs	r3, #0
 80010cc:	f383 8811 	msr	BASEPRI, r3
 80010d0:	e7e0      	b.n	8001094 <_ZL9OutThreadPv+0x14>
 80010d2:	bf00      	nop
 80010d4:	20001210 	.word	0x20001210
 80010d8:	080029ac 	.word	0x080029ac
 80010dc:	08000531 	.word	0x08000531

080010e0 <_ZL13DigitalThreadPv>:
#include "hal.h"
#include "adc.h"

static THD_WORKING_AREA(waDigitalThread, 128);
static THD_FUNCTION(DigitalThread, p)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	f04f 0820 	mov.w	r8, #32
  otp->state = newstate;
 80010e6:	2708      	movs	r7, #8
 80010e8:	4c12      	ldr	r4, [pc, #72]	@ (8001134 <_ZL13DigitalThreadPv+0x54>)
 80010ea:	4a13      	ldr	r2, [pc, #76]	@ (8001138 <_ZL13DigitalThreadPv+0x58>)
 80010ec:	69a3      	ldr	r3, [r4, #24]
 80010ee:	4e13      	ldr	r6, [pc, #76]	@ (800113c <_ZL13DigitalThreadPv+0x5c>)
 80010f0:	b086      	sub	sp, #24
 80010f2:	619a      	str	r2, [r3, #24]
 80010f4:	f388 8811 	msr	BASEPRI, r8
    chVTDoSetI(&vt, timeout, wakeup, currp);
 80010f8:	69a5      	ldr	r5, [r4, #24]
 80010fa:	2114      	movs	r1, #20
 80010fc:	a801      	add	r0, sp, #4
  vtp->func    = vtfunc;
 80010fe:	e9cd 6504 	strd	r6, r5, [sp, #16]
  vt_enqueue(vtlp, vtp, delay);
 8001102:	f7ff faf5 	bl	80006f0 <vt_enqueue.constprop.0>
  currp->state = CH_STATE_CURRENT;
 8001106:	2201      	movs	r2, #1
  ch_priority_queue_t *p = pqp->next;
 8001108:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 800110a:	f885 7020 	strb.w	r7, [r5, #32]
  pqp->next       = p->next;
 800110e:	6803      	ldr	r3, [r0, #0]
  chSysSwitch(currp, otp);
 8001110:	4629      	mov	r1, r5
  pqp->next->prev = pqp;
 8001112:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8001114:	f880 2020 	strb.w	r2, [r0, #32]
  pqp->next       = p->next;
 8001118:	6023      	str	r3, [r4, #0]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 800111a:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 800111c:	f7ff f890 	bl	8000240 <_port_switch>
    if (chVTIsArmedI(&vt)) {
 8001120:	9b04      	ldr	r3, [sp, #16]
 8001122:	b113      	cbz	r3, 800112a <_ZL13DigitalThreadPv+0x4a>
      chVTDoResetI(&vt);
 8001124:	a801      	add	r0, sp, #4
 8001126:	f7ff f9ab 	bl	8000480 <chVTDoResetI>
 800112a:	2300      	movs	r3, #0
 800112c:	f383 8811 	msr	BASEPRI, r3
 8001130:	e7e0      	b.n	80010f4 <_ZL13DigitalThreadPv+0x14>
 8001132:	bf00      	nop
 8001134:	20001210 	.word	0x20001210
 8001138:	080029b8 	.word	0x080029b8
 800113c:	08000531 	.word	0x08000531

08001140 <__core_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
	...

08001150 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
	...

08001160 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8001160:	e7fe      	b.n	8001160 <__default_exit>
 8001162:	bf00      	nop
	...

08001170 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001170:	b570      	push	{r4, r5, r6, lr}
 8001172:	4d13      	ldr	r5, [pc, #76]	@ (80011c0 <__init_ram_areas+0x50>)
 8001174:	f105 0480 	add.w	r4, r5, #128	@ 0x80
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001178:	e955 0103 	ldrd	r0, r1, [r5, #-12]
 800117c:	4288      	cmp	r0, r1
    uint32_t *tp = rap->init_text_area;
 800117e:	f855 2c10 	ldr.w	r2, [r5, #-16]
    while (p < rap->clear_area) {
 8001182:	d20d      	bcs.n	80011a0 <__init_ram_areas+0x30>
    uint32_t *p = rap->init_area;
 8001184:	4603      	mov	r3, r0
 8001186:	3a04      	subs	r2, #4
      *p = *tp;
 8001188:	f852 6f04 	ldr.w	r6, [r2, #4]!
 800118c:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->clear_area) {
 8001190:	428b      	cmp	r3, r1
 8001192:	d3f9      	bcc.n	8001188 <__init_ram_areas+0x18>
 8001194:	1e4b      	subs	r3, r1, #1
 8001196:	1a1b      	subs	r3, r3, r0
 8001198:	f023 0303 	bic.w	r3, r3, #3
 800119c:	3304      	adds	r3, #4
 800119e:	4418      	add	r0, r3
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 80011a0:	f855 2c04 	ldr.w	r2, [r5, #-4]
 80011a4:	4282      	cmp	r2, r0
 80011a6:	d907      	bls.n	80011b8 <__init_ram_areas+0x48>
      *p = 0;
 80011a8:	3a01      	subs	r2, #1
 80011aa:	1a12      	subs	r2, r2, r0
 80011ac:	f022 0203 	bic.w	r2, r2, #3
 80011b0:	2100      	movs	r1, #0
 80011b2:	3204      	adds	r2, #4
 80011b4:	f7ff f85a 	bl	800026c <memset>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80011b8:	3510      	adds	r5, #16
 80011ba:	42a5      	cmp	r5, r4
 80011bc:	d1dc      	bne.n	8001178 <__init_ram_areas+0x8>
     for self-modifying code.*/
  SCB_CleanDCache();
  SCB_InvalidateICache();
#endif
#endif
}
 80011be:	bd70      	pop	{r4, r5, r6, pc}
 80011c0:	08002aa4 	.word	0x08002aa4
	...

080011d0 <Vector58>:
OSAL_IRQ_HANDLER(Vector58) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80011d0:	4a18      	ldr	r2, [pc, #96]	@ (8001234 <Vector58+0x64>)
 80011d2:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 80011d4:	6813      	ldr	r3, [r2, #0]
 80011d6:	400b      	ands	r3, r1
 80011d8:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 80011dc:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 0);
 80011de:	b33b      	cbz	r3, 8001230 <Vector58+0x60>
OSAL_IRQ_HANDLER(Vector58) {
 80011e0:	b570      	push	{r4, r5, r6, lr}
  exti_serve_irq(pr, 0);
 80011e2:	4d15      	ldr	r5, [pc, #84]	@ (8001238 <Vector58+0x68>)
 80011e4:	68ab      	ldr	r3, [r5, #8]
 80011e6:	b10b      	cbz	r3, 80011ec <Vector58+0x1c>
 80011e8:	68e8      	ldr	r0, [r5, #12]
 80011ea:	4798      	blx	r3
 80011ec:	2320      	movs	r3, #32
 80011ee:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 80011f2:	682c      	ldr	r4, [r5, #0]
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (ch_queue_notempty(&tqp->queue)) {
 80011f4:	42ac      	cmp	r4, r5
 80011f6:	d014      	beq.n	8001222 <Vector58+0x52>

  tp = (thread_t *)ch_queue_fifo_remove(&tqp->queue);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80011f8:	2600      	movs	r6, #0
 80011fa:	4620      	mov	r0, r4
  qp->next       = p->next;
 80011fc:	6824      	ldr	r4, [r4, #0]
  } while (pqp->prio >= p->prio);
 80011fe:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <Vector58+0x6c>)
 8001200:	6881      	ldr	r1, [r0, #8]
  qp->next->prev = qp;
 8001202:	6065      	str	r5, [r4, #4]
  qp->next       = p->next;
 8001204:	602c      	str	r4, [r5, #0]
 8001206:	6246      	str	r6, [r0, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8001208:	f880 6020 	strb.w	r6, [r0, #32]
    pqp = pqp->next;
 800120c:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	428a      	cmp	r2, r1
 8001212:	d2fb      	bcs.n	800120c <Vector58+0x3c>
  p->prev       = pqp->prev;
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	42ac      	cmp	r4, r5
 8001218:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800121c:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 800121e:	6058      	str	r0, [r3, #4]
 8001220:	d1eb      	bne.n	80011fa <Vector58+0x2a>
 8001222:	2300      	movs	r3, #0
 8001224:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8001228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 800122c:	f7ff b8f0 	b.w	8000410 <_port_irq_epilogue>
 8001230:	f7ff b8ee 	b.w	8000410 <_port_irq_epilogue>
 8001234:	40010400 	.word	0x40010400
 8001238:	2000110c 	.word	0x2000110c
 800123c:	20001210 	.word	0x20001210

08001240 <Vector5C>:
OSAL_IRQ_HANDLER(Vector5C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001240:	4a18      	ldr	r2, [pc, #96]	@ (80012a4 <Vector5C+0x64>)
OSAL_IRQ_HANDLER(Vector5C) {
 8001242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pr = EXTI->PR;
 8001244:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 8001246:	6813      	ldr	r3, [r2, #0]
 8001248:	400b      	ands	r3, r1
 800124a:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 800124e:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 1);
 8001250:	b31b      	cbz	r3, 800129a <Vector5C+0x5a>
 8001252:	4f15      	ldr	r7, [pc, #84]	@ (80012a8 <Vector5C+0x68>)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	b10b      	cbz	r3, 800125c <Vector5C+0x1c>
 8001258:	69f8      	ldr	r0, [r7, #28]
 800125a:	4798      	blx	r3
 800125c:	2320      	movs	r3, #32
 800125e:	f383 8811 	msr	BASEPRI, r3
 8001262:	4d12      	ldr	r5, [pc, #72]	@ (80012ac <Vector5C+0x6c>)
  return (bool)(qp->next != qp);
 8001264:	693c      	ldr	r4, [r7, #16]
 8001266:	42ac      	cmp	r4, r5
 8001268:	d014      	beq.n	8001294 <Vector5C+0x54>
 800126a:	2600      	movs	r6, #0
 800126c:	4620      	mov	r0, r4
  qp->next       = p->next;
 800126e:	6824      	ldr	r4, [r4, #0]
  } while (pqp->prio >= p->prio);
 8001270:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <Vector5C+0x70>)
 8001272:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 8001274:	613c      	str	r4, [r7, #16]
  qp->next->prev = qp;
 8001276:	6065      	str	r5, [r4, #4]
 8001278:	6246      	str	r6, [r0, #36]	@ 0x24
 800127a:	f880 6020 	strb.w	r6, [r0, #32]
    pqp = pqp->next;
 800127e:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	428a      	cmp	r2, r1
 8001284:	d2fb      	bcs.n	800127e <Vector5C+0x3e>
  p->prev       = pqp->prev;
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	42ac      	cmp	r4, r5
 800128a:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800128e:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001290:	6058      	str	r0, [r3, #4]
 8001292:	d1eb      	bne.n	800126c <Vector5C+0x2c>
 8001294:	2300      	movs	r3, #0
 8001296:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800129a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 800129e:	f7ff b8b7 	b.w	8000410 <_port_irq_epilogue>
 80012a2:	bf00      	nop
 80012a4:	40010400 	.word	0x40010400
 80012a8:	2000110c 	.word	0x2000110c
 80012ac:	2000111c 	.word	0x2000111c
 80012b0:	20001210 	.word	0x20001210
	...

080012c0 <Vector60>:
OSAL_IRQ_HANDLER(Vector60) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80012c0:	4a18      	ldr	r2, [pc, #96]	@ (8001324 <Vector60+0x64>)
OSAL_IRQ_HANDLER(Vector60) {
 80012c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pr = EXTI->PR;
 80012c4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 80012c6:	6813      	ldr	r3, [r2, #0]
 80012c8:	400b      	ands	r3, r1
 80012ca:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 80012ce:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 2);
 80012d0:	b31b      	cbz	r3, 800131a <Vector60+0x5a>
 80012d2:	4f15      	ldr	r7, [pc, #84]	@ (8001328 <Vector60+0x68>)
 80012d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d6:	b10b      	cbz	r3, 80012dc <Vector60+0x1c>
 80012d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80012da:	4798      	blx	r3
 80012dc:	2320      	movs	r3, #32
 80012de:	f383 8811 	msr	BASEPRI, r3
 80012e2:	4d12      	ldr	r5, [pc, #72]	@ (800132c <Vector60+0x6c>)
  return (bool)(qp->next != qp);
 80012e4:	6a3c      	ldr	r4, [r7, #32]
 80012e6:	42ac      	cmp	r4, r5
 80012e8:	d014      	beq.n	8001314 <Vector60+0x54>
 80012ea:	2600      	movs	r6, #0
 80012ec:	4620      	mov	r0, r4
  qp->next       = p->next;
 80012ee:	6824      	ldr	r4, [r4, #0]
  } while (pqp->prio >= p->prio);
 80012f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <Vector60+0x70>)
 80012f2:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 80012f4:	623c      	str	r4, [r7, #32]
  qp->next->prev = qp;
 80012f6:	6065      	str	r5, [r4, #4]
 80012f8:	6246      	str	r6, [r0, #36]	@ 0x24
 80012fa:	f880 6020 	strb.w	r6, [r0, #32]
    pqp = pqp->next;
 80012fe:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	428a      	cmp	r2, r1
 8001304:	d2fb      	bcs.n	80012fe <Vector60+0x3e>
  p->prev       = pqp->prev;
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	42ac      	cmp	r4, r5
 800130a:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800130e:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001310:	6058      	str	r0, [r3, #4]
 8001312:	d1eb      	bne.n	80012ec <Vector60+0x2c>
 8001314:	2300      	movs	r3, #0
 8001316:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800131a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 800131e:	f7ff b877 	b.w	8000410 <_port_irq_epilogue>
 8001322:	bf00      	nop
 8001324:	40010400 	.word	0x40010400
 8001328:	2000110c 	.word	0x2000110c
 800132c:	2000112c 	.word	0x2000112c
 8001330:	20001210 	.word	0x20001210
	...

08001340 <Vector64>:
OSAL_IRQ_HANDLER(Vector64) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001340:	4a18      	ldr	r2, [pc, #96]	@ (80013a4 <Vector64+0x64>)
OSAL_IRQ_HANDLER(Vector64) {
 8001342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pr = EXTI->PR;
 8001344:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 8001346:	6813      	ldr	r3, [r2, #0]
 8001348:	400b      	ands	r3, r1
 800134a:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 800134e:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 3);
 8001350:	b31b      	cbz	r3, 800139a <Vector64+0x5a>
 8001352:	4f15      	ldr	r7, [pc, #84]	@ (80013a8 <Vector64+0x68>)
 8001354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001356:	b10b      	cbz	r3, 800135c <Vector64+0x1c>
 8001358:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800135a:	4798      	blx	r3
 800135c:	2320      	movs	r3, #32
 800135e:	f383 8811 	msr	BASEPRI, r3
 8001362:	4d12      	ldr	r5, [pc, #72]	@ (80013ac <Vector64+0x6c>)
  return (bool)(qp->next != qp);
 8001364:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8001366:	42ac      	cmp	r4, r5
 8001368:	d014      	beq.n	8001394 <Vector64+0x54>
 800136a:	2600      	movs	r6, #0
 800136c:	4620      	mov	r0, r4
  qp->next       = p->next;
 800136e:	6824      	ldr	r4, [r4, #0]
  } while (pqp->prio >= p->prio);
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <Vector64+0x70>)
 8001372:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 8001374:	633c      	str	r4, [r7, #48]	@ 0x30
  qp->next->prev = qp;
 8001376:	6065      	str	r5, [r4, #4]
 8001378:	6246      	str	r6, [r0, #36]	@ 0x24
 800137a:	f880 6020 	strb.w	r6, [r0, #32]
    pqp = pqp->next;
 800137e:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	428a      	cmp	r2, r1
 8001384:	d2fb      	bcs.n	800137e <Vector64+0x3e>
  p->prev       = pqp->prev;
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	42ac      	cmp	r4, r5
 800138a:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800138e:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001390:	6058      	str	r0, [r3, #4]
 8001392:	d1eb      	bne.n	800136c <Vector64+0x2c>
 8001394:	2300      	movs	r3, #0
 8001396:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800139a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 800139e:	f7ff b837 	b.w	8000410 <_port_irq_epilogue>
 80013a2:	bf00      	nop
 80013a4:	40010400 	.word	0x40010400
 80013a8:	2000110c 	.word	0x2000110c
 80013ac:	2000113c 	.word	0x2000113c
 80013b0:	20001210 	.word	0x20001210
	...

080013c0 <Vector68>:
OSAL_IRQ_HANDLER(Vector68) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80013c0:	4a18      	ldr	r2, [pc, #96]	@ (8001424 <Vector68+0x64>)
OSAL_IRQ_HANDLER(Vector68) {
 80013c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pr = EXTI->PR;
 80013c4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 80013c6:	6813      	ldr	r3, [r2, #0]
 80013c8:	400b      	ands	r3, r1
 80013ca:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 80013ce:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 4);
 80013d0:	b31b      	cbz	r3, 800141a <Vector68+0x5a>
 80013d2:	4f15      	ldr	r7, [pc, #84]	@ (8001428 <Vector68+0x68>)
 80013d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80013d6:	b10b      	cbz	r3, 80013dc <Vector68+0x1c>
 80013d8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80013da:	4798      	blx	r3
 80013dc:	2320      	movs	r3, #32
 80013de:	f383 8811 	msr	BASEPRI, r3
 80013e2:	4d12      	ldr	r5, [pc, #72]	@ (800142c <Vector68+0x6c>)
  return (bool)(qp->next != qp);
 80013e4:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 80013e6:	42ac      	cmp	r4, r5
 80013e8:	d014      	beq.n	8001414 <Vector68+0x54>
 80013ea:	2600      	movs	r6, #0
 80013ec:	4620      	mov	r0, r4
  qp->next       = p->next;
 80013ee:	6824      	ldr	r4, [r4, #0]
  } while (pqp->prio >= p->prio);
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <Vector68+0x70>)
 80013f2:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 80013f4:	643c      	str	r4, [r7, #64]	@ 0x40
  qp->next->prev = qp;
 80013f6:	6065      	str	r5, [r4, #4]
 80013f8:	6246      	str	r6, [r0, #36]	@ 0x24
 80013fa:	f880 6020 	strb.w	r6, [r0, #32]
    pqp = pqp->next;
 80013fe:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	428a      	cmp	r2, r1
 8001404:	d2fb      	bcs.n	80013fe <Vector68+0x3e>
  p->prev       = pqp->prev;
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	42ac      	cmp	r4, r5
 800140a:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800140e:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001410:	6058      	str	r0, [r3, #4]
 8001412:	d1eb      	bne.n	80013ec <Vector68+0x2c>
 8001414:	2300      	movs	r3, #0
 8001416:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800141a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 800141e:	f7fe bff7 	b.w	8000410 <_port_irq_epilogue>
 8001422:	bf00      	nop
 8001424:	40010400 	.word	0x40010400
 8001428:	2000110c 	.word	0x2000110c
 800142c:	2000114c 	.word	0x2000114c
 8001430:	20001210 	.word	0x20001210
	...

08001440 <Vector9C>:
/**
 * @brief   EXTI[5]...EXTI[9] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector9C) {
 8001440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001442:	4b6c      	ldr	r3, [pc, #432]	@ (80015f4 <Vector9C+0x1b4>)
 8001444:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 8001446:	681d      	ldr	r5, [r3, #0]
 8001448:	4015      	ands	r5, r2
 800144a:	f405 7278 	and.w	r2, r5, #992	@ 0x3e0
                     (1U << 9));
  EXTI->PR = pr;

  exti_serve_irq(pr, 5);
 800144e:	06ac      	lsls	r4, r5, #26
  EXTI->PR = pr;
 8001450:	615a      	str	r2, [r3, #20]
  exti_serve_irq(pr, 5);
 8001452:	d525      	bpl.n	80014a0 <Vector9C+0x60>
 8001454:	4c68      	ldr	r4, [pc, #416]	@ (80015f8 <Vector9C+0x1b8>)
 8001456:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001458:	b10b      	cbz	r3, 800145e <Vector9C+0x1e>
 800145a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800145c:	4798      	blx	r3
 800145e:	2320      	movs	r3, #32
 8001460:	f383 8811 	msr	BASEPRI, r3
 8001464:	4f65      	ldr	r7, [pc, #404]	@ (80015fc <Vector9C+0x1bc>)
  return (bool)(qp->next != qp);
 8001466:	6d26      	ldr	r6, [r4, #80]	@ 0x50
 8001468:	42be      	cmp	r6, r7
 800146a:	d016      	beq.n	800149a <Vector9C+0x5a>
 800146c:	f04f 0c00 	mov.w	ip, #0
 8001470:	4630      	mov	r0, r6
  qp->next       = p->next;
 8001472:	6836      	ldr	r6, [r6, #0]
  } while (pqp->prio >= p->prio);
 8001474:	4b62      	ldr	r3, [pc, #392]	@ (8001600 <Vector9C+0x1c0>)
 8001476:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 8001478:	6526      	str	r6, [r4, #80]	@ 0x50
  qp->next->prev = qp;
 800147a:	6077      	str	r7, [r6, #4]
 800147c:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
 8001480:	f880 c020 	strb.w	ip, [r0, #32]
    pqp = pqp->next;
 8001484:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	428a      	cmp	r2, r1
 800148a:	d2fb      	bcs.n	8001484 <Vector9C+0x44>
  p->prev       = pqp->prev;
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	42be      	cmp	r6, r7
 8001490:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8001494:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001496:	6058      	str	r0, [r3, #4]
 8001498:	d1ea      	bne.n	8001470 <Vector9C+0x30>
 800149a:	2300      	movs	r3, #0
 800149c:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 6);
 80014a0:	0668      	lsls	r0, r5, #25
 80014a2:	d525      	bpl.n	80014f0 <Vector9C+0xb0>
 80014a4:	4c54      	ldr	r4, [pc, #336]	@ (80015f8 <Vector9C+0x1b8>)
 80014a6:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80014a8:	b10b      	cbz	r3, 80014ae <Vector9C+0x6e>
 80014aa:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80014ac:	4798      	blx	r3
 80014ae:	2320      	movs	r3, #32
 80014b0:	f383 8811 	msr	BASEPRI, r3
 80014b4:	4f53      	ldr	r7, [pc, #332]	@ (8001604 <Vector9C+0x1c4>)
  return (bool)(qp->next != qp);
 80014b6:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 80014b8:	42be      	cmp	r6, r7
 80014ba:	d016      	beq.n	80014ea <Vector9C+0xaa>
 80014bc:	f04f 0c00 	mov.w	ip, #0
 80014c0:	4630      	mov	r0, r6
  qp->next       = p->next;
 80014c2:	6836      	ldr	r6, [r6, #0]
  } while (pqp->prio >= p->prio);
 80014c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001600 <Vector9C+0x1c0>)
 80014c6:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 80014c8:	6626      	str	r6, [r4, #96]	@ 0x60
  qp->next->prev = qp;
 80014ca:	6077      	str	r7, [r6, #4]
 80014cc:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
 80014d0:	f880 c020 	strb.w	ip, [r0, #32]
    pqp = pqp->next;
 80014d4:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	428a      	cmp	r2, r1
 80014da:	d2fb      	bcs.n	80014d4 <Vector9C+0x94>
  p->prev       = pqp->prev;
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	42be      	cmp	r6, r7
 80014e0:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 80014e4:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 80014e6:	6058      	str	r0, [r3, #4]
 80014e8:	d1ea      	bne.n	80014c0 <Vector9C+0x80>
 80014ea:	2300      	movs	r3, #0
 80014ec:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 7);
 80014f0:	0629      	lsls	r1, r5, #24
 80014f2:	d525      	bpl.n	8001540 <Vector9C+0x100>
 80014f4:	4c40      	ldr	r4, [pc, #256]	@ (80015f8 <Vector9C+0x1b8>)
 80014f6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80014f8:	b10b      	cbz	r3, 80014fe <Vector9C+0xbe>
 80014fa:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80014fc:	4798      	blx	r3
 80014fe:	2320      	movs	r3, #32
 8001500:	f383 8811 	msr	BASEPRI, r3
 8001504:	4f40      	ldr	r7, [pc, #256]	@ (8001608 <Vector9C+0x1c8>)
  return (bool)(qp->next != qp);
 8001506:	6f26      	ldr	r6, [r4, #112]	@ 0x70
 8001508:	42be      	cmp	r6, r7
 800150a:	d016      	beq.n	800153a <Vector9C+0xfa>
 800150c:	f04f 0c00 	mov.w	ip, #0
 8001510:	4630      	mov	r0, r6
  qp->next       = p->next;
 8001512:	6836      	ldr	r6, [r6, #0]
  } while (pqp->prio >= p->prio);
 8001514:	4b3a      	ldr	r3, [pc, #232]	@ (8001600 <Vector9C+0x1c0>)
 8001516:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 8001518:	6726      	str	r6, [r4, #112]	@ 0x70
  qp->next->prev = qp;
 800151a:	6077      	str	r7, [r6, #4]
 800151c:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
 8001520:	f880 c020 	strb.w	ip, [r0, #32]
    pqp = pqp->next;
 8001524:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	428a      	cmp	r2, r1
 800152a:	d2fb      	bcs.n	8001524 <Vector9C+0xe4>
  p->prev       = pqp->prev;
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	42be      	cmp	r6, r7
 8001530:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8001534:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001536:	6058      	str	r0, [r3, #4]
 8001538:	d1ea      	bne.n	8001510 <Vector9C+0xd0>
 800153a:	2300      	movs	r3, #0
 800153c:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 8);
 8001540:	05ea      	lsls	r2, r5, #23
 8001542:	d529      	bpl.n	8001598 <Vector9C+0x158>
 8001544:	4c2c      	ldr	r4, [pc, #176]	@ (80015f8 <Vector9C+0x1b8>)
 8001546:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 800154a:	b113      	cbz	r3, 8001552 <Vector9C+0x112>
 800154c:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8001550:	4798      	blx	r3
 8001552:	2320      	movs	r3, #32
 8001554:	f383 8811 	msr	BASEPRI, r3
 8001558:	4f2c      	ldr	r7, [pc, #176]	@ (800160c <Vector9C+0x1cc>)
  return (bool)(qp->next != qp);
 800155a:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800155e:	42be      	cmp	r6, r7
 8001560:	d017      	beq.n	8001592 <Vector9C+0x152>
 8001562:	f04f 0c00 	mov.w	ip, #0
 8001566:	4630      	mov	r0, r6
  qp->next       = p->next;
 8001568:	6836      	ldr	r6, [r6, #0]
  } while (pqp->prio >= p->prio);
 800156a:	4b25      	ldr	r3, [pc, #148]	@ (8001600 <Vector9C+0x1c0>)
 800156c:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 800156e:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
  qp->next->prev = qp;
 8001572:	6077      	str	r7, [r6, #4]
 8001574:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
 8001578:	f880 c020 	strb.w	ip, [r0, #32]
    pqp = pqp->next;
 800157c:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	428a      	cmp	r2, r1
 8001582:	d2fb      	bcs.n	800157c <Vector9C+0x13c>
  p->prev       = pqp->prev;
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	42be      	cmp	r6, r7
 8001588:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800158c:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 800158e:	6058      	str	r0, [r3, #4]
 8001590:	d1e9      	bne.n	8001566 <Vector9C+0x126>
 8001592:	2300      	movs	r3, #0
 8001594:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 9);
 8001598:	05ab      	lsls	r3, r5, #22
 800159a:	d527      	bpl.n	80015ec <Vector9C+0x1ac>
 800159c:	4c16      	ldr	r4, [pc, #88]	@ (80015f8 <Vector9C+0x1b8>)
 800159e:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 80015a2:	b113      	cbz	r3, 80015aa <Vector9C+0x16a>
 80015a4:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80015a8:	4798      	blx	r3
 80015aa:	2320      	movs	r3, #32
 80015ac:	f383 8811 	msr	BASEPRI, r3
 80015b0:	4e17      	ldr	r6, [pc, #92]	@ (8001610 <Vector9C+0x1d0>)
  return (bool)(qp->next != qp);
 80015b2:	f8d4 5090 	ldr.w	r5, [r4, #144]	@ 0x90
 80015b6:	42b5      	cmp	r5, r6
 80015b8:	d015      	beq.n	80015e6 <Vector9C+0x1a6>
 80015ba:	2700      	movs	r7, #0
 80015bc:	4628      	mov	r0, r5
  qp->next       = p->next;
 80015be:	682d      	ldr	r5, [r5, #0]
  } while (pqp->prio >= p->prio);
 80015c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001600 <Vector9C+0x1c0>)
 80015c2:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 80015c4:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
  qp->next->prev = qp;
 80015c8:	606e      	str	r6, [r5, #4]
 80015ca:	6247      	str	r7, [r0, #36]	@ 0x24
 80015cc:	f880 7020 	strb.w	r7, [r0, #32]
    pqp = pqp->next;
 80015d0:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	428a      	cmp	r2, r1
 80015d6:	d2fb      	bcs.n	80015d0 <Vector9C+0x190>
  p->prev       = pqp->prev;
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	42b5      	cmp	r5, r6
 80015dc:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 80015e0:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 80015e2:	6058      	str	r0, [r3, #4]
 80015e4:	d1ea      	bne.n	80015bc <Vector9C+0x17c>
 80015e6:	2300      	movs	r3, #0
 80015e8:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80015ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 80015f0:	f7fe bf0e 	b.w	8000410 <_port_irq_epilogue>
 80015f4:	40010400 	.word	0x40010400
 80015f8:	2000110c 	.word	0x2000110c
 80015fc:	2000115c 	.word	0x2000115c
 8001600:	20001210 	.word	0x20001210
 8001604:	2000116c 	.word	0x2000116c
 8001608:	2000117c 	.word	0x2000117c
 800160c:	2000118c 	.word	0x2000118c
 8001610:	2000119c 	.word	0x2000119c
	...

08001620 <VectorE0>:
/**
 * @brief   EXTI[10]...EXTI[15] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE0) {
 8001620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001622:	4b88      	ldr	r3, [pc, #544]	@ (8001844 <VectorE0+0x224>)
 8001624:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8001626:	681d      	ldr	r5, [r3, #0]
 8001628:	4015      	ands	r5, r2
 800162a:	f405 427c 	and.w	r2, r5, #64512	@ 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;

  exti_serve_irq(pr, 10);
 800162e:	056e      	lsls	r6, r5, #21
  EXTI->PR = pr;
 8001630:	615a      	str	r2, [r3, #20]
  exti_serve_irq(pr, 10);
 8001632:	d529      	bpl.n	8001688 <VectorE0+0x68>
 8001634:	4c84      	ldr	r4, [pc, #528]	@ (8001848 <VectorE0+0x228>)
 8001636:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 800163a:	b113      	cbz	r3, 8001642 <VectorE0+0x22>
 800163c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8001640:	4798      	blx	r3
 8001642:	2320      	movs	r3, #32
 8001644:	f383 8811 	msr	BASEPRI, r3
 8001648:	4f80      	ldr	r7, [pc, #512]	@ (800184c <VectorE0+0x22c>)
  return (bool)(qp->next != qp);
 800164a:	f8d4 60a0 	ldr.w	r6, [r4, #160]	@ 0xa0
 800164e:	42be      	cmp	r6, r7
 8001650:	d017      	beq.n	8001682 <VectorE0+0x62>
 8001652:	f04f 0c00 	mov.w	ip, #0
 8001656:	4630      	mov	r0, r6
  qp->next       = p->next;
 8001658:	6836      	ldr	r6, [r6, #0]
  } while (pqp->prio >= p->prio);
 800165a:	4b7d      	ldr	r3, [pc, #500]	@ (8001850 <VectorE0+0x230>)
 800165c:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 800165e:	f8c4 60a0 	str.w	r6, [r4, #160]	@ 0xa0
  qp->next->prev = qp;
 8001662:	6077      	str	r7, [r6, #4]
 8001664:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
 8001668:	f880 c020 	strb.w	ip, [r0, #32]
    pqp = pqp->next;
 800166c:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	428a      	cmp	r2, r1
 8001672:	d2fb      	bcs.n	800166c <VectorE0+0x4c>
  p->prev       = pqp->prev;
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	42be      	cmp	r6, r7
 8001678:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800167c:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 800167e:	6058      	str	r0, [r3, #4]
 8001680:	d1e9      	bne.n	8001656 <VectorE0+0x36>
 8001682:	2300      	movs	r3, #0
 8001684:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 11);
 8001688:	052c      	lsls	r4, r5, #20
 800168a:	d529      	bpl.n	80016e0 <VectorE0+0xc0>
 800168c:	4c6e      	ldr	r4, [pc, #440]	@ (8001848 <VectorE0+0x228>)
 800168e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 8001692:	b113      	cbz	r3, 800169a <VectorE0+0x7a>
 8001694:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 8001698:	4798      	blx	r3
 800169a:	2320      	movs	r3, #32
 800169c:	f383 8811 	msr	BASEPRI, r3
 80016a0:	4f6c      	ldr	r7, [pc, #432]	@ (8001854 <VectorE0+0x234>)
  return (bool)(qp->next != qp);
 80016a2:	f8d4 60b0 	ldr.w	r6, [r4, #176]	@ 0xb0
 80016a6:	42be      	cmp	r6, r7
 80016a8:	d017      	beq.n	80016da <VectorE0+0xba>
 80016aa:	f04f 0c00 	mov.w	ip, #0
 80016ae:	4630      	mov	r0, r6
  qp->next       = p->next;
 80016b0:	6836      	ldr	r6, [r6, #0]
  } while (pqp->prio >= p->prio);
 80016b2:	4b67      	ldr	r3, [pc, #412]	@ (8001850 <VectorE0+0x230>)
 80016b4:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 80016b6:	f8c4 60b0 	str.w	r6, [r4, #176]	@ 0xb0
  qp->next->prev = qp;
 80016ba:	6077      	str	r7, [r6, #4]
 80016bc:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
 80016c0:	f880 c020 	strb.w	ip, [r0, #32]
    pqp = pqp->next;
 80016c4:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	428a      	cmp	r2, r1
 80016ca:	d2fb      	bcs.n	80016c4 <VectorE0+0xa4>
  p->prev       = pqp->prev;
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	42be      	cmp	r6, r7
 80016d0:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 80016d4:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 80016d6:	6058      	str	r0, [r3, #4]
 80016d8:	d1e9      	bne.n	80016ae <VectorE0+0x8e>
 80016da:	2300      	movs	r3, #0
 80016dc:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 12);
 80016e0:	04e8      	lsls	r0, r5, #19
 80016e2:	d529      	bpl.n	8001738 <VectorE0+0x118>
 80016e4:	4c58      	ldr	r4, [pc, #352]	@ (8001848 <VectorE0+0x228>)
 80016e6:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 80016ea:	b113      	cbz	r3, 80016f2 <VectorE0+0xd2>
 80016ec:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 80016f0:	4798      	blx	r3
 80016f2:	2320      	movs	r3, #32
 80016f4:	f383 8811 	msr	BASEPRI, r3
 80016f8:	4f57      	ldr	r7, [pc, #348]	@ (8001858 <VectorE0+0x238>)
  return (bool)(qp->next != qp);
 80016fa:	f8d4 60c0 	ldr.w	r6, [r4, #192]	@ 0xc0
 80016fe:	42be      	cmp	r6, r7
 8001700:	d017      	beq.n	8001732 <VectorE0+0x112>
 8001702:	f04f 0c00 	mov.w	ip, #0
 8001706:	4630      	mov	r0, r6
  qp->next       = p->next;
 8001708:	6836      	ldr	r6, [r6, #0]
  } while (pqp->prio >= p->prio);
 800170a:	4b51      	ldr	r3, [pc, #324]	@ (8001850 <VectorE0+0x230>)
 800170c:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 800170e:	f8c4 60c0 	str.w	r6, [r4, #192]	@ 0xc0
  qp->next->prev = qp;
 8001712:	6077      	str	r7, [r6, #4]
 8001714:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
 8001718:	f880 c020 	strb.w	ip, [r0, #32]
    pqp = pqp->next;
 800171c:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	428a      	cmp	r2, r1
 8001722:	d2fb      	bcs.n	800171c <VectorE0+0xfc>
  p->prev       = pqp->prev;
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	42be      	cmp	r6, r7
 8001728:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800172c:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 800172e:	6058      	str	r0, [r3, #4]
 8001730:	d1e9      	bne.n	8001706 <VectorE0+0xe6>
 8001732:	2300      	movs	r3, #0
 8001734:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 13);
 8001738:	04a9      	lsls	r1, r5, #18
 800173a:	d529      	bpl.n	8001790 <VectorE0+0x170>
 800173c:	4c42      	ldr	r4, [pc, #264]	@ (8001848 <VectorE0+0x228>)
 800173e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 8001742:	b113      	cbz	r3, 800174a <VectorE0+0x12a>
 8001744:	f8d4 00dc 	ldr.w	r0, [r4, #220]	@ 0xdc
 8001748:	4798      	blx	r3
 800174a:	2320      	movs	r3, #32
 800174c:	f383 8811 	msr	BASEPRI, r3
 8001750:	4f42      	ldr	r7, [pc, #264]	@ (800185c <VectorE0+0x23c>)
  return (bool)(qp->next != qp);
 8001752:	f8d4 60d0 	ldr.w	r6, [r4, #208]	@ 0xd0
 8001756:	42be      	cmp	r6, r7
 8001758:	d017      	beq.n	800178a <VectorE0+0x16a>
 800175a:	f04f 0c00 	mov.w	ip, #0
 800175e:	4630      	mov	r0, r6
  qp->next       = p->next;
 8001760:	6836      	ldr	r6, [r6, #0]
  } while (pqp->prio >= p->prio);
 8001762:	4b3b      	ldr	r3, [pc, #236]	@ (8001850 <VectorE0+0x230>)
 8001764:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 8001766:	f8c4 60d0 	str.w	r6, [r4, #208]	@ 0xd0
  qp->next->prev = qp;
 800176a:	6077      	str	r7, [r6, #4]
 800176c:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
 8001770:	f880 c020 	strb.w	ip, [r0, #32]
    pqp = pqp->next;
 8001774:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	428a      	cmp	r2, r1
 800177a:	d2fb      	bcs.n	8001774 <VectorE0+0x154>
  p->prev       = pqp->prev;
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	42be      	cmp	r6, r7
 8001780:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8001784:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001786:	6058      	str	r0, [r3, #4]
 8001788:	d1e9      	bne.n	800175e <VectorE0+0x13e>
 800178a:	2300      	movs	r3, #0
 800178c:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 14);
 8001790:	046a      	lsls	r2, r5, #17
 8001792:	d529      	bpl.n	80017e8 <VectorE0+0x1c8>
 8001794:	4c2c      	ldr	r4, [pc, #176]	@ (8001848 <VectorE0+0x228>)
 8001796:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 800179a:	b113      	cbz	r3, 80017a2 <VectorE0+0x182>
 800179c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
 80017a0:	4798      	blx	r3
 80017a2:	2320      	movs	r3, #32
 80017a4:	f383 8811 	msr	BASEPRI, r3
 80017a8:	4f2d      	ldr	r7, [pc, #180]	@ (8001860 <VectorE0+0x240>)
  return (bool)(qp->next != qp);
 80017aa:	f8d4 60e0 	ldr.w	r6, [r4, #224]	@ 0xe0
 80017ae:	42be      	cmp	r6, r7
 80017b0:	d017      	beq.n	80017e2 <VectorE0+0x1c2>
 80017b2:	f04f 0c00 	mov.w	ip, #0
 80017b6:	4630      	mov	r0, r6
  qp->next       = p->next;
 80017b8:	6836      	ldr	r6, [r6, #0]
  } while (pqp->prio >= p->prio);
 80017ba:	4b25      	ldr	r3, [pc, #148]	@ (8001850 <VectorE0+0x230>)
 80017bc:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 80017be:	f8c4 60e0 	str.w	r6, [r4, #224]	@ 0xe0
  qp->next->prev = qp;
 80017c2:	6077      	str	r7, [r6, #4]
 80017c4:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
 80017c8:	f880 c020 	strb.w	ip, [r0, #32]
    pqp = pqp->next;
 80017cc:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	428a      	cmp	r2, r1
 80017d2:	d2fb      	bcs.n	80017cc <VectorE0+0x1ac>
  p->prev       = pqp->prev;
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	42be      	cmp	r6, r7
 80017d8:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 80017dc:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 80017de:	6058      	str	r0, [r3, #4]
 80017e0:	d1e9      	bne.n	80017b6 <VectorE0+0x196>
 80017e2:	2300      	movs	r3, #0
 80017e4:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 15);
 80017e8:	042b      	lsls	r3, r5, #16
 80017ea:	d527      	bpl.n	800183c <VectorE0+0x21c>
 80017ec:	4c16      	ldr	r4, [pc, #88]	@ (8001848 <VectorE0+0x228>)
 80017ee:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 80017f2:	b113      	cbz	r3, 80017fa <VectorE0+0x1da>
 80017f4:	f8d4 00fc 	ldr.w	r0, [r4, #252]	@ 0xfc
 80017f8:	4798      	blx	r3
 80017fa:	2320      	movs	r3, #32
 80017fc:	f383 8811 	msr	BASEPRI, r3
 8001800:	4e18      	ldr	r6, [pc, #96]	@ (8001864 <VectorE0+0x244>)
  return (bool)(qp->next != qp);
 8001802:	f8d4 50f0 	ldr.w	r5, [r4, #240]	@ 0xf0
 8001806:	42b5      	cmp	r5, r6
 8001808:	d015      	beq.n	8001836 <VectorE0+0x216>
 800180a:	2700      	movs	r7, #0
 800180c:	4628      	mov	r0, r5
  qp->next       = p->next;
 800180e:	682d      	ldr	r5, [r5, #0]
  } while (pqp->prio >= p->prio);
 8001810:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <VectorE0+0x230>)
 8001812:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 8001814:	f8c4 50f0 	str.w	r5, [r4, #240]	@ 0xf0
  qp->next->prev = qp;
 8001818:	606e      	str	r6, [r5, #4]
 800181a:	6247      	str	r7, [r0, #36]	@ 0x24
 800181c:	f880 7020 	strb.w	r7, [r0, #32]
    pqp = pqp->next;
 8001820:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	428a      	cmp	r2, r1
 8001826:	d2fb      	bcs.n	8001820 <VectorE0+0x200>
  p->prev       = pqp->prev;
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	42b5      	cmp	r5, r6
 800182c:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8001830:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001832:	6058      	str	r0, [r3, #4]
 8001834:	d1ea      	bne.n	800180c <VectorE0+0x1ec>
 8001836:	2300      	movs	r3, #0
 8001838:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800183c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8001840:	f7fe bde6 	b.w	8000410 <_port_irq_epilogue>
 8001844:	40010400 	.word	0x40010400
 8001848:	2000110c 	.word	0x2000110c
 800184c:	200011ac 	.word	0x200011ac
 8001850:	20001210 	.word	0x20001210
 8001854:	200011bc 	.word	0x200011bc
 8001858:	200011cc 	.word	0x200011cc
 800185c:	200011dc 	.word	0x200011dc
 8001860:	200011ec 	.word	0x200011ec
 8001864:	200011fc 	.word	0x200011fc
	...

08001870 <Vector8C>:
  tsr = canp->can->TSR;
 8001870:	f8df c090 	ldr.w	ip, [pc, #144]	@ 8001904 <Vector8C+0x94>
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 8001874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  tsr = canp->can->TSR;
 8001876:	f8dc 2024 	ldr.w	r2, [ip, #36]	@ 0x24
 800187a:	6893      	ldr	r3, [r2, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 800187c:	f013 0101 	ands.w	r1, r3, #1
  canp->can->TSR = tsr;
 8001880:	6093      	str	r3, [r2, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 8001882:	d004      	beq.n	800188e <Vector8C+0x1e>
      flags |= CAN_MAILBOX_TO_MASK(1U) << 16U;
 8001884:	f013 0f0c 	tst.w	r3, #12
 8001888:	bf18      	it	ne
 800188a:	f44f 3180 	movne.w	r1, #65536	@ 0x10000
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
 800188e:	05d8      	lsls	r0, r3, #23
 8001890:	d506      	bpl.n	80018a0 <Vector8C+0x30>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 8001892:	f413 6f40 	tst.w	r3, #3072	@ 0xc00
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
 8001896:	bf14      	ite	ne
 8001898:	f441 3100 	orrne.w	r1, r1, #131072	@ 0x20000
      flags |= CAN_MAILBOX_TO_MASK(2U);
 800189c:	f041 0102 	orreq.w	r1, r1, #2
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
 80018a0:	03da      	lsls	r2, r3, #15
 80018a2:	d506      	bpl.n	80018b2 <Vector8C+0x42>
    if ((tsr & (CAN_TSR_ALST2 | CAN_TSR_TERR2)) != 0U) {
 80018a4:	f413 2f40 	tst.w	r3, #786432	@ 0xc0000
      flags |= CAN_MAILBOX_TO_MASK(3U) << 16U;
 80018a8:	bf14      	ite	ne
 80018aa:	f441 2180 	orrne.w	r1, r1, #262144	@ 0x40000
      flags |= CAN_MAILBOX_TO_MASK(3U);
 80018ae:	f041 0104 	orreq.w	r1, r1, #4
 80018b2:	2320      	movs	r3, #32
 80018b4:	f383 8811 	msr	BASEPRI, r3
 80018b8:	4e13      	ldr	r6, [pc, #76]	@ (8001908 <Vector8C+0x98>)
  return (bool)(qp->next != qp);
 80018ba:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80018be:	42b5      	cmp	r5, r6
 80018c0:	d015      	beq.n	80018ee <Vector8C+0x7e>
 80018c2:	2700      	movs	r7, #0
 80018c4:	462c      	mov	r4, r5
  qp->next       = p->next;
 80018c6:	682d      	ldr	r5, [r5, #0]
  } while (pqp->prio >= p->prio);
 80018c8:	4b10      	ldr	r3, [pc, #64]	@ (800190c <Vector8C+0x9c>)
 80018ca:	68a0      	ldr	r0, [r4, #8]
  qp->next       = p->next;
 80018cc:	f8cc 5008 	str.w	r5, [ip, #8]
  qp->next->prev = qp;
 80018d0:	606e      	str	r6, [r5, #4]
 80018d2:	6267      	str	r7, [r4, #36]	@ 0x24
 80018d4:	f884 7020 	strb.w	r7, [r4, #32]
    pqp = pqp->next;
 80018d8:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	4282      	cmp	r2, r0
 80018de:	d2fb      	bcs.n	80018d8 <Vector8C+0x68>
  p->prev       = pqp->prev;
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	42b5      	cmp	r5, r6
 80018e4:	e9c4 3200 	strd	r3, r2, [r4]
  p->prev->next = p;
 80018e8:	6014      	str	r4, [r2, #0]
  pqp->prev     = p;
 80018ea:	605c      	str	r4, [r3, #4]
 80018ec:	d1ea      	bne.n	80018c4 <Vector8C+0x54>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80018ee:	4808      	ldr	r0, [pc, #32]	@ (8001910 <Vector8C+0xa0>)
 80018f0:	f7fe fe86 	bl	8000600 <chEvtBroadcastFlagsI>
 80018f4:	2300      	movs	r3, #0
 80018f6:	f383 8811 	msr	BASEPRI, r3
}
 80018fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 80018fe:	f7fe bd87 	b.w	8000410 <_port_irq_epilogue>
 8001902:	bf00      	nop
 8001904:	200010e4 	.word	0x200010e4
 8001908:	200010ec 	.word	0x200010ec
 800190c:	20001210 	.word	0x20001210
 8001910:	20001100 	.word	0x20001100
	...

08001920 <Vector90>:
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 8001920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  rf0r = canp->can->RF0R;
 8001924:	4f24      	ldr	r7, [pc, #144]	@ (80019b8 <Vector90+0x98>)
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	f8d3 800c 	ldr.w	r8, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 800192c:	f018 0f03 	tst.w	r8, #3
 8001930:	d106      	bne.n	8001940 <Vector90+0x20>
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 8001932:	f018 0f10 	tst.w	r8, #16
 8001936:	d12e      	bne.n	8001996 <Vector90+0x76>
}
 8001938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 800193c:	f7fe bd68 	b.w	8000410 <_port_irq_epilogue>
    canp->can->IER &= ~CAN_IER_FMPIE0;
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	2120      	movs	r1, #32
 8001944:	f022 0202 	bic.w	r2, r2, #2
 8001948:	615a      	str	r2, [r3, #20]
 800194a:	f381 8811 	msr	BASEPRI, r1
  return (bool)(qp->next != qp);
 800194e:	463d      	mov	r5, r7
 8001950:	f855 4f10 	ldr.w	r4, [r5, #16]!
 8001954:	42ac      	cmp	r4, r5
 8001956:	d014      	beq.n	8001982 <Vector90+0x62>
 8001958:	2600      	movs	r6, #0
 800195a:	4620      	mov	r0, r4
  qp->next       = p->next;
 800195c:	6824      	ldr	r4, [r4, #0]
  } while (pqp->prio >= p->prio);
 800195e:	4b17      	ldr	r3, [pc, #92]	@ (80019bc <Vector90+0x9c>)
 8001960:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 8001962:	613c      	str	r4, [r7, #16]
  qp->next->prev = qp;
 8001964:	6065      	str	r5, [r4, #4]
 8001966:	6246      	str	r6, [r0, #36]	@ 0x24
 8001968:	f880 6020 	strb.w	r6, [r0, #32]
    pqp = pqp->next;
 800196c:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	428a      	cmp	r2, r1
 8001972:	d2fb      	bcs.n	800196c <Vector90+0x4c>
  p->prev       = pqp->prev;
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	42ac      	cmp	r4, r5
 8001978:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800197c:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 800197e:	6058      	str	r0, [r3, #4]
 8001980:	d1eb      	bne.n	800195a <Vector90+0x3a>
 8001982:	2101      	movs	r1, #1
 8001984:	480e      	ldr	r0, [pc, #56]	@ (80019c0 <Vector90+0xa0>)
 8001986:	f7fe fe3b 	bl	8000600 <chEvtBroadcastFlagsI>
 800198a:	2300      	movs	r3, #0
 800198c:	f383 8811 	msr	BASEPRI, r3
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 8001990:	f018 0f10 	tst.w	r8, #16
 8001994:	d0d0      	beq.n	8001938 <Vector90+0x18>
    canp->can->RF0R = CAN_RF0R_FOVR0;
 8001996:	2110      	movs	r1, #16
 8001998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800199a:	2320      	movs	r3, #32
 800199c:	60d1      	str	r1, [r2, #12]
 800199e:	f383 8811 	msr	BASEPRI, r3
 80019a2:	4808      	ldr	r0, [pc, #32]	@ (80019c4 <Vector90+0xa4>)
 80019a4:	f7fe fe2c 	bl	8000600 <chEvtBroadcastFlagsI>
 80019a8:	2300      	movs	r3, #0
 80019aa:	f383 8811 	msr	BASEPRI, r3
}
 80019ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 80019b2:	f7fe bd2d 	b.w	8000410 <_port_irq_epilogue>
 80019b6:	bf00      	nop
 80019b8:	200010e4 	.word	0x200010e4
 80019bc:	20001210 	.word	0x20001210
 80019c0:	200010fc 	.word	0x200010fc
 80019c4:	20001104 	.word	0x20001104
	...

080019d0 <Vector94>:
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 80019d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  rf1r = canp->can->RF1R;
 80019d4:	4f24      	ldr	r7, [pc, #144]	@ (8001a68 <Vector94+0x98>)
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	f8d3 8010 	ldr.w	r8, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 80019dc:	f018 0f03 	tst.w	r8, #3
 80019e0:	d106      	bne.n	80019f0 <Vector94+0x20>
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 80019e2:	f018 0f10 	tst.w	r8, #16
 80019e6:	d12e      	bne.n	8001a46 <Vector94+0x76>
}
 80019e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 80019ec:	f7fe bd10 	b.w	8000410 <_port_irq_epilogue>
    canp->can->IER &= ~CAN_IER_FMPIE1;
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	2120      	movs	r1, #32
 80019f4:	f022 0210 	bic.w	r2, r2, #16
 80019f8:	615a      	str	r2, [r3, #20]
 80019fa:	f381 8811 	msr	BASEPRI, r1
  return (bool)(qp->next != qp);
 80019fe:	463d      	mov	r5, r7
 8001a00:	f855 4f10 	ldr.w	r4, [r5, #16]!
 8001a04:	42ac      	cmp	r4, r5
 8001a06:	d014      	beq.n	8001a32 <Vector94+0x62>
 8001a08:	2600      	movs	r6, #0
 8001a0a:	4620      	mov	r0, r4
  qp->next       = p->next;
 8001a0c:	6824      	ldr	r4, [r4, #0]
  } while (pqp->prio >= p->prio);
 8001a0e:	4b17      	ldr	r3, [pc, #92]	@ (8001a6c <Vector94+0x9c>)
 8001a10:	6881      	ldr	r1, [r0, #8]
  qp->next       = p->next;
 8001a12:	613c      	str	r4, [r7, #16]
  qp->next->prev = qp;
 8001a14:	6065      	str	r5, [r4, #4]
 8001a16:	6246      	str	r6, [r0, #36]	@ 0x24
 8001a18:	f880 6020 	strb.w	r6, [r0, #32]
    pqp = pqp->next;
 8001a1c:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	428a      	cmp	r2, r1
 8001a22:	d2fb      	bcs.n	8001a1c <Vector94+0x4c>
  p->prev       = pqp->prev;
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	42ac      	cmp	r4, r5
 8001a28:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8001a2c:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001a2e:	6058      	str	r0, [r3, #4]
 8001a30:	d1eb      	bne.n	8001a0a <Vector94+0x3a>
 8001a32:	2102      	movs	r1, #2
 8001a34:	480e      	ldr	r0, [pc, #56]	@ (8001a70 <Vector94+0xa0>)
 8001a36:	f7fe fde3 	bl	8000600 <chEvtBroadcastFlagsI>
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f383 8811 	msr	BASEPRI, r3
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 8001a40:	f018 0f10 	tst.w	r8, #16
 8001a44:	d0d0      	beq.n	80019e8 <Vector94+0x18>
    canp->can->RF1R = CAN_RF1R_FOVR1;
 8001a46:	2110      	movs	r1, #16
 8001a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a4a:	2320      	movs	r3, #32
 8001a4c:	6111      	str	r1, [r2, #16]
 8001a4e:	f383 8811 	msr	BASEPRI, r3
 8001a52:	4808      	ldr	r0, [pc, #32]	@ (8001a74 <Vector94+0xa4>)
 8001a54:	f7fe fdd4 	bl	8000600 <chEvtBroadcastFlagsI>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f383 8811 	msr	BASEPRI, r3
}
 8001a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 8001a62:	f7fe bcd5 	b.w	8000410 <_port_irq_epilogue>
 8001a66:	bf00      	nop
 8001a68:	200010e4 	.word	0x200010e4
 8001a6c:	20001210 	.word	0x20001210
 8001a70:	200010fc 	.word	0x200010fc
 8001a74:	20001104 	.word	0x20001104
	...

08001a80 <Vector98>:
  msr = canp->can->MSR;
 8001a80:	4818      	ldr	r0, [pc, #96]	@ (8001ae4 <Vector98+0x64>)
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 8001a82:	b508      	push	{r3, lr}
  msr = canp->can->MSR;
 8001a84:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001a86:	685a      	ldr	r2, [r3, #4]
  canp->can->MSR = msr;
 8001a88:	605a      	str	r2, [r3, #4]
  if (msr & CAN_MSR_ERRI) {
 8001a8a:	0752      	lsls	r2, r2, #29
 8001a8c:	d40a      	bmi.n	8001aa4 <Vector98+0x24>
 8001a8e:	2320      	movs	r3, #32
 8001a90:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001a94:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <Vector98+0x68>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8001a9c:	d10e      	bne.n	8001abc <Vector98+0x3c>
 8001a9e:	f383 8811 	msr	BASEPRI, r3
}
 8001aa2:	bd08      	pop	{r3, pc}
    uint32_t esr = canp->can->ESR;
 8001aa4:	6999      	ldr	r1, [r3, #24]
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	f383 8811 	msr	BASEPRI, r3
 8001aac:	4418      	add	r0, r3
 8001aae:	0409      	lsls	r1, r1, #16
 8001ab0:	f7fe fda6 	bl	8000600 <chEvtBroadcastFlagsI>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f383 8811 	msr	BASEPRI, r3
}
 8001aba:	e7e8      	b.n	8001a8e <Vector98+0xe>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001abc:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8001ac0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8001ac4:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001ac6:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001ac8:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8001acc:	4a07      	ldr	r2, [pc, #28]	@ (8001aec <Vector98+0x6c>)
 8001ace:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 8001ad0:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8001ad2:	6889      	ldr	r1, [r1, #8]
 8001ad4:	6892      	ldr	r2, [r2, #8]
 8001ad6:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8001ad8:	bf8c      	ite	hi
 8001ada:	4a05      	ldrhi	r2, [pc, #20]	@ (8001af0 <Vector98+0x70>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8001adc:	4a05      	ldrls	r2, [pc, #20]	@ (8001af4 <Vector98+0x74>)
 8001ade:	619a      	str	r2, [r3, #24]
}
 8001ae0:	bd08      	pop	{r3, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200010e4 	.word	0x200010e4
 8001ae8:	e000ed00 	.word	0xe000ed00
 8001aec:	20001210 	.word	0x20001210
 8001af0:	08000263 	.word	0x08000263
 8001af4:	08000266 	.word	0x08000266
	...

08001b00 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8001b00:	b508      	push	{r3, lr}
 */
void dmaServeInterrupt(const stm32_dma_stream_t *dmastp) {
  uint32_t flags;
  uint32_t selfindex = (uint32_t)dmastp->selfindex;

  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <Vector6C+0x58>)
 8001b04:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001b06:	689a      	ldr	r2, [r3, #8]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001b08:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001b0c:	4211      	tst	r1, r2
 8001b0e:	d005      	beq.n	8001b1c <Vector6C+0x1c>
    dmastp->dma->IFCR = flags << dmastp->shift;
    if (dma.streams[selfindex].func) {
 8001b10:	4a12      	ldr	r2, [pc, #72]	@ (8001b5c <Vector6C+0x5c>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001b12:	6059      	str	r1, [r3, #4]
    if (dma.streams[selfindex].func) {
 8001b14:	6893      	ldr	r3, [r2, #8]
 8001b16:	b10b      	cbz	r3, 8001b1c <Vector6C+0x1c>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001b18:	68d0      	ldr	r0, [r2, #12]
 8001b1a:	4798      	blx	r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001b22:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <Vector6C+0x60>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8001b2a:	d102      	bne.n	8001b32 <Vector6C+0x32>
 8001b2c:	f383 8811 	msr	BASEPRI, r3
}
 8001b30:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001b32:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8001b36:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8001b3a:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001b3c:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001b3e:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8001b42:	4a08      	ldr	r2, [pc, #32]	@ (8001b64 <Vector6C+0x64>)
 8001b44:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 8001b46:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8001b48:	6889      	ldr	r1, [r1, #8]
 8001b4a:	6892      	ldr	r2, [r2, #8]
 8001b4c:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8001b4e:	bf8c      	ite	hi
 8001b50:	4a05      	ldrhi	r2, [pc, #20]	@ (8001b68 <Vector6C+0x68>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8001b52:	4a06      	ldrls	r2, [pc, #24]	@ (8001b6c <Vector6C+0x6c>)
 8001b54:	619a      	str	r2, [r3, #24]
 8001b56:	bd08      	pop	{r3, pc}
 8001b58:	40020000 	.word	0x40020000
 8001b5c:	200010a4 	.word	0x200010a4
 8001b60:	e000ed00 	.word	0xe000ed00
 8001b64:	20001210 	.word	0x20001210
 8001b68:	08000263 	.word	0x08000263
 8001b6c:	08000266 	.word	0x08000266

08001b70 <Vector70>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001b70:	4b16      	ldr	r3, [pc, #88]	@ (8001bcc <Vector70+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8001b72:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001b74:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001b76:	69da      	ldr	r2, [r3, #28]
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001b78:	0909      	lsrs	r1, r1, #4
 8001b7a:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001b7e:	4211      	tst	r1, r2
 8001b80:	d006      	beq.n	8001b90 <Vector70+0x20>
    if (dma.streams[selfindex].func) {
 8001b82:	4813      	ldr	r0, [pc, #76]	@ (8001bd0 <Vector70+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001b84:	010a      	lsls	r2, r1, #4
    if (dma.streams[selfindex].func) {
 8001b86:	6904      	ldr	r4, [r0, #16]
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001b88:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 8001b8a:	b10c      	cbz	r4, 8001b90 <Vector70+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001b8c:	6940      	ldr	r0, [r0, #20]
 8001b8e:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001b90:	2320      	movs	r3, #32
 8001b92:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001b96:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <Vector70+0x64>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8001b9e:	d102      	bne.n	8001ba6 <Vector70+0x36>
 8001ba0:	f383 8811 	msr	BASEPRI, r3
}
 8001ba4:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001ba6:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8001baa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8001bae:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001bb0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001bb2:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8001bb6:	4a08      	ldr	r2, [pc, #32]	@ (8001bd8 <Vector70+0x68>)
 8001bb8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 8001bba:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8001bbc:	6889      	ldr	r1, [r1, #8]
 8001bbe:	6892      	ldr	r2, [r2, #8]
 8001bc0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8001bc2:	bf8c      	ite	hi
 8001bc4:	4a05      	ldrhi	r2, [pc, #20]	@ (8001bdc <Vector70+0x6c>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8001bc6:	4a06      	ldrls	r2, [pc, #24]	@ (8001be0 <Vector70+0x70>)
 8001bc8:	619a      	str	r2, [r3, #24]
 8001bca:	bd10      	pop	{r4, pc}
 8001bcc:	40020000 	.word	0x40020000
 8001bd0:	200010a4 	.word	0x200010a4
 8001bd4:	e000ed00 	.word	0xe000ed00
 8001bd8:	20001210 	.word	0x20001210
 8001bdc:	08000263 	.word	0x08000263
 8001be0:	08000266 	.word	0x08000266
	...

08001bf0 <Vector74>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001bf0:	4b16      	ldr	r3, [pc, #88]	@ (8001c4c <Vector74+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8001bf2:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001bf4:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001bf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001bf8:	0a09      	lsrs	r1, r1, #8
 8001bfa:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001bfe:	4211      	tst	r1, r2
 8001c00:	d006      	beq.n	8001c10 <Vector74+0x20>
    if (dma.streams[selfindex].func) {
 8001c02:	4813      	ldr	r0, [pc, #76]	@ (8001c50 <Vector74+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001c04:	020a      	lsls	r2, r1, #8
    if (dma.streams[selfindex].func) {
 8001c06:	6984      	ldr	r4, [r0, #24]
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001c08:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 8001c0a:	b10c      	cbz	r4, 8001c10 <Vector74+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001c0c:	69c0      	ldr	r0, [r0, #28]
 8001c0e:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001c10:	2320      	movs	r3, #32
 8001c12:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001c16:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <Vector74+0x64>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8001c1e:	d102      	bne.n	8001c26 <Vector74+0x36>
 8001c20:	f383 8811 	msr	BASEPRI, r3
}
 8001c24:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001c26:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8001c2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8001c2e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001c30:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001c32:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8001c36:	4a08      	ldr	r2, [pc, #32]	@ (8001c58 <Vector74+0x68>)
 8001c38:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 8001c3a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8001c3c:	6889      	ldr	r1, [r1, #8]
 8001c3e:	6892      	ldr	r2, [r2, #8]
 8001c40:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8001c42:	bf8c      	ite	hi
 8001c44:	4a05      	ldrhi	r2, [pc, #20]	@ (8001c5c <Vector74+0x6c>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8001c46:	4a06      	ldrls	r2, [pc, #24]	@ (8001c60 <Vector74+0x70>)
 8001c48:	619a      	str	r2, [r3, #24]
 8001c4a:	bd10      	pop	{r4, pc}
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	200010a4 	.word	0x200010a4
 8001c54:	e000ed00 	.word	0xe000ed00
 8001c58:	20001210 	.word	0x20001210
 8001c5c:	08000263 	.word	0x08000263
 8001c60:	08000266 	.word	0x08000266
	...

08001c70 <Vector78>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001c70:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <Vector78+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8001c72:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001c74:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001c76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001c78:	0b09      	lsrs	r1, r1, #12
 8001c7a:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001c7e:	4211      	tst	r1, r2
 8001c80:	d006      	beq.n	8001c90 <Vector78+0x20>
    if (dma.streams[selfindex].func) {
 8001c82:	4813      	ldr	r0, [pc, #76]	@ (8001cd0 <Vector78+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001c84:	030a      	lsls	r2, r1, #12
    if (dma.streams[selfindex].func) {
 8001c86:	6a04      	ldr	r4, [r0, #32]
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001c88:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 8001c8a:	b10c      	cbz	r4, 8001c90 <Vector78+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001c8c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8001c8e:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001c90:	2320      	movs	r3, #32
 8001c92:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001c96:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <Vector78+0x64>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8001c9e:	d102      	bne.n	8001ca6 <Vector78+0x36>
 8001ca0:	f383 8811 	msr	BASEPRI, r3
}
 8001ca4:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001ca6:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8001caa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8001cae:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001cb0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001cb2:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8001cb6:	4a08      	ldr	r2, [pc, #32]	@ (8001cd8 <Vector78+0x68>)
 8001cb8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 8001cba:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8001cbc:	6889      	ldr	r1, [r1, #8]
 8001cbe:	6892      	ldr	r2, [r2, #8]
 8001cc0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8001cc2:	bf8c      	ite	hi
 8001cc4:	4a05      	ldrhi	r2, [pc, #20]	@ (8001cdc <Vector78+0x6c>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8001cc6:	4a06      	ldrls	r2, [pc, #24]	@ (8001ce0 <Vector78+0x70>)
 8001cc8:	619a      	str	r2, [r3, #24]
 8001cca:	bd10      	pop	{r4, pc}
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	200010a4 	.word	0x200010a4
 8001cd4:	e000ed00 	.word	0xe000ed00
 8001cd8:	20001210 	.word	0x20001210
 8001cdc:	08000263 	.word	0x08000263
 8001ce0:	08000266 	.word	0x08000266
	...

08001cf0 <Vector7C>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001cf0:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <Vector7C+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8001cf2:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001cf4:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001cf6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001cf8:	0c09      	lsrs	r1, r1, #16
 8001cfa:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001cfe:	4211      	tst	r1, r2
 8001d00:	d006      	beq.n	8001d10 <Vector7C+0x20>
    if (dma.streams[selfindex].func) {
 8001d02:	4813      	ldr	r0, [pc, #76]	@ (8001d50 <Vector7C+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001d04:	040a      	lsls	r2, r1, #16
    if (dma.streams[selfindex].func) {
 8001d06:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001d08:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 8001d0a:	b10c      	cbz	r4, 8001d10 <Vector7C+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001d0c:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8001d0e:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001d10:	2320      	movs	r3, #32
 8001d12:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001d16:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <Vector7C+0x64>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8001d1e:	d102      	bne.n	8001d26 <Vector7C+0x36>
 8001d20:	f383 8811 	msr	BASEPRI, r3
}
 8001d24:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001d26:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8001d2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8001d2e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001d30:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001d32:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8001d36:	4a08      	ldr	r2, [pc, #32]	@ (8001d58 <Vector7C+0x68>)
 8001d38:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 8001d3a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8001d3c:	6889      	ldr	r1, [r1, #8]
 8001d3e:	6892      	ldr	r2, [r2, #8]
 8001d40:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8001d42:	bf8c      	ite	hi
 8001d44:	4a05      	ldrhi	r2, [pc, #20]	@ (8001d5c <Vector7C+0x6c>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8001d46:	4a06      	ldrls	r2, [pc, #24]	@ (8001d60 <Vector7C+0x70>)
 8001d48:	619a      	str	r2, [r3, #24]
 8001d4a:	bd10      	pop	{r4, pc}
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	200010a4 	.word	0x200010a4
 8001d54:	e000ed00 	.word	0xe000ed00
 8001d58:	20001210 	.word	0x20001210
 8001d5c:	08000263 	.word	0x08000263
 8001d60:	08000266 	.word	0x08000266
	...

08001d70 <Vector80>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001d70:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <Vector80+0x5c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8001d72:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001d74:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001d76:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001d78:	0d09      	lsrs	r1, r1, #20
 8001d7a:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001d7e:	4211      	tst	r1, r2
 8001d80:	d006      	beq.n	8001d90 <Vector80+0x20>
    if (dma.streams[selfindex].func) {
 8001d82:	4813      	ldr	r0, [pc, #76]	@ (8001dd0 <Vector80+0x60>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001d84:	050a      	lsls	r2, r1, #20
    if (dma.streams[selfindex].func) {
 8001d86:	6b04      	ldr	r4, [r0, #48]	@ 0x30
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001d88:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 8001d8a:	b10c      	cbz	r4, 8001d90 <Vector80+0x20>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001d8c:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8001d8e:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001d90:	2320      	movs	r3, #32
 8001d92:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001d96:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <Vector80+0x64>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8001d9e:	d102      	bne.n	8001da6 <Vector80+0x36>
 8001da0:	f383 8811 	msr	BASEPRI, r3
}
 8001da4:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001da6:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8001daa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8001dae:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001db0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001db2:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8001db6:	4a08      	ldr	r2, [pc, #32]	@ (8001dd8 <Vector80+0x68>)
 8001db8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 8001dba:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8001dbc:	6889      	ldr	r1, [r1, #8]
 8001dbe:	6892      	ldr	r2, [r2, #8]
 8001dc0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8001dc2:	bf8c      	ite	hi
 8001dc4:	4a05      	ldrhi	r2, [pc, #20]	@ (8001ddc <Vector80+0x6c>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8001dc6:	4a06      	ldrls	r2, [pc, #24]	@ (8001de0 <Vector80+0x70>)
 8001dc8:	619a      	str	r2, [r3, #24]
 8001dca:	bd10      	pop	{r4, pc}
 8001dcc:	40020000 	.word	0x40020000
 8001dd0:	200010a4 	.word	0x200010a4
 8001dd4:	e000ed00 	.word	0xe000ed00
 8001dd8:	20001210 	.word	0x20001210
 8001ddc:	08000263 	.word	0x08000263
 8001de0:	08000266 	.word	0x08000266
	...

08001df0 <Vector84>:
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001df0:	4b17      	ldr	r3, [pc, #92]	@ (8001e50 <Vector84+0x60>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8001df2:	b510      	push	{r4, lr}
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001df4:	6819      	ldr	r1, [r3, #0]
  if (flags & dmastp->channel->CCR) {
 8001df6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  flags = (dmastp->dma->ISR >> dmastp->shift) & STM32_DMA_ISR_MASK;
 8001dfa:	0e09      	lsrs	r1, r1, #24
 8001dfc:	f001 010e 	and.w	r1, r1, #14
  if (flags & dmastp->channel->CCR) {
 8001e00:	4211      	tst	r1, r2
 8001e02:	d006      	beq.n	8001e12 <Vector84+0x22>
    if (dma.streams[selfindex].func) {
 8001e04:	4813      	ldr	r0, [pc, #76]	@ (8001e54 <Vector84+0x64>)
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001e06:	060a      	lsls	r2, r1, #24
    if (dma.streams[selfindex].func) {
 8001e08:	6b84      	ldr	r4, [r0, #56]	@ 0x38
    dmastp->dma->IFCR = flags << dmastp->shift;
 8001e0a:	605a      	str	r2, [r3, #4]
    if (dma.streams[selfindex].func) {
 8001e0c:	b10c      	cbz	r4, 8001e12 <Vector84+0x22>
      dma.streams[selfindex].func(dma.streams[selfindex].param, flags);
 8001e0e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8001e10:	47a0      	blx	r4
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001e12:	2320      	movs	r3, #32
 8001e14:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001e18:	4b0f      	ldr	r3, [pc, #60]	@ (8001e58 <Vector84+0x68>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 8001e20:	d102      	bne.n	8001e28 <Vector84+0x38>
 8001e22:	f383 8811 	msr	BASEPRI, r3
}
 8001e26:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001e28:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 8001e2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 8001e30:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8001e32:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001e34:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8001e38:	4a08      	ldr	r2, [pc, #32]	@ (8001e5c <Vector84+0x6c>)
 8001e3a:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 8001e3c:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8001e3e:	6889      	ldr	r1, [r1, #8]
 8001e40:	6892      	ldr	r2, [r2, #8]
 8001e42:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8001e44:	bf8c      	ite	hi
 8001e46:	4a06      	ldrhi	r2, [pc, #24]	@ (8001e60 <Vector84+0x70>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8001e48:	4a06      	ldrls	r2, [pc, #24]	@ (8001e64 <Vector84+0x74>)
 8001e4a:	619a      	str	r2, [r3, #24]
 8001e4c:	bd10      	pop	{r4, pc}
 8001e4e:	bf00      	nop
 8001e50:	40020000 	.word	0x40020000
 8001e54:	200010a4 	.word	0x200010a4
 8001e58:	e000ed00 	.word	0xe000ed00
 8001e5c:	20001210 	.word	0x20001210
 8001e60:	08000263 	.word	0x08000263
 8001e64:	08000266 	.word	0x08000266
	...

08001e70 <VectorB0>:
/**
 * @brief   Interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8001e74:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
 8001e78:	693b      	ldr	r3, [r7, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8001e80:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8001e82:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8001e84:	613a      	str	r2, [r7, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8001e86:	d403      	bmi.n	8001e90 <VectorB0+0x20>
}
 8001e88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 8001e8c:	f7fe bac0 	b.w	8000410 <_port_irq_epilogue>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001e90:	2520      	movs	r5, #32
 8001e92:	f385 8811 	msr	BASEPRI, r5
     than the interval between "now" and "lasttime".*/
  while (true) {
    vtfunc_t fn;

    /* First timer in the delta list.*/
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 8001e96:	4c2f      	ldr	r4, [pc, #188]	@ (8001f54 <VectorB0+0xe4>)
 8001e98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e9a:	69e3      	ldr	r3, [r4, #28]

    /* Delta between current time and last execution time.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8001e9c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	@ 0x28
 8001ea0:	b280      	uxth	r0, r0

    /* Loop break condition.
       Note that the list scan is limited by the delta list header having
       "vtlp->dlist.delta == (sysinterval_t)-1" which is greater than all
       deltas*/
    if (nowdelta < vtp->dlist.delta) {
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	eba0 010c 	sub.w	r1, r0, ip
 8001ea8:	b289      	uxth	r1, r1
 8001eaa:	4291      	cmp	r1, r2
 8001eac:	d34e      	bcc.n	8001f4c <VectorB0+0xdc>
    /* Removing the timer from the list.*/
    (void) vt_dequeue(&vtp->dlist);

    /* Marking the timer as not armed.*/
    fn = vtp->func;
    vtp->func = NULL;
 8001eae:	f04f 0800 	mov.w	r8, #0
 8001eb2:	f104 061c 	add.w	r6, r4, #28
  return systime + (systime_t)interval;
 8001eb6:	4462      	add	r2, ip
  dlp->prev->next = dlp->next;
 8001eb8:	e9d3 1000 	ldrd	r1, r0, [r3]
    vtlp->lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
 8001ebc:	8522      	strh	r2, [r4, #40]	@ 0x28
  dlp->prev->next = dlp->next;
 8001ebe:	6001      	str	r1, [r0, #0]

    /* If the list becomes empty then the alarm is disabled.*/
    if (vt_is_empty(&vtlp->dlist)) {
 8001ec0:	f8d4 c01c 	ldr.w	ip, [r4, #28]
    fn = vtp->func;
 8001ec4:	68da      	ldr	r2, [r3, #12]
    if (vt_is_empty(&vtlp->dlist)) {
 8001ec6:	45b4      	cmp	ip, r6
  dlp->next->prev = dlp->prev;
 8001ec8:	6048      	str	r0, [r1, #4]
    vtp->func = NULL;
 8001eca:	f8c3 800c 	str.w	r8, [r3, #12]
  STM32_ST_TIM->DIER = 0U;
 8001ece:	bf08      	it	eq
 8001ed0:	f8c7 800c 	streq.w	r8, [r7, #12]
 8001ed4:	f388 8811 	msr	BASEPRI, r8

    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();
    fn(vtp->par);
 8001ed8:	6918      	ldr	r0, [r3, #16]
 8001eda:	4790      	blx	r2
 8001edc:	f385 8811 	msr	BASEPRI, r5
  return (systime_t)STM32_ST_TIM->CNT;
 8001ee0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 8001ee2:	69e3      	ldr	r3, [r4, #28]
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8001ee4:	f8b4 c028 	ldrh.w	ip, [r4, #40]	@ 0x28
 8001ee8:	b280      	uxth	r0, r0
    if (nowdelta < vtp->dlist.delta) {
 8001eea:	689a      	ldr	r2, [r3, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8001eec:	eba0 010c 	sub.w	r1, r0, ip
 8001ef0:	b289      	uxth	r1, r1
 8001ef2:	4291      	cmp	r1, r2
 8001ef4:	d2df      	bcs.n	8001eb6 <VectorB0+0x46>
    chSysLockFromISR();
  }

  /* If the list is empty, nothing else to do.*/
  if (vt_is_empty(&vtlp->dlist)) {
 8001ef6:	42b3      	cmp	r3, r6
 8001ef8:	d021      	beq.n	8001f3e <VectorB0+0xce>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
  vtp->dlist.delta -= nowdelta;
 8001efa:	1a52      	subs	r2, r2, r1
  else if (delay > (sysinterval_t)TIME_MAX_SYSTIME) {
 8001efc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001f00:	428a      	cmp	r2, r1
  vtlp->lasttime += nowdelta;
 8001f02:	8520      	strh	r0, [r4, #40]	@ 0x28
  vtp->dlist.delta -= nowdelta;
 8001f04:	609a      	str	r2, [r3, #8]
  else if (delay > (sysinterval_t)TIME_MAX_SYSTIME) {
 8001f06:	bf28      	it	cs
 8001f08:	460a      	movcs	r2, r1
 8001f0a:	2a02      	cmp	r2, #2
 8001f0c:	bf38      	it	cc
 8001f0e:	2202      	movcc	r2, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001f10:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
  return systime + (systime_t)interval;
 8001f14:	1883      	adds	r3, r0, r2
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	6363      	str	r3, [r4, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8001f1a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f1c:	b29b      	uxth	r3, r3
  return (sysinterval_t)((systime_t)(end - start));
 8001f1e:	1a18      	subs	r0, r3, r0
 8001f20:	b280      	uxth	r0, r0
    if (nowdelta < delay) {
 8001f22:	4282      	cmp	r2, r0
 8001f24:	d80b      	bhi.n	8001f3e <VectorB0+0xce>
 8001f26:	2102      	movs	r1, #2
    currdelta += (sysinterval_t)1;
 8001f28:	461a      	mov	r2, r3
 8001f2a:	3101      	adds	r1, #1
  return systime + (systime_t)interval;
 8001f2c:	440b      	add	r3, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	6363      	str	r3, [r4, #52]	@ 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8001f32:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f34:	b29b      	uxth	r3, r3
  return (sysinterval_t)((systime_t)(end - start));
 8001f36:	1a9a      	subs	r2, r3, r2
 8001f38:	b292      	uxth	r2, r2
    if (nowdelta < delay) {
 8001f3a:	428a      	cmp	r2, r1
 8001f3c:	d2f4      	bcs.n	8001f28 <VectorB0+0xb8>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f383 8811 	msr	BASEPRI, r3
}
 8001f44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 8001f48:	f7fe ba62 	b.w	8000410 <_port_irq_epilogue>
 8001f4c:	f104 061c 	add.w	r6, r4, #28
 8001f50:	e7d1      	b.n	8001ef6 <VectorB0+0x86>
 8001f52:	bf00      	nop
 8001f54:	20001210 	.word	0x20001210
	...

08001f60 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8001f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = sdp->usart;
 8001f64:	4c8b      	ldr	r4, [pc, #556]	@ (8002194 <VectorD4+0x234>)
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8001f66:	b083      	sub	sp, #12
  USART_TypeDef *u = sdp->usart;
 8001f68:	f8d4 a074 	ldr.w	sl, [r4, #116]	@ 0x74
  uint16_t cr1 = u->CR1;
 8001f6c:	f8da 900c 	ldr.w	r9, [sl, #12]
  uint16_t sr = u->SR;
 8001f70:	f8da 3000 	ldr.w	r3, [sl]
  if (sr & USART_SR_LBD) {
 8001f74:	05d9      	lsls	r1, r3, #23
  uint16_t sr = u->SR;
 8001f76:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 8001f78:	f100 809d 	bmi.w	80020b6 <VectorD4+0x156>
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001f82:	f015 0f2f 	tst.w	r5, #47	@ 0x2f
 8001f86:	d05e      	beq.n	8002046 <VectorD4+0xe6>
  chEvtBroadcastFlagsI(esp, flags);
 8001f88:	4f83      	ldr	r7, [pc, #524]	@ (8002198 <VectorD4+0x238>)
 8001f8a:	f04f 0800 	mov.w	r8, #0
  if (ch_queue_notempty(&tqp->queue)) {
 8001f8e:	f107 0608 	add.w	r6, r7, #8
 8001f92:	e00b      	b.n	8001fac <VectorD4+0x4c>
    if (sr & USART_SR_RXNE)
 8001f94:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8001f96:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001f9a:	f894 b078 	ldrb.w	fp, [r4, #120]	@ 0x78
    if (sr & USART_SR_RXNE)
 8001f9e:	d420      	bmi.n	8001fe2 <VectorD4+0x82>
    sr = u->SR;
 8001fa0:	f8da 3000 	ldr.w	r3, [sl]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001fa4:	f013 0f2f 	tst.w	r3, #47	@ 0x2f
    sr = u->SR;
 8001fa8:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001faa:	d04c      	beq.n	8002046 <VectorD4+0xe6>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8001fac:	072a      	lsls	r2, r5, #28
 8001fae:	d0f1      	beq.n	8001f94 <VectorD4+0x34>
  if (sr & USART_SR_PE)
 8001fb0:	f345 0100 	sbfx	r1, r5, #0, #1
  if (sr & USART_SR_ORE)
 8001fb4:	f3c5 03c0 	ubfx	r3, r5, #3, #1
  if (sr & USART_SR_PE)
 8001fb8:	f001 0120 	and.w	r1, r1, #32
 8001fbc:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
  if (sr & USART_SR_FE)
 8001fc0:	07ab      	lsls	r3, r5, #30
    sts |= SD_FRAMING_ERROR;
 8001fc2:	bf48      	it	mi
 8001fc4:	f041 0140 	orrmi.w	r1, r1, #64	@ 0x40
  if (sr & USART_SR_NE)
 8001fc8:	0768      	lsls	r0, r5, #29
    sts |= SD_NOISE_ERROR;
 8001fca:	bf48      	it	mi
 8001fcc:	f441 7180 	orrmi.w	r1, r1, #256	@ 0x100
 8001fd0:	4638      	mov	r0, r7
 8001fd2:	f7fe fb15 	bl	8000600 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8001fd6:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8001fd8:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001fdc:	f894 b078 	ldrb.w	fp, [r4, #120]	@ 0x78
    if (sr & USART_SR_RXNE)
 8001fe0:	d5de      	bpl.n	8001fa0 <VectorD4+0x40>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8001fe2:	6962      	ldr	r2, [r4, #20]
 8001fe4:	2a00      	cmp	r2, #0
 8001fe6:	d048      	beq.n	800207a <VectorD4+0x11a>
  if (!iqIsFullI(iqp)) {
 8001fe8:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 8001fec:	428a      	cmp	r2, r1
 8001fee:	d04e      	beq.n	800208e <VectorD4+0x12e>
    iqp->q_counter++;
 8001ff0:	6961      	ldr	r1, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8001ff2:	ea0b 0b03 	and.w	fp, fp, r3
 8001ff6:	3101      	adds	r1, #1
    *iqp->q_wrptr++ = b;
 8001ff8:	1c53      	adds	r3, r2, #1
 8001ffa:	6223      	str	r3, [r4, #32]
    iqp->q_counter++;
 8001ffc:	6161      	str	r1, [r4, #20]
    *iqp->q_wrptr++ = b;
 8001ffe:	f882 b000 	strb.w	fp, [r2]
    if (iqp->q_wrptr >= iqp->q_top) {
 8002002:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002006:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 8002008:	bf28      	it	cs
 800200a:	69a3      	ldrcs	r3, [r4, #24]
  return (bool)(qp->next != qp);
 800200c:	68e1      	ldr	r1, [r4, #12]
 800200e:	bf28      	it	cs
 8002010:	6223      	strcs	r3, [r4, #32]
 8002012:	42b1      	cmp	r1, r6
 8002014:	d0c4      	beq.n	8001fa0 <VectorD4+0x40>
  qp->next       = p->next;
 8002016:	680b      	ldr	r3, [r1, #0]
  } while (pqp->prio >= p->prio);
 8002018:	6888      	ldr	r0, [r1, #8]
  qp->next       = p->next;
 800201a:	60e3      	str	r3, [r4, #12]
  qp->next->prev = qp;
 800201c:	605e      	str	r6, [r3, #4]
  } while (pqp->prio >= p->prio);
 800201e:	4b5f      	ldr	r3, [pc, #380]	@ (800219c <VectorD4+0x23c>)
 8002020:	f8c1 8024 	str.w	r8, [r1, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 8002024:	f881 8020 	strb.w	r8, [r1, #32]
    pqp = pqp->next;
 8002028:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	4282      	cmp	r2, r0
 800202e:	d2fb      	bcs.n	8002028 <VectorD4+0xc8>
  p->prev       = pqp->prev;
 8002030:	685a      	ldr	r2, [r3, #4]
  p->next       = pqp;
 8002032:	600b      	str	r3, [r1, #0]
  p->prev       = pqp->prev;
 8002034:	604a      	str	r2, [r1, #4]
  p->prev->next = p;
 8002036:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8002038:	6059      	str	r1, [r3, #4]
    sr = u->SR;
 800203a:	f8da 3000 	ldr.w	r3, [sl]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800203e:	f013 0f2f 	tst.w	r3, #47	@ 0x2f
    sr = u->SR;
 8002042:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002044:	d1b2      	bne.n	8001fac <VectorD4+0x4c>
 8002046:	2300      	movs	r3, #0
 8002048:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800204c:	f019 0f80 	tst.w	r9, #128	@ 0x80
 8002050:	d001      	beq.n	8002056 <VectorD4+0xf6>
 8002052:	062a      	lsls	r2, r5, #24
 8002054:	d454      	bmi.n	8002100 <VectorD4+0x1a0>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8002056:	f019 0f40 	tst.w	r9, #64	@ 0x40
 800205a:	d001      	beq.n	8002060 <VectorD4+0x100>
 800205c:	066b      	lsls	r3, r5, #25
 800205e:	d41f      	bmi.n	80020a0 <VectorD4+0x140>
 8002060:	2320      	movs	r3, #32
 8002062:	f383 8811 	msr	BASEPRI, r3
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002066:	4b4e      	ldr	r3, [pc, #312]	@ (80021a0 <VectorD4+0x240>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 800206e:	d132      	bne.n	80020d6 <VectorD4+0x176>
 8002070:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
}
 8002074:	b003      	add	sp, #12
 8002076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800207a:	2104      	movs	r1, #4
 800207c:	4846      	ldr	r0, [pc, #280]	@ (8002198 <VectorD4+0x238>)
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	f7fe fabe 	bl	8000600 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 8002084:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 8002088:	428a      	cmp	r2, r1
 800208a:	9b01      	ldr	r3, [sp, #4]
 800208c:	d1b0      	bne.n	8001ff0 <VectorD4+0x90>
 800208e:	6961      	ldr	r1, [r4, #20]
 8002090:	2900      	cmp	r1, #0
 8002092:	d0ad      	beq.n	8001ff0 <VectorD4+0x90>
 8002094:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002098:	483f      	ldr	r0, [pc, #252]	@ (8002198 <VectorD4+0x238>)
 800209a:	f7fe fab1 	bl	8000600 <chEvtBroadcastFlagsI>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
 800209e:	e77f      	b.n	8001fa0 <VectorD4+0x40>
 80020a0:	2320      	movs	r3, #32
 80020a2:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 80020a6:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d056      	beq.n	800215c <VectorD4+0x1fc>
 80020ae:	2300      	movs	r3, #0
 80020b0:	f383 8811 	msr	BASEPRI, r3
}
 80020b4:	e7d4      	b.n	8002060 <VectorD4+0x100>
 80020b6:	2320      	movs	r3, #32
 80020b8:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 80020bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020c0:	1d20      	adds	r0, r4, #4
 80020c2:	f7fe fa9d 	bl	8000600 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 80020c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8ca 2000 	str.w	r2, [sl]
 80020d0:	f383 8811 	msr	BASEPRI, r3
}
 80020d4:	e752      	b.n	8001f7c <VectorD4+0x1c>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80020d6:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 80020da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
    s_psp -= sizeof (struct port_extctx);
 80020de:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80020e0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80020e2:	f383 8809 	msr	PSP, r3
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 80020e6:	4a2d      	ldr	r2, [pc, #180]	@ (800219c <VectorD4+0x23c>)
 80020e8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 80020ea:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 80020ec:	6889      	ldr	r1, [r1, #8]
 80020ee:	6892      	ldr	r2, [r2, #8]
 80020f0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 80020f2:	bf8c      	ite	hi
 80020f4:	4a2b      	ldrhi	r2, [pc, #172]	@ (80021a4 <VectorD4+0x244>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 80020f6:	4a2c      	ldrls	r2, [pc, #176]	@ (80021a8 <VectorD4+0x248>)
 80020f8:	619a      	str	r2, [r3, #24]
}
 80020fa:	b003      	add	sp, #12
 80020fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002100:	2320      	movs	r3, #32
 8002102:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 8002106:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 800210a:	429a      	cmp	r2, r3
 800210c:	d034      	beq.n	8002178 <VectorD4+0x218>
    oqp->q_counter++;
 800210e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002110:	3201      	adds	r2, #1
 8002112:	63a2      	str	r2, [r4, #56]	@ 0x38
    b = *oqp->q_rdptr++;
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	64a2      	str	r2, [r4, #72]	@ 0x48
 8002118:	781e      	ldrb	r6, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 800211a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800211c:	429a      	cmp	r2, r3
 800211e:	d301      	bcc.n	8002124 <VectorD4+0x1c4>
      oqp->q_rdptr = oqp->q_buffer;
 8002120:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002122:	64a3      	str	r3, [r4, #72]	@ 0x48
  return (bool)(qp->next != qp);
 8002124:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002126:	4b21      	ldr	r3, [pc, #132]	@ (80021ac <VectorD4+0x24c>)
 8002128:	4299      	cmp	r1, r3
 800212a:	d011      	beq.n	8002150 <VectorD4+0x1f0>
 800212c:	2200      	movs	r2, #0
  qp->next       = p->next;
 800212e:	6808      	ldr	r0, [r1, #0]
 8002130:	6320      	str	r0, [r4, #48]	@ 0x30
  qp->next->prev = qp;
 8002132:	6043      	str	r3, [r0, #4]
  } while (pqp->prio >= p->prio);
 8002134:	6888      	ldr	r0, [r1, #8]
 8002136:	4b19      	ldr	r3, [pc, #100]	@ (800219c <VectorD4+0x23c>)
 8002138:	624a      	str	r2, [r1, #36]	@ 0x24
  tp->state = CH_STATE_READY;
 800213a:	f881 2020 	strb.w	r2, [r1, #32]
    pqp = pqp->next;
 800213e:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	4282      	cmp	r2, r0
 8002144:	d2fb      	bcs.n	800213e <VectorD4+0x1de>
  p->prev       = pqp->prev;
 8002146:	685a      	ldr	r2, [r3, #4]
  p->next       = pqp;
 8002148:	600b      	str	r3, [r1, #0]
  p->prev       = pqp->prev;
 800214a:	604a      	str	r2, [r1, #4]
  p->prev->next = p;
 800214c:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 800214e:	6059      	str	r1, [r3, #4]
      u->DR = b;
 8002150:	f8ca 6004 	str.w	r6, [sl, #4]
 8002154:	2300      	movs	r3, #0
 8002156:	f383 8811 	msr	BASEPRI, r3
 800215a:	e77c      	b.n	8002056 <VectorD4+0xf6>
    if (oqIsEmptyI(&sdp->oqueue)) {
 800215c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0a5      	beq.n	80020ae <VectorD4+0x14e>
  chEvtBroadcastFlagsI(esp, flags);
 8002162:	2110      	movs	r1, #16
 8002164:	480c      	ldr	r0, [pc, #48]	@ (8002198 <VectorD4+0x238>)
 8002166:	f7fe fa4b 	bl	8000600 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 800216a:	f64f 73bf 	movw	r3, #65471	@ 0xffbf
 800216e:	ea09 0303 	and.w	r3, r9, r3
 8002172:	f8ca 300c 	str.w	r3, [sl, #12]
 8002176:	e79a      	b.n	80020ae <VectorD4+0x14e>
  if (!oqIsEmptyI(oqp)) {
 8002178:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800217a:	2a00      	cmp	r2, #0
 800217c:	d0c7      	beq.n	800210e <VectorD4+0x1ae>
 800217e:	2108      	movs	r1, #8
 8002180:	4805      	ldr	r0, [pc, #20]	@ (8002198 <VectorD4+0x238>)
 8002182:	f7fe fa3d 	bl	8000600 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8002186:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 800218a:	ea09 0303 	and.w	r3, r9, r3
 800218e:	f8ca 300c 	str.w	r3, [sl, #12]
 8002192:	e7df      	b.n	8002154 <VectorD4+0x1f4>
 8002194:	20001028 	.word	0x20001028
 8002198:	2000102c 	.word	0x2000102c
 800219c:	20001210 	.word	0x20001210
 80021a0:	e000ed00 	.word	0xe000ed00
 80021a4:	08000263 	.word	0x08000263
 80021a8:	08000266 	.word	0x08000266
 80021ac:	20001058 	.word	0x20001058

080021b0 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80021b0:	4a17      	ldr	r2, [pc, #92]	@ (8002210 <__early_init+0x60>)
 80021b2:	6813      	ldr	r3, [r2, #0]
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80021ba:	6813      	ldr	r3, [r2, #0]
 80021bc:	0799      	lsls	r1, r3, #30
 80021be:	d5fc      	bpl.n	80021ba <__early_init+0xa>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80021c0:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80021c2:	6813      	ldr	r3, [r2, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80021c4:	4912      	ldr	r1, [pc, #72]	@ (8002210 <__early_init+0x60>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80021c6:	f003 03f9 	and.w	r3, r3, #249	@ 0xf9
 80021ca:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80021cc:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80021ce:	684b      	ldr	r3, [r1, #4]
 80021d0:	f013 0f0c 	tst.w	r3, #12
 80021d4:	d1fb      	bne.n	80021ce <__early_init+0x1e>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 80021d6:	684b      	ldr	r3, [r1, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80021d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002210 <__early_init+0x60>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 80021da:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 80021de:	604b      	str	r3, [r1, #4]
  RCC->CR   |= RCC_CR_PLLON;
 80021e0:	680b      	ldr	r3, [r1, #0]
 80021e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021e6:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80021e8:	6813      	ldr	r3, [r2, #0]
 80021ea:	019b      	lsls	r3, r3, #6
 80021ec:	d5fc      	bpl.n	80021e8 <__early_init+0x38>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80021ee:	2011      	movs	r0, #17
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80021f0:	4908      	ldr	r1, [pc, #32]	@ (8002214 <__early_init+0x64>)
  FLASH->ACR = STM32_FLASHBITS;
 80021f2:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <__early_init+0x68>)
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80021f4:	6051      	str	r1, [r2, #4]
  FLASH->ACR = STM32_FLASHBITS;
 80021f6:	6018      	str	r0, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 80021f8:	6853      	ldr	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80021fa:	4905      	ldr	r1, [pc, #20]	@ (8002210 <__early_init+0x60>)
  RCC->CFGR |= STM32_SW;
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002202:	684b      	ldr	r3, [r1, #4]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b08      	cmp	r3, #8
 800220a:	d1fa      	bne.n	8002202 <__early_init+0x52>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000
 8002214:	00686400 	.word	0x00686400
 8002218:	40022000 	.word	0x40022000
 800221c:	00000000 	.word	0x00000000

08002220 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8002220:	b410      	push	{r4}
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
  currp->state = CH_STATE_CURRENT;
 8002222:	f04f 0c01 	mov.w	ip, #1
  tp->state = CH_STATE_READY;
 8002226:	2400      	movs	r4, #0
  thread_t *otp = currp;
 8002228:	4a0d      	ldr	r2, [pc, #52]	@ (8002260 <chSchDoReschedule+0x40>)
  ch_priority_queue_t *p = pqp->next;
 800222a:	6810      	ldr	r0, [r2, #0]
 800222c:	6991      	ldr	r1, [r2, #24]
  pqp->next       = p->next;
 800222e:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 8002230:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8002232:	f880 c020 	strb.w	ip, [r0, #32]
  tp->state = CH_STATE_READY;
 8002236:	f881 4020 	strb.w	r4, [r1, #32]
  pqp->next       = p->next;
 800223a:	6013      	str	r3, [r2, #0]
  } while (pqp->prio > p->prio);
 800223c:	688c      	ldr	r4, [r1, #8]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 800223e:	6190      	str	r0, [r2, #24]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	42a2      	cmp	r2, r4
 8002244:	d903      	bls.n	800224e <chSchDoReschedule+0x2e>
    pqp = pqp->next;
 8002246:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio > p->prio);
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	42a2      	cmp	r2, r4
 800224c:	d8fb      	bhi.n	8002246 <chSchDoReschedule+0x26>
  p->prev       = pqp->prev;
 800224e:	685a      	ldr	r2, [r3, #4]
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 8002250:	bc10      	pop	{r4}
 8002252:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 8002256:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8002258:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
 800225a:	f7fd bff1 	b.w	8000240 <_port_switch>
 800225e:	bf00      	nop
 8002260:	20001210 	.word	0x20001210
	...

08002270 <chThdExit>:
 8002270:	2320      	movs	r3, #32
void chThdExit(msg_t msg) {
 8002272:	b570      	push	{r4, r5, r6, lr}
 8002274:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = currp;
 8002278:	4e1a      	ldr	r6, [pc, #104]	@ (80022e4 <chThdExit+0x74>)
 800227a:	69b1      	ldr	r1, [r6, #24]
  return (bool)(lp->next != lp);
 800227c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
  while (ch_list_notempty(&tp->waiting)) {
 800227e:	f101 0c28 	add.w	ip, r1, #40	@ 0x28
 8002282:	4565      	cmp	r5, ip
  tp->u.exitcode = msg;
 8002284:	6248      	str	r0, [r1, #36]	@ 0x24
  while (ch_list_notempty(&tp->waiting)) {
 8002286:	d013      	beq.n	80022b0 <chThdExit+0x40>
  tp->state = CH_STATE_READY;
 8002288:	f04f 0e00 	mov.w	lr, #0
  lp->next = p->next;
 800228c:	462c      	mov	r4, r5
 800228e:	682d      	ldr	r5, [r5, #0]
  } while (pqp->prio >= p->prio);
 8002290:	4b14      	ldr	r3, [pc, #80]	@ (80022e4 <chThdExit+0x74>)
 8002292:	68a0      	ldr	r0, [r4, #8]
  lp->next = p->next;
 8002294:	628d      	str	r5, [r1, #40]	@ 0x28
 8002296:	f884 e020 	strb.w	lr, [r4, #32]
    pqp = pqp->next;
 800229a:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	4282      	cmp	r2, r0
 80022a0:	d2fb      	bcs.n	800229a <chThdExit+0x2a>
  p->prev       = pqp->prev;
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	4565      	cmp	r5, ip
 80022a6:	e9c4 3200 	strd	r3, r2, [r4]
  p->prev->next = p;
 80022aa:	6014      	str	r4, [r2, #0]
  pqp->prev     = p;
 80022ac:	605c      	str	r4, [r3, #4]
 80022ae:	d1ed      	bne.n	800228c <chThdExit+0x1c>
  if ((tp->refs == (trefs_t)0) &&
 80022b0:	f891 3022 	ldrb.w	r3, [r1, #34]	@ 0x22
 80022b4:	b93b      	cbnz	r3, 80022c6 <chThdExit+0x56>
 80022b6:	f891 3021 	ldrb.w	r3, [r1, #33]	@ 0x21
 80022ba:	079b      	lsls	r3, r3, #30
 80022bc:	d103      	bne.n	80022c6 <chThdExit+0x56>
    REG_REMOVE(tp);
 80022be:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
 80022c2:	6113      	str	r3, [r2, #16]
 80022c4:	615a      	str	r2, [r3, #20]
  otp->state = newstate;
 80022c6:	230f      	movs	r3, #15
  currp->state = CH_STATE_CURRENT;
 80022c8:	2201      	movs	r2, #1
  ch_priority_queue_t *p = pqp->next;
 80022ca:	6830      	ldr	r0, [r6, #0]
  otp->state = newstate;
 80022cc:	f881 3020 	strb.w	r3, [r1, #32]
  pqp->next       = p->next;
 80022d0:	6803      	ldr	r3, [r0, #0]
  pqp->next->prev = pqp;
 80022d2:	605e      	str	r6, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 80022d4:	f880 2020 	strb.w	r2, [r0, #32]
  pqp->next       = p->next;
 80022d8:	6033      	str	r3, [r6, #0]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 80022da:	61b0      	str	r0, [r6, #24]
}
 80022dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chSysSwitch(currp, otp);
 80022e0:	f7fd bfae 	b.w	8000240 <_port_switch>
 80022e4:	20001210 	.word	0x20001210
	...

080022f0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80022f0:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 80022f4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80022f6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80022fa:	2300      	movs	r3, #0
 80022fc:	f383 8811 	msr	BASEPRI, r3
}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
	...

08002310 <main>:
  rccResetAPB1(0xFFFFFFFF);
 8002310:	2100      	movs	r1, #0
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
#include "Can.h"
#include "Adc.h"
#include "Out.h"
#include "Digital.h"

int main(void) {
 8002316:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800231a:	4ac0      	ldr	r2, [pc, #768]	@ (800261c <main+0x30c>)
  dma.allocated_mask = 0U;
 800231c:	4dc0      	ldr	r5, [pc, #768]	@ (8002620 <main+0x310>)
 800231e:	6910      	ldr	r0, [r2, #16]
 8002320:	b087      	sub	sp, #28
  dma.isr_mask       = 0U;
 8002322:	6069      	str	r1, [r5, #4]
 8002324:	6113      	str	r3, [r2, #16]
 8002326:	6916      	ldr	r6, [r2, #16]
 8002328:	6111      	str	r1, [r2, #16]
 800232a:	6916      	ldr	r6, [r2, #16]
  rccResetAPB2(0xFFFFFFFF);
 800232c:	68d6      	ldr	r6, [r2, #12]
 800232e:	60d3      	str	r3, [r2, #12]
 8002330:	68d3      	ldr	r3, [r2, #12]
 8002332:	60d1      	str	r1, [r2, #12]
 8002334:	68d3      	ldr	r3, [r2, #12]
  rccEnablePWRInterface(true);
 8002336:	69d6      	ldr	r6, [r2, #28]
  PWR->CR |= PWR_CR_DBP;
 8002338:	4fba      	ldr	r7, [pc, #744]	@ (8002624 <main+0x314>)
  rccEnablePWRInterface(true);
 800233a:	f046 5680 	orr.w	r6, r6, #268435456	@ 0x10000000
 800233e:	61d6      	str	r6, [r2, #28]
 8002340:	69d6      	ldr	r6, [r2, #28]
  rccEnableBKPInterface(true);
 8002342:	69d6      	ldr	r6, [r2, #28]
 8002344:	460b      	mov	r3, r1
 8002346:	f046 6600 	orr.w	r6, r6, #134217728	@ 0x8000000
 800234a:	61d6      	str	r6, [r2, #28]
 800234c:	69d2      	ldr	r2, [r2, #28]
  PWR->CR |= PWR_CR_DBP;
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	4cb5      	ldr	r4, [pc, #724]	@ (8002628 <main+0x318>)
 8002352:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002356:	603a      	str	r2, [r7, #0]
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8002358:	460a      	mov	r2, r1
 800235a:	f105 0008 	add.w	r0, r5, #8
  dma.allocated_mask = 0U;
 800235e:	6029      	str	r1, [r5, #0]
    _stm32_dma_streams[i].channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8002360:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8002364:	600a      	str	r2, [r1, #0]
    dma.streams[i].func = NULL;
 8002366:	f840 2013 	str.w	r2, [r0, r3, lsl #1]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800236a:	3304      	adds	r3, #4
 800236c:	2b1c      	cmp	r3, #28
 800236e:	d1f7      	bne.n	8002360 <main+0x50>
  DMA1->IFCR = 0xFFFFFFFFU;
 8002370:	f04f 32ff 	mov.w	r2, #4294967295
 8002374:	4bad      	ldr	r3, [pc, #692]	@ (800262c <main+0x31c>)

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002376:	2060      	movs	r0, #96	@ 0x60
 8002378:	605a      	str	r2, [r3, #4]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800237a:	f44f 7480 	mov.w	r4, #256	@ 0x100
 800237e:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8002382:	f04f 0c40 	mov.w	ip, #64	@ 0x40
 8002386:	2780      	movs	r7, #128	@ 0x80
 8002388:	f44f 7600 	mov.w	r6, #512	@ 0x200
 800238c:	f44f 6580 	mov.w	r5, #1024	@ 0x400

#if PAL_USE_CALLBACKS || PAL_USE_WAIT || defined(__DOXYGEN__)
  unsigned i;

  for (i = 0; i < 16; i++) {
    _pal_init_event(i);
 8002390:	2200      	movs	r2, #0
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002392:	49a7      	ldr	r1, [pc, #668]	@ (8002630 <main+0x320>)
 8002394:	f881 0306 	strb.w	r0, [r1, #774]	@ 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002398:	f8c1 c180 	str.w	ip, [r1, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800239c:	f8c1 c000 	str.w	ip, [r1]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80023a0:	f881 0307 	strb.w	r0, [r1, #775]	@ 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80023a4:	f8c1 7180 	str.w	r7, [r1, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80023a8:	600f      	str	r7, [r1, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80023aa:	f881 0308 	strb.w	r0, [r1, #776]	@ 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80023ae:	f8c1 4180 	str.w	r4, [r1, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80023b2:	600c      	str	r4, [r1, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80023b4:	f881 0309 	strb.w	r0, [r1, #777]	@ 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80023b8:	f8c1 6180 	str.w	r6, [r1, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80023bc:	600e      	str	r6, [r1, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80023be:	f881 030a 	strb.w	r0, [r1, #778]	@ 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80023c2:	f8c1 5180 	str.w	r5, [r1, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80023c6:	600d      	str	r5, [r1, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80023c8:	f881 0317 	strb.w	r0, [r1, #791]	@ 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80023cc:	f8c1 3180 	str.w	r3, [r1, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80023d0:	600b      	str	r3, [r1, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80023d2:	4b98      	ldr	r3, [pc, #608]	@ (8002634 <main+0x324>)
 80023d4:	f881 0328 	strb.w	r0, [r1, #808]	@ 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80023d8:	f8c1 4184 	str.w	r4, [r1, #388]	@ 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80023dc:	604c      	str	r4, [r1, #4]
void _pal_lld_init(const PALConfig *config) {
 80023de:	1919      	adds	r1, r3, r4
  qp->prev = qp;
 80023e0:	e9c3 3300 	strd	r3, r3, [r3]
    _pal_init_event(i);
 80023e4:	e9c3 2202 	strd	r2, r2, [r3, #8]
  for (i = 0; i < 16; i++) {
 80023e8:	3310      	adds	r3, #16
 80023ea:	4299      	cmp	r1, r3
 80023ec:	d1f8      	bne.n	80023e0 <main+0xd0>

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 80023ee:	f04f 3188 	mov.w	r1, #2290649224	@ 0x88888888
  GPIOA->ODR = config->PAData.odr;
 80023f2:	f04f 34ff 	mov.w	r4, #4294967295
#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = NULL;
  ADCD1.dmamode = STM32_DMA_CR_PL(STM32_ADC_ADC1_DMA_PRIORITY) |
 80023f6:	f242 568a 	movw	r6, #9610	@ 0x258a
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 80023fa:	f04f 0c01 	mov.w	ip, #1
  rccEnableADC1(true);
  ADC1->CR1 = 0;
  ADC1->CR2 = ADC_CR2_ADON;

  /* Reset calibration just to be safe.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
 80023fe:	f04f 0e09 	mov.w	lr, #9
  rccEnableAPB2(APB2_EN_MASK, true);
 8002402:	4886      	ldr	r0, [pc, #536]	@ (800261c <main+0x30c>)
  GPIOA->ODR = config->PAData.odr;
 8002404:	4d8c      	ldr	r5, [pc, #560]	@ (8002638 <main+0x328>)
  rccEnableAPB2(APB2_EN_MASK, true);
 8002406:	6983      	ldr	r3, [r0, #24]
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8002408:	4f8c      	ldr	r7, [pc, #560]	@ (800263c <main+0x32c>)
  rccEnableAPB2(APB2_EN_MASK, true);
 800240a:	f043 037d 	orr.w	r3, r3, #125	@ 0x7d
 800240e:	6183      	str	r3, [r0, #24]
 8002410:	6983      	ldr	r3, [r0, #24]
  GPIOC->CRH = config->PCData.crh;
 8002412:	f8df 822c 	ldr.w	r8, [pc, #556]	@ 8002640 <main+0x330>
 8002416:	4b8b      	ldr	r3, [pc, #556]	@ (8002644 <main+0x334>)
  ADCD1.dmamode = STM32_DMA_CR_PL(STM32_ADC_ADC1_DMA_PRIORITY) |
 8002418:	e9c3 260b 	strd	r2, r6, [r3, #44]	@ 0x2c
  adcp->config   = NULL;
  adcp->samples  = NULL;
  adcp->depth    = 0;
  adcp->grpp     = NULL;
 800241c:	e9c3 2203 	strd	r2, r2, [r3, #12]
  adcp->samples  = NULL;
 8002420:	e9c3 2201 	strd	r2, r2, [r3, #4]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8002424:	615a      	str	r2, [r3, #20]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
 8002426:	621a      	str	r2, [r3, #32]
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 8002428:	4e87      	ldr	r6, [pc, #540]	@ (8002648 <main+0x338>)
  GPIOA->ODR = config->PAData.odr;
 800242a:	60ec      	str	r4, [r5, #12]
  GPIOA->CRH = config->PAData.crh;
 800242c:	6069      	str	r1, [r5, #4]
  GPIOA->CRL = config->PAData.crl;
 800242e:	6029      	str	r1, [r5, #0]
  GPIOB->ODR = config->PBData.odr;
 8002430:	f8c5 440c 	str.w	r4, [r5, #1036]	@ 0x40c
  GPIOB->CRH = config->PBData.crh;
 8002434:	f8c5 1404 	str.w	r1, [r5, #1028]	@ 0x404
  GPIOB->CRL = config->PBData.crl;
 8002438:	f8c5 1400 	str.w	r1, [r5, #1024]	@ 0x400
  GPIOC->ODR = config->PCData.odr;
 800243c:	60fc      	str	r4, [r7, #12]
  GPIOC->CRH = config->PCData.crh;
 800243e:	f8c7 8004 	str.w	r8, [r7, #4]
  GPIOC->CRL = config->PCData.crl;
 8002442:	6039      	str	r1, [r7, #0]
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8002444:	4f81      	ldr	r7, [pc, #516]	@ (800264c <main+0x33c>)
  GPIOB->ODR = config->PBData.odr;
 8002446:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
  GPIOD->ODR = config->PDData.odr;
 800244a:	60f4      	str	r4, [r6, #12]
  GPIOD->CRH = config->PDData.crh;
 800244c:	6071      	str	r1, [r6, #4]
  GPIOD->CRL = config->PDData.crl;
 800244e:	6037      	str	r7, [r6, #0]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8002450:	f8c5 4c0c 	str.w	r4, [r5, #3084]	@ 0xc0c
  GPIOE->CRH = config->PEData.crh;
 8002454:	f8c5 1c04 	str.w	r1, [r5, #3076]	@ 0xc04
  GPIOE->CRL = config->PEData.crl;
 8002458:	f8c5 1c00 	str.w	r1, [r5, #3072]	@ 0xc00
  adcp->state    = ADC_STOP;
 800245c:	f883 c000 	strb.w	ip, [r3]
  rccEnableADC1(true);
 8002460:	6981      	ldr	r1, [r0, #24]
  qp->next = qp;
 8002462:	f103 0418 	add.w	r4, r3, #24
 8002466:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800246a:	6181      	str	r1, [r0, #24]
  ADCD1.adc = ADC1;
 800246c:	4978      	ldr	r1, [pc, #480]	@ (8002650 <main+0x340>)
  qp->prev = qp;
 800246e:	e9c3 4406 	strd	r4, r4, [r3, #24]
 8002472:	6299      	str	r1, [r3, #40]	@ 0x28
  rccEnableADC1(true);
 8002474:	6983      	ldr	r3, [r0, #24]
  ADC1->CR1 = 0;
 8002476:	604a      	str	r2, [r1, #4]
  ADC1->CR2 = ADC_CR2_ADON;
 8002478:	f8c1 c008 	str.w	ip, [r1, #8]
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
 800247c:	f8c1 e008 	str.w	lr, [r1, #8]
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
 8002480:	688b      	ldr	r3, [r1, #8]
 8002482:	071c      	lsls	r4, r3, #28
 8002484:	d4fc      	bmi.n	8002480 <main+0x170>
    ;

  /* Calibration.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
 8002486:	2205      	movs	r2, #5
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
 8002488:	4b71      	ldr	r3, [pc, #452]	@ (8002650 <main+0x340>)
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
 800248a:	608a      	str	r2, [r1, #8]
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	f012 0204 	ands.w	r2, r2, #4
 8002492:	d1fb      	bne.n	800248c <main+0x17c>
    ;

  /* Return the ADC in low power mode.*/
  ADC1->CR2 = 0;
  rccDisableADC1();
 8002494:	4c61      	ldr	r4, [pc, #388]	@ (800261c <main+0x30c>)
  ADC1->CR2 = 0;
 8002496:	609a      	str	r2, [r3, #8]
  rccDisableADC1();
 8002498:	69a3      	ldr	r3, [r4, #24]
  canp->state       = CAN_STOP;
 800249a:	4f6e      	ldr	r7, [pc, #440]	@ (8002654 <main+0x344>)
 800249c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80024a0:	61a3      	str	r3, [r4, #24]
 80024a2:	69a3      	ldr	r3, [r4, #24]
 80024a4:	f04f 0a01 	mov.w	sl, #1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80024a8:	23b0      	movs	r3, #176	@ 0xb0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80024aa:	f44f 2600 	mov.w	r6, #524288	@ 0x80000
 80024ae:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80024b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80024b6:	4615      	mov	r5, r2
  canp->config      = NULL;
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80024be:	f8df 9170 	ldr.w	r9, [pc, #368]	@ 8002630 <main+0x320>
  canp->state       = CAN_STOP;
 80024c2:	f887 a000 	strb.w	sl, [r7]
 80024c6:	f889 3313 	strb.w	r3, [r9, #787]	@ 0x313
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80024ca:	f8c9 6180 	str.w	r6, [r9, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80024ce:	f8c9 6000 	str.w	r6, [r9]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80024d2:	f889 3314 	strb.w	r3, [r9, #788]	@ 0x314
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80024d6:	f8c9 0180 	str.w	r0, [r9, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80024da:	f8c9 0000 	str.w	r0, [r9]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80024de:	f889 3315 	strb.w	r3, [r9, #789]	@ 0x315
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80024e2:	f8c9 1180 	str.w	r1, [r9, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80024e6:	f8c9 1000 	str.w	r1, [r9]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80024ea:	f889 3316 	strb.w	r3, [r9, #790]	@ 0x316
  CAND1.can = CAN1;
 80024ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002658 <main+0x348>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80024f0:	f8c9 2180 	str.w	r2, [r9, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80024f4:	f8c9 2000 	str.w	r2, [r9]
 80024f8:	627b      	str	r3, [r7, #36]	@ 0x24
  qp->next = qp;
 80024fa:	f107 0308 	add.w	r3, r7, #8
  qp->prev = qp;
 80024fe:	e9c7 3302 	strd	r3, r3, [r7, #8]
  qp->next = qp;
 8002502:	f107 0310 	add.w	r3, r7, #16
  qp->prev = qp;
 8002506:	e9c7 3304 	strd	r3, r3, [r7, #16]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 800250a:	f107 0318 	add.w	r3, r7, #24
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	f107 031c 	add.w	r3, r7, #28
  can_lld_set_filters(&CAND1, STM32_CAN_MAX_FILTERS, 0, NULL);
 8002514:	462a      	mov	r2, r5
 8002516:	4629      	mov	r1, r5
 8002518:	200e      	movs	r0, #14
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	f107 0320 	add.w	r3, r7, #32
 8002520:	623b      	str	r3, [r7, #32]
 8002522:	f7fe f96d 	bl	8000800 <can_lld_set_filters.constprop.0>
  oqp->q_counter = size;
 8002526:	2310      	movs	r3, #16
  sdp->vmt = &vmt;
 8002528:	4e4c      	ldr	r6, [pc, #304]	@ (800265c <main+0x34c>)
#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = NULL;
  SPID2.dmatx     = NULL;
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 800252a:	f241 0b0a 	movw	fp, #4106	@ 0x100a
 800252e:	4630      	mov	r0, r6
  iqp->q_counter = 0;
 8002530:	6175      	str	r5, [r6, #20]
  oqp->q_counter = size;
 8002532:	63b3      	str	r3, [r6, #56]	@ 0x38
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8002534:	4b4a      	ldr	r3, [pc, #296]	@ (8002660 <main+0x350>)
  dlhp->delta = (sysinterval_t)-1;
 8002536:	f04f 3cff 	mov.w	ip, #4294967295
 800253a:	f8c3 b028 	str.w	fp, [r3, #40]	@ 0x28
 800253e:	f8df b124 	ldr.w	fp, [pc, #292]	@ 8002664 <main+0x354>
  spip->config = NULL;
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8002542:	e9c3 5501 	strd	r5, r5, [r3, #4]
 8002546:	f840 bb04 	str.w	fp, [r0], #4
 800254a:	6070      	str	r0, [r6, #4]
  oqp->q_notify  = onfy;
 800254c:	4846      	ldr	r0, [pc, #280]	@ (8002668 <main+0x358>)
  SPID2.dmatx     = NULL;
 800254e:	e9c3 5508 	strd	r5, r5, [r3, #32]
 8002552:	64f0      	str	r0, [r6, #76]	@ 0x4c
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
 8002554:	4845      	ldr	r0, [pc, #276]	@ (800266c <main+0x35c>)
  spip->state = SPI_STOP;
 8002556:	f883 a000 	strb.w	sl, [r3]
 800255a:	6770      	str	r0, [r6, #116]	@ 0x74
  SPID2.spi       = SPI2;
 800255c:	f5a0 3080 	sub.w	r0, r0, #65536	@ 0x10000
 8002560:	61d8      	str	r0, [r3, #28]
  iqp->q_top     = bp + size;
 8002562:	f106 0064 	add.w	r0, r6, #100	@ 0x64
  oqp->q_wrptr   = bp;
 8002566:	e9c6 0011 	strd	r0, r0, [r6, #68]	@ 0x44
  iqp->q_top     = bp + size;
 800256a:	61f0      	str	r0, [r6, #28]
  oqp->q_buffer  = bp;
 800256c:	63f0      	str	r0, [r6, #60]	@ 0x3c
  iqp->q_buffer  = bp;
 800256e:	f106 0054 	add.w	r0, r6, #84	@ 0x54
  iqp->q_wrptr   = bp;
 8002572:	e9c6 0008 	strd	r0, r0, [r6, #32]
  iqp->q_buffer  = bp;
 8002576:	61b0      	str	r0, [r6, #24]
  qp->next = qp;
 8002578:	f106 000c 	add.w	r0, r6, #12
  qp->prev = qp;
 800257c:	e9c6 0003 	strd	r0, r0, [r6, #12]
  qp->next = qp;
 8002580:	f106 0030 	add.w	r0, r6, #48	@ 0x30
  qp->prev = qp;
 8002584:	e9c6 000c 	strd	r0, r0, [r6, #48]	@ 0x30
  qp->next = qp;
 8002588:	f103 000c 	add.w	r0, r3, #12
  qp->prev = qp;
 800258c:	e9c3 0003 	strd	r0, r0, [r3, #12]
  oqp->q_top     = bp + size;
 8002590:	f106 0074 	add.w	r0, r6, #116	@ 0x74
 8002594:	6430      	str	r0, [r6, #64]	@ 0x40
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8002596:	f241 0018 	movw	r0, #4120	@ 0x1018
 800259a:	615d      	str	r5, [r3, #20]
  iqp->q_link    = link;
 800259c:	62f6      	str	r6, [r6, #44]	@ 0x2c
  oqp->q_link    = link;
 800259e:	6536      	str	r6, [r6, #80]	@ 0x50
  sdp->state = SD_STOP;
 80025a0:	f886 a008 	strb.w	sl, [r6, #8]
  iqp->q_notify  = infy;
 80025a4:	62b5      	str	r5, [r6, #40]	@ 0x28
 80025a6:	62d8      	str	r0, [r3, #44]	@ 0x2c
  ST_ENABLE_CLOCK();
 80025a8:	69e3      	ldr	r3, [r4, #28]
  ST_ENABLE_STOP();
 80025aa:	4831      	ldr	r0, [pc, #196]	@ (8002670 <main+0x360>)
  ST_ENABLE_CLOCK();
 80025ac:	ea43 030a 	orr.w	r3, r3, sl
 80025b0:	61e3      	str	r3, [r4, #28]
 80025b2:	69e3      	ldr	r3, [r4, #28]
  pqp->next = pqp;
 80025b4:	4c2f      	ldr	r4, [pc, #188]	@ (8002674 <main+0x364>)
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80025b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  pqp->prio = (tprio_t)0;
 80025ba:	e9c4 4501 	strd	r4, r5, [r4, #4]
 80025be:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
  ST_ENABLE_STOP();
 80025c2:	6843      	ldr	r3, [r0, #4]
  ch.vtlist.lasttime = (systime_t)0;
 80025c4:	8525      	strh	r5, [r4, #40]	@ 0x28
 80025c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025ca:	6043      	str	r3, [r0, #4]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80025cc:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 80025d0:	6293      	str	r3, [r2, #40]	@ 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80025d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80025d6:	f04f 5e80 	mov.w	lr, #268435456	@ 0x10000000
 80025da:	62d3      	str	r3, [r2, #44]	@ 0x2c
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80025dc:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
  STM32_ST_TIM->CCMR1  = 0;
 80025e0:	6195      	str	r5, [r2, #24]
  ch_memcore.basemem = __heap_base__;
 80025e2:	4825      	ldr	r0, [pc, #148]	@ (8002678 <main+0x368>)
  STM32_ST_TIM->CCR[0] = 0;
 80025e4:	6355      	str	r5, [r2, #52]	@ 0x34
  STM32_ST_TIM->DIER   = 0;
 80025e6:	60d5      	str	r5, [r2, #12]
  STM32_ST_TIM->CR2    = 0;
 80025e8:	6055      	str	r5, [r2, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80025ea:	f8c2 a014 	str.w	sl, [r2, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80025ee:	f8c2 a000 	str.w	sl, [r2]
 80025f2:	f889 331c 	strb.w	r3, [r9, #796]	@ 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80025f6:	f8c9 e180 	str.w	lr, [r9, #384]	@ 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80025fa:	f8c9 e000 	str.w	lr, [r9]
 80025fe:	f8df e07c 	ldr.w	lr, [pc, #124]	@ 800267c <main+0x36c>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8002602:	4a1f      	ldr	r2, [pc, #124]	@ (8002680 <main+0x370>)
 8002604:	f8c0 e000 	str.w	lr, [r0]
  ch_memcore.topmem  = __heap_end__;
 8002608:	f8df e078 	ldr.w	lr, [pc, #120]	@ 8002684 <main+0x374>
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
 800260c:	e9c2 5501 	strd	r5, r5, [r2, #4]
 8002610:	f8c0 e004 	str.w	lr, [r0, #4]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8002614:	481c      	ldr	r0, [pc, #112]	@ (8002688 <main+0x378>)
 8002616:	6155      	str	r5, [r2, #20]
 8002618:	6010      	str	r0, [r2, #0]
 800261a:	e037      	b.n	800268c <main+0x37c>
 800261c:	40021000 	.word	0x40021000
 8002620:	200010a4 	.word	0x200010a4
 8002624:	40007000 	.word	0x40007000
 8002628:	08002a28 	.word	0x08002a28
 800262c:	40020000 	.word	0x40020000
 8002630:	e000e100 	.word	0xe000e100
 8002634:	2000110c 	.word	0x2000110c
 8002638:	40010800 	.word	0x40010800
 800263c:	40011000 	.word	0x40011000
 8002640:	88388888 	.word	0x88388888
 8002644:	200008f0 	.word	0x200008f0
 8002648:	40011400 	.word	0x40011400
 800264c:	88888844 	.word	0x88888844
 8002650:	40012400 	.word	0x40012400
 8002654:	200010e4 	.word	0x200010e4
 8002658:	40006400 	.word	0x40006400
 800265c:	20001028 	.word	0x20001028
 8002660:	20000924 	.word	0x20000924
 8002664:	080029d0 	.word	0x080029d0
 8002668:	08000461 	.word	0x08000461
 800266c:	40013800 	.word	0x40013800
 8002670:	e0042000 	.word	0xe0042000
 8002674:	20001210 	.word	0x20001210
 8002678:	20001020 	.word	0x20001020
 800267c:	20001288 	.word	0x20001288
 8002680:	20000954 	.word	0x20000954
 8002684:	20005000 	.word	0x20005000
 8002688:	08000691 	.word	0x08000691
  dlhp->next  = dlhp;
 800268c:	f104 001c 	add.w	r0, r4, #28
  dlhp->prev  = dlhp;
 8002690:	e9c4 0007 	strd	r0, r0, [r4, #28]
  qp->next = qp;
 8002694:	f102 000c 	add.w	r0, r2, #12
  qp->prev = qp;
 8002698:	e9c2 0003 	strd	r0, r0, [r2, #12]
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
 800269c:	2214      	movs	r2, #20
  qp->next = qp;
 800269e:	4b9b      	ldr	r3, [pc, #620]	@ (800290c <main+0x5fc>)
  pqp->next = pqp;
 80026a0:	6024      	str	r4, [r4, #0]
  qp->next = qp;
 80026a2:	601b      	str	r3, [r3, #0]
  qp->prev = qp;
 80026a4:	605b      	str	r3, [r3, #4]
 80026a6:	619a      	str	r2, [r3, #24]
 80026a8:	221c      	movs	r2, #28
  mp->align = align;
 80026aa:	2104      	movs	r1, #4
  mp->object_size = size;
 80026ac:	631a      	str	r2, [r3, #48]	@ 0x30
  mp->provider = provider;
 80026ae:	4a98      	ldr	r2, [pc, #608]	@ (8002910 <main+0x600>)
 80026b0:	609d      	str	r5, [r3, #8]
 80026b2:	621a      	str	r2, [r3, #32]
 80026b4:	639a      	str	r2, [r3, #56]	@ 0x38
  } while ((c != (char)0) && (i > 0U));
}

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 80026b6:	f103 0210 	add.w	r2, r3, #16
 80026ba:	611a      	str	r2, [r3, #16]
 80026bc:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80026c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80026c2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80026c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80026c8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80026cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026ce:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80026d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80026d4:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 80026d8:	645a      	str	r2, [r3, #68]	@ 0x44
  mp->next = NULL;
 80026da:	615d      	str	r5, [r3, #20]
  tmp->cumulative = (rttime_t)0;
 80026dc:	2200      	movs	r2, #0
  mp->align = align;
 80026de:	61d9      	str	r1, [r3, #28]
 80026e0:	6359      	str	r1, [r3, #52]	@ 0x34
  mp->next = NULL;
 80026e2:	62dd      	str	r5, [r3, #44]	@ 0x2c
 80026e4:	2300      	movs	r3, #0
 80026e6:	4688      	mov	r8, r1
 80026e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  tmp->best       = (rtcnt_t)-1;
 80026ec:	f8cd c000 	str.w	ip, [sp]
  ch.tm.offset = (rtcnt_t)0;
 80026f0:	6765      	str	r5, [r4, #116]	@ 0x74
  tmp->worst      = (rtcnt_t)0;
 80026f2:	9501      	str	r5, [sp, #4]
  tmp->n          = (ucnt_t)0;
 80026f4:	9503      	str	r5, [sp, #12]
    chTMStartMeasurementX(&tm);
 80026f6:	4668      	mov	r0, sp
 80026f8:	f7fd ff52 	bl	80005a0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 80026fc:	f7fd ff58 	bl	80005b0 <chTMStopMeasurementX>
  } while (i > 0U);
 8002700:	f1b8 0801 	subs.w	r8, r8, #1
 8002704:	d1f7      	bne.n	80026f6 <main+0x3e6>
  tp->hdr.pqueue.prio = prio;
 8002706:	2180      	movs	r1, #128	@ 0x80
  tp->refs            = (trefs_t)1;
 8002708:	2201      	movs	r2, #1
  ch.tm.offset = tm.best;
 800270a:	9800      	ldr	r0, [sp, #0]
  REG_INSERT(tp);
 800270c:	4b81      	ldr	r3, [pc, #516]	@ (8002914 <main+0x604>)
 800270e:	6760      	str	r0, [r4, #116]	@ 0x74
  tp->name            = name;
 8002710:	4881      	ldr	r0, [pc, #516]	@ (8002918 <main+0x608>)
  REG_INSERT(tp);
 8002712:	e9c4 3304 	strd	r3, r3, [r4, #16]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8002716:	61a3      	str	r3, [r4, #24]
  tp->hdr.pqueue.prio = prio;
 8002718:	63a1      	str	r1, [r4, #56]	@ 0x38
  tp->realprio        = prio;
 800271a:	66e1      	str	r1, [r4, #108]	@ 0x6c
  qp->next = qp;
 800271c:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
  lp->next = lp;
 8002720:	3328      	adds	r3, #40	@ 0x28
 8002722:	2520      	movs	r5, #32
  tp->epending        = (eventmask_t)0;
 8002724:	e9c4 8819 	strd	r8, r8, [r4, #100]	@ 0x64
  REG_INSERT(tp);
 8002728:	e9c4 4410 	strd	r4, r4, [r4, #64]	@ 0x40
  qp->next = qp;
 800272c:	e9c4 3116 	strd	r3, r1, [r4, #88]	@ 0x58
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 8002730:	f8c4 804c 	str.w	r8, [r4, #76]	@ 0x4c
  tp->name            = name;
 8002734:	64a0      	str	r0, [r4, #72]	@ 0x48
  tp->refs            = (trefs_t)1;
 8002736:	f884 2052 	strb.w	r2, [r4, #82]	@ 0x52
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 800273a:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
  qp->prev = qp;
 800273e:	6621      	str	r1, [r4, #96]	@ 0x60
 8002740:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 8002744:	b662      	cpsie	i
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002746:	f64f 0eff 	movw	lr, #63743	@ 0xf8ff
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274a:	f04f 0c10 	mov.w	ip, #16
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800274e:	4b73      	ldr	r3, [pc, #460]	@ (800291c <main+0x60c>)
  reg_value  =  (reg_value                                   |
 8002750:	4973      	ldr	r1, [pc, #460]	@ (8002920 <main+0x610>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002752:	68d8      	ldr	r0, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002754:	ea00 000e 	and.w	r0, r0, lr
  reg_value  =  (reg_value                                   |
 8002758:	4301      	orrs	r1, r0
  SCB->AIRCR =  reg_value;
 800275a:	60d9      	str	r1, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800275c:	f8d3 10fc 	ldr.w	r1, [r3, #252]	@ 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002760:	4870      	ldr	r0, [pc, #448]	@ (8002924 <main+0x614>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002762:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8002766:	f8c3 10fc 	str.w	r1, [r3, #252]	@ 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800276a:	6801      	ldr	r1, [r0, #0]
 800276c:	4311      	orrs	r1, r2
 800276e:	6001      	str	r1, [r0, #0]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002770:	f883 c01f 	strb.w	ip, [r3, #31]
 8002774:	f883 5022 	strb.w	r5, [r3, #34]	@ 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002778:	f388 8811 	msr	BASEPRI, r8
  __ASM volatile ("cpsie i" : : : "memory");
 800277c:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800277e:	f385 8811 	msr	BASEPRI, r5
  tp->state           = CH_STATE_WTSTART;
 8002782:	2102      	movs	r1, #2
  tp->wabase = tdp->wbase;
 8002784:	4b68      	ldr	r3, [pc, #416]	@ (8002928 <main+0x618>)
  tp->state           = CH_STATE_WTSTART;
 8002786:	f8a3 10b0 	strh.w	r1, [r3, #176]	@ 0xb0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800278a:	4968      	ldr	r1, [pc, #416]	@ (800292c <main+0x61c>)
  tp->hdr.pqueue.prio = prio;
 800278c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002790:	66d9      	str	r1, [r3, #108]	@ 0x6c
 8002792:	4967      	ldr	r1, [pc, #412]	@ (8002930 <main+0x620>)
  tp->realprio        = prio;
 8002794:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002798:	f8c3 108c 	str.w	r1, [r3, #140]	@ 0x8c
  tp->name            = name;
 800279c:	4965      	ldr	r1, [pc, #404]	@ (8002934 <main+0x624>)
  tp->refs            = (trefs_t)1;
 800279e:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
  REG_INSERT(tp);
 80027a2:	6962      	ldr	r2, [r4, #20]
  tp->name            = name;
 80027a4:	f8c3 10a8 	str.w	r1, [r3, #168]	@ 0xa8
  REG_INSERT(tp);
 80027a8:	f103 0090 	add.w	r0, r3, #144	@ 0x90
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80027ac:	f103 016c 	add.w	r1, r3, #108	@ 0x6c
  REG_INSERT(tp);
 80027b0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tp->epending        = (eventmask_t)0;
 80027b4:	e9c3 8831 	strd	r8, r8, [r3, #196]	@ 0xc4
  tp->wabase = tdp->wbase;
 80027b8:	f8c3 30ac 	str.w	r3, [r3, #172]	@ 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80027bc:	f8c3 8070 	str.w	r8, [r3, #112]	@ 0x70
  REG_INSERT(tp);
 80027c0:	f8c3 40a0 	str.w	r4, [r3, #160]	@ 0xa0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80027c4:	f8c3 109c 	str.w	r1, [r3, #156]	@ 0x9c
  REG_INSERT(tp);
 80027c8:	6110      	str	r0, [r2, #16]
  qp->next = qp;
 80027ca:	f103 02bc 	add.w	r2, r3, #188	@ 0xbc
  qp->prev = qp;
 80027ce:	e9c3 222f 	strd	r2, r2, [r3, #188]	@ 0xbc
  lp->next = lp;
 80027d2:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 80027d6:	6160      	str	r0, [r4, #20]
 80027d8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  chSchWakeupS(tp, MSG_OK);
 80027dc:	f7fe fa68 	bl	8000cb0 <chSchWakeupS.constprop.0>
 80027e0:	f388 8811 	msr	BASEPRI, r8
 80027e4:	f385 8811 	msr	BASEPRI, r5
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80027e8:	7a33      	ldrb	r3, [r6, #8]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d10c      	bne.n	8002808 <main+0x4f8>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80027ee:	20c0      	movs	r0, #192	@ 0xc0
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(true);
 80027f0:	4a51      	ldr	r2, [pc, #324]	@ (8002938 <main+0x628>)
 80027f2:	4b52      	ldr	r3, [pc, #328]	@ (800293c <main+0x62c>)
 80027f4:	6991      	ldr	r1, [r2, #24]
 80027f6:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80027fa:	6191      	str	r1, [r2, #24]
 80027fc:	6992      	ldr	r2, [r2, #24]
 80027fe:	f883 0325 	strb.w	r0, [r3, #805]	@ 0x325
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002802:	f8c3 5184 	str.w	r5, [r3, #388]	@ 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002806:	605d      	str	r5, [r3, #4]
  u->BRR = fck;
 8002808:	f240 2271 	movw	r2, #625	@ 0x271
  USART_TypeDef *u = sdp->usart;
 800280c:	6f73      	ldr	r3, [r6, #116]	@ 0x74
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800280e:	2501      	movs	r5, #1
  u->BRR = fck;
 8002810:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002812:	2240      	movs	r2, #64	@ 0x40
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002814:	f242 112c 	movw	r1, #8492	@ 0x212c
  u->SR = 0;
 8002818:	f04f 0800 	mov.w	r8, #0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800281c:	611a      	str	r2, [r3, #16]
  sdp->state = SD_READY;
 800281e:	f04f 0902 	mov.w	r9, #2
    sdp->rxmask = 0xFF;
 8002822:	22ff      	movs	r2, #255	@ 0xff
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002824:	615d      	str	r5, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002826:	60d9      	str	r1, [r3, #12]
  u->SR = 0;
 8002828:	f8c3 8000 	str.w	r8, [r3]
  (void)u->SR;  /* SR reset step 1.*/
 800282c:	6819      	ldr	r1, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800282e:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 8002830:	f886 2078 	strb.w	r2, [r6, #120]	@ 0x78
 8002834:	f886 9008 	strb.w	r9, [r6, #8]
 8002838:	f388 8811 	msr	BASEPRI, r8
    }
}

void startAdcThread(void)
{
    chThdCreateStatic(waAdcThread, sizeof(waAdcThread), NORMALPRIO + 30, AdcThread, NULL);
 800283c:	219e      	movs	r1, #158	@ 0x9e
 800283e:	4a40      	ldr	r2, [pc, #256]	@ (8002940 <main+0x630>)
 8002840:	4840      	ldr	r0, [pc, #256]	@ (8002944 <main+0x634>)
 8002842:	f7fe fa65 	bl	8000d10 <chThdCreateStatic.constprop.0.isra.0>
    }
}

void startDigitalThread(void)
{
    chThdCreateStatic(waDigitalThread, sizeof(waDigitalThread), NORMALPRIO + 2, DigitalThread, NULL);
 8002846:	2182      	movs	r1, #130	@ 0x82
 8002848:	4a3f      	ldr	r2, [pc, #252]	@ (8002948 <main+0x638>)
 800284a:	4840      	ldr	r0, [pc, #256]	@ (800294c <main+0x63c>)
 800284c:	f7fe fa60 	bl	8000d10 <chThdCreateStatic.constprop.0.isra.0>
    }
}

void startOutThread(void)
{
    chThdCreateStatic(waOutThread, sizeof(waOutThread), NORMALPRIO, OutThread, NULL);
 8002850:	2180      	movs	r1, #128	@ 0x80
 8002852:	4a3f      	ldr	r2, [pc, #252]	@ (8002950 <main+0x640>)
 8002854:	483f      	ldr	r0, [pc, #252]	@ (8002954 <main+0x644>)
 8002856:	f7fe fa5b 	bl	8000d10 <chThdCreateStatic.constprop.0.isra.0>
  osalDbgAssert(CAND3.state == CAN_STOP, "invalid state");
#endif

#if STM32_CAN_USE_CAN1
  if (canp == &CAND1) {
    can_lld_set_filters(canp, can2sb, num, cfp);
 800285a:	4640      	mov	r0, r8
 800285c:	4629      	mov	r1, r5
 800285e:	4a3e      	ldr	r2, [pc, #248]	@ (8002958 <main+0x648>)
 8002860:	f7fd ffce 	bl	8000800 <can_lld_set_filters.constprop.0>
 8002864:	2320      	movs	r3, #32
 8002866:	f383 8811 	msr	BASEPRI, r3
    rccEnableCAN1(true);
 800286a:	4a33      	ldr	r2, [pc, #204]	@ (8002938 <main+0x628>)
  canp->state = CAN_STARTING;
 800286c:	f887 9000 	strb.w	r9, [r7]
 8002870:	69d1      	ldr	r1, [r2, #28]
  canp->config = config;
 8002872:	4b3a      	ldr	r3, [pc, #232]	@ (800295c <main+0x64c>)
 8002874:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 8002878:	607b      	str	r3, [r7, #4]
  canp->can->MCR = CAN_MCR_INRQ;
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    rccEnableCAN1(true);
 800287c:	61d1      	str	r1, [r2, #28]
 800287e:	69d2      	ldr	r2, [r2, #28]
  canp->can->MCR = CAN_MCR_INRQ;
 8002880:	601d      	str	r5, [r3, #0]
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	07d1      	lsls	r1, r2, #31
 8002886:	d407      	bmi.n	8002898 <main+0x588>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8002888:	2101      	movs	r1, #1
 800288a:	2008      	movs	r0, #8
 800288c:	f7fe f838 	bl	8000900 <chSchGoSleepTimeoutS>
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	07d2      	lsls	r2, r2, #31
 8002896:	d5f7      	bpl.n	8002888 <main+0x578>
  canp->state = CAN_READY;
 8002898:	2104      	movs	r1, #4
  canp->can->BTR = canp->config->btr;
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6850      	ldr	r0, [r2, #4]
  canp->can->MCR = canp->config->mcr;
 800289e:	6812      	ldr	r2, [r2, #0]
  canp->can->BTR = canp->config->btr;
 80028a0:	61d8      	str	r0, [r3, #28]
  canp->can->MCR = canp->config->mcr;
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	7039      	strb	r1, [r7, #0]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 80028a6:	492e      	ldr	r1, [pc, #184]	@ (8002960 <main+0x650>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	6159      	str	r1, [r3, #20]
 80028ac:	f382 8811 	msr	BASEPRI, r2

void startCanThread(void)
{
    canSTM32SetFilters(&CAND1, 0, 1, &filters[0]);
    canStart(&CAND1, &cancfg);
    chThdCreateStatic(waCanRxThread, sizeof(waCanRxThread), NORMALPRIO + 32, CanRxThread, NULL);
 80028b0:	21a0      	movs	r1, #160	@ 0xa0
 80028b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002964 <main+0x654>)
 80028b4:	482c      	ldr	r0, [pc, #176]	@ (8002968 <main+0x658>)
 80028b6:	f7fe fa2b 	bl	8000d10 <chThdCreateStatic.constprop.0.isra.0>
    chThdCreateStatic(waCanTxThread, sizeof(waCanTxThread), NORMALPRIO + 32, CanTxThread, NULL);
 80028ba:	21a0      	movs	r1, #160	@ 0xa0
 80028bc:	4a2b      	ldr	r2, [pc, #172]	@ (800296c <main+0x65c>)
 80028be:	482c      	ldr	r0, [pc, #176]	@ (8002970 <main+0x660>)
 80028c0:	f7fe fa26 	bl	8000d10 <chThdCreateStatic.constprop.0.isra.0>
 80028c4:	f04f 0820 	mov.w	r8, #32
  otp->state = newstate;
 80028c8:	2708      	movs	r7, #8
 80028ca:	4e2a      	ldr	r6, [pc, #168]	@ (8002974 <main+0x664>)
 80028cc:	f388 8811 	msr	BASEPRI, r8
    chVTDoSetI(&vt, timeout, wakeup, currp);
 80028d0:	69a5      	ldr	r5, [r4, #24]
  vt_enqueue(vtlp, vtp, delay);
 80028d2:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80028d6:	4668      	mov	r0, sp
  vtp->func    = vtfunc;
 80028d8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  vt_enqueue(vtlp, vtp, delay);
 80028dc:	f7fd ff08 	bl	80006f0 <vt_enqueue.constprop.0>
  currp->state = CH_STATE_CURRENT;
 80028e0:	2201      	movs	r2, #1
  ch_priority_queue_t *p = pqp->next;
 80028e2:	6820      	ldr	r0, [r4, #0]
  otp->state = newstate;
 80028e4:	f885 7020 	strb.w	r7, [r5, #32]
  pqp->next       = p->next;
 80028e8:	6803      	ldr	r3, [r0, #0]
  chSysSwitch(currp, otp);
 80028ea:	4629      	mov	r1, r5
  pqp->next->prev = pqp;
 80028ec:	605c      	str	r4, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 80028ee:	f880 2020 	strb.w	r2, [r0, #32]
  pqp->next       = p->next;
 80028f2:	6023      	str	r3, [r4, #0]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 80028f4:	61a0      	str	r0, [r4, #24]
  chSysSwitch(currp, otp);
 80028f6:	f7fd fca3 	bl	8000240 <_port_switch>
    if (chVTIsArmedI(&vt)) {
 80028fa:	9b03      	ldr	r3, [sp, #12]
 80028fc:	b113      	cbz	r3, 8002904 <main+0x5f4>
      chVTDoResetI(&vt);
 80028fe:	4668      	mov	r0, sp
 8002900:	f7fd fdbe 	bl	8000480 <chVTDoResetI>
 8002904:	2300      	movs	r3, #0
 8002906:	f383 8811 	msr	BASEPRI, r3
}
 800290a:	e7df      	b.n	80028cc <main+0x5bc>
 800290c:	20000970 	.word	0x20000970
 8002910:	080006d1 	.word	0x080006d1
 8002914:	20001240 	.word	0x20001240
 8002918:	080029f8 	.word	0x080029f8
 800291c:	e000ed00 	.word	0xe000ed00
 8002920:	05fa0300 	.word	0x05fa0300
 8002924:	e0001000 	.word	0xe0001000
 8002928:	20000800 	.word	0x20000800
 800292c:	08000471 	.word	0x08000471
 8002930:	08000251 	.word	0x08000251
 8002934:	080029c8 	.word	0x080029c8
 8002938:	40021000 	.word	0x40021000
 800293c:	e000e100 	.word	0xe000e100
 8002940:	08001021 	.word	0x08001021
 8002944:	200009b8 	.word	0x200009b8
 8002948:	080010e1 	.word	0x080010e1
 800294c:	20000b00 	.word	0x20000b00
 8002950:	08001081 	.word	0x08001081
 8002954:	20000c48 	.word	0x20000c48
 8002958:	08002a18 	.word	0x08002a18
 800295c:	08002a10 	.word	0x08002a10
 8002960:	0001875b 	.word	0x0001875b
 8002964:	08000d91 	.word	0x08000d91
 8002968:	20000ed8 	.word	0x20000ed8
 800296c:	08000f21 	.word	0x08000f21
 8002970:	20000d90 	.word	0x20000d90
 8002974:	08000531 	.word	0x08000531
